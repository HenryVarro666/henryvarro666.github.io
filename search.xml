<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1182022</title>
    <url>/2022/01/18/01182022/</url>
    <content><![CDATA[<p>中国教育资源的不公</p>
<span id="more"></span>

<p><a href="https://www.bilibili.com/video/BV1HD4y1U7wU?spm_id_from=333.1007.top_right_bar_window_history.content.click">骁话一下：江苏状元会落榜清北？高考的问题不在分数</a></p>
]]></content>
      <categories>
        <category>尘世间</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>01242022 Data606</title>
    <url>/2022/01/24/01242022-Data606/</url>
    <content><![CDATA[<p>RandomSampling.ipynb</p>
<span id="more"></span>

<h2 id="Discrete-Probability-Distribution"><a href="#Discrete-Probability-Distribution" class="headerlink" title="Discrete Probability Distribution"></a>Discrete Probability Distribution</h2><p>A discrete probability distribution is a probability distribution that can take on a countable number of values.In the case where the range of values is countably infinite, these values have to decline to zero fast enough for the probabilities to add up to 1. For example, if ${\displaystyle \operatorname {P} (X&#x3D;n)&#x3D;{\tfrac {1}{2^{n}}}}$ for n &#x3D; 1, 2, …, the sum of probabilities would be 1&#x2F;2 + 1&#x2F;4 + 1&#x2F;8 + … &#x3D; 1  </p>
<p>Examples include the Poisson distribution, the Bernoulli distribution, and the binomial distribution.</p>
<p>When a sample (a set of observations) is drawn from a larger population, the sample points have an empirical distribution that is discrete, and which provides information about the population distribution.</p>
<p><a href="https://en.wikipedia.org/wiki/Probability_distribution">Wikipedia</a></p>
<h2 id="Probability-Mass-Function-PMF"><a href="#Probability-Mass-Function-PMF" class="headerlink" title="Probability Mass Function (PMF)"></a>Probability Mass Function (PMF)</h2><p> A probability mass function (PMF) is a function that gives the probability that a discrete random variable is exactly equal to some value. Sometimes it is also known as the discrete density function.</p>
<p> <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/85/Discrete_probability_distrib.svg/440px-Discrete_probability_distrib.svg.png" alt="Pmd"></p>
<h2 id="Cumulative-Distribution-Function-CDF"><a href="#Cumulative-Distribution-Function-CDF" class="headerlink" title="Cumulative Distribution Function (CDF)"></a>Cumulative Distribution Function (CDF)</h2><p> A cumulative distribution function (CDF) of a random variable ${\displaystyle X}$ , or just distribution function of ${\displaystyle X}$, evaluated at ${\displaystyle x}$, is the probability that ${\displaystyle X}$ will take a value less than or equal to ${\displaystyle x}$.</p>
<p> <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Discrete_probability_distribution.svg/440px-Discrete_probability_distribution.svg.png" alt="CDF"></p>
<h2 id="Inverse-distribution-function-quantile-function"><a href="#Inverse-distribution-function-quantile-function" class="headerlink" title="Inverse distribution function (quantile function)"></a>Inverse distribution function (quantile function)</h2><p> The quantile function, associated with a probability distribution of a random variable, specifies the value of the random variable such that the probability of the variable being less than or equal to that value equals the given probability. It is also called the percent-point function or inverse cumulative distribution function.</p>
<p> <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/55/Quantile_distribution_function.svg/440px-Quantile_distribution_function.svg.png" alt="Quantile function"></p>
<p> <a href="https://en.wikipedia.org/wiki/Quantile_function">Wikipedia</a></p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p> Here is an intuitive explanation:<br> <a href="https://www.quora.com/What-is-an-intuitive-explanation-of-inverse-transform-sampling-method-in-statistics-and-how-does-it-relate-to-cumulative-distribution-function">Quora</a></p>
<p> P(Weak)&#x3D;0.2 ,  P(Standard)&#x3D;0.7,   P(Strong) &#x3D; 0.1</p>
<p> <img src="https://qph.fs.quoracdn.net/main-qimg-f7053445ffad6cc469aa9276b91c9153-c" alt="image"></p>
<h2 id="Continuous-Probability-Distribution"><a href="#Continuous-Probability-Distribution" class="headerlink" title="Continuous Probability Distribution"></a>Continuous Probability Distribution</h2><p> A continuous probability distribution is a probability distribution whose support is an uncountable set, such as an interval in the real line. They are uniquely characterized by a cumulative distribution function that can be used to calculate the probability for each subset of the support. There are many examples of continuous probability distributions: normal, uniform, chi-squared, and others.</p>
<h2 id="Probability-Density-Function-PDF"><a href="#Probability-Density-Function-PDF" class="headerlink" title="Probability Density Function (PDF)"></a>Probability Density Function (PDF)</h2><p> A probability density function (PDF), or density of a continuous random variable, is a function whose value at any given sample (or point) in the sample space (the set of possible values taken by the random variable) can be interpreted as providing a relative likelihood that the value of the random variable would equal that sample. (Wikipedia)</p>
<p> <img src="http://work.thaslwanter.at/Stats/html/_images/PDF.png" alt="image"></p>
<h1 id="Inverse-Transform-Sampling"><a href="#Inverse-Transform-Sampling" class="headerlink" title="Inverse Transform Sampling"></a>Inverse Transform Sampling</h1><p> Inverse transform sampling is a basic method for pseudo-random number sampling, i.e., for generating sample numbers at random from any probability distribution given its cumulative distribution function.</p>
<p> <img src="https://d3i71xaburhd42.cloudfront.net/971ee627f5514239531865dcb862f915bde5cae5/2-Figure34.1-1.png" alt="image"></p>
<h2 id="Example-Bernoulli-Distribution"><a href="#Example-Bernoulli-Distribution" class="headerlink" title="Example: Bernoulli Distribution"></a>Example: Bernoulli Distribution</h2><h2 id="Theorem"><a href="#Theorem" class="headerlink" title="Theorem"></a>Theorem</h2><p>Reference: Machine Learning - A Probabilistic Perspective, Kevin P. Murphy, Page 818</p>
<p>If $U\sim U(0,1)$ is a uniform random variable, then $F^{-1}(U)\sim F$</p>
<p>Proof: </p>
<p>$Pr(F^{-1}(U) \le x) &#x3D; Pr(U \le F(x))$, applying F to both sides</p>
<p>$&#x3D;F(x)$, because $Pr(U \le y)&#x3D;y$</p>
<p>The first line follows since F is a monotonic function and the second line follows since U is uniform on the unit interval.</p>
<h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h2><p>The probability density function (pdf) of an exponential distribution is</p>
<p>${\displaystyle f(x;\lambda )&#x3D;{\begin{cases}\lambda e^{-\lambda x}&amp;x\geq 0,\0&amp;x&lt;0.\end{cases}}}$</p>
<p>Here λ &gt; 0 is the parameter of the distribution</p>
<p>The cumulative distribution function is given by</p>
<p>${\displaystyle F(x;\lambda )&#x3D;{\begin{cases}1-e^{-\lambda x}&amp;x\geq 0,\0&amp;x&lt;0.\end{cases}}}$</p>
<p>The inverse cumulative function is</p>
<p>${\displaystyle F^{-1}(p)&#x3D;{\begin{cases} {\tfrac {-ln(1-p)}{\lambda}} &amp;x\geq 0,\0&amp;x&lt;0.\end{cases}}}$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">                                     </span><br><span class="line">lambda_1 = <span class="number">2</span>                                 </span><br><span class="line">U=np.random.random(<span class="number">10000</span>)            </span><br><span class="line">X=-np.log(<span class="number">1</span>-U)/lambda_1</span><br><span class="line">np.mean(X)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>




<pre><code>0.49518234988983334
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Exercise.         </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># is f(x) = 4*x on the interval [0,1] a density function? if not, what is the normalizing factor?</span></span><br><span class="line"><span class="comment"># What is the CDF?</span></span><br><span class="line"><span class="comment"># What is the inverse CDF?</span></span><br><span class="line"><span class="comment"># Use inverse sampling to estimate the expectation of the distribution</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># random numbers from a Bernoulli distribution (binary outcome) e.g., tossing a  coin heads/tails 10 times</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 0----------p---1</span></span><br><span class="line">                                 <span class="comment">#.....</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bern</span>(<span class="params">p</span>):</span><br><span class="line">  r = np.random.uniform(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">if</span> r &lt; p:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">size = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">  coin = bern(<span class="number">0.5</span>)  <span class="comment"># fair coin</span></span><br><span class="line">  <span class="built_in">print</span>(coin)</span><br></pre></td></tr></table></figure>

<pre><code>0
0
0
1
1
0
1
0
1
0
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># off-the-shelf use of a library</span></span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> bernoulli</span><br><span class="line">size = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">  coin = bernoulli.rvs(<span class="number">0.5</span>)  <span class="comment"># fair coin</span></span><br><span class="line">  <span class="built_in">print</span>(coin)</span><br></pre></td></tr></table></figure>

<pre><code>1
1
0
0
0
0
0
1
0
0
</code></pre>
<h2 id="Example-Binomial-Distribution"><a href="#Example-Binomial-Distribution" class="headerlink" title="Example: Binomial Distribution"></a>Example: Binomial Distribution</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Binomial distribution: binomial random variable counts the number of heads or positives or successes x in n repeated trials of a binomial experiment</span></span><br><span class="line"><span class="comment"># Example: simulation of the number of heads and tails by tossing a fair coin 10 times</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bern</span>(<span class="params">p</span>):</span><br><span class="line">  r = np.random.uniform(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">if</span> r &lt; p:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>                     </span><br><span class="line"></span><br><span class="line">size = <span class="number">10</span></span><br><span class="line">x = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">y = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">  index = bern(<span class="number">0.5</span>)</span><br><span class="line">  y[index] +=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>[4, 6]
</code></pre>
<img src='https://www.onlinemathlearning.com/image-files/binomial-distribution-formula.png'>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Bernoulli as a special case of Binomial                     </span></span><br><span class="line">                                                             </span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> binom</span><br><span class="line"></span><br><span class="line">size = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">  coin = binom.rvs(<span class="number">1</span>,<span class="number">0.5</span>, size=<span class="number">1</span>)  <span class="comment"># fair coin       </span></span><br><span class="line">  <span class="built_in">print</span>(coin)</span><br></pre></td></tr></table></figure>

<pre><code>[0]
[0]
[0]
[0]
[1]
[0]
[1]
[1]
[1]
[0]
</code></pre>
<h2 id="Example-Categorical-Distribution"><a href="#Example-Categorical-Distribution" class="headerlink" title="Example: Categorical Distribution"></a>Example: Categorical Distribution</h2><p>A categorical distribution (also called a generalized Bernoulli distribution, multinoulli distribution) is a discrete probability distribution that describes the possible results of a random variable that can take on one of K possible categories, with the probability of each category separately specified.(Wikipedia)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example: random outcomes of a die tossed 10 times</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0-------p1--p1+p2------p1+p2+p3-------p1+p2+p3+p4----p1+p2+p3+p4+p5------1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">categ</span>(<span class="params">p1,p2,p3,p4,p5,p6</span>):</span><br><span class="line">  r = np.random.uniform(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">if</span> r &lt; p1:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">elif</span> r &lt; p1 + p2:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">elif</span> r &lt; p1 + p2 + p3:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">  <span class="keyword">elif</span> r &lt; p1 + p2 + p3 + p4:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">elif</span> r &lt; p1 + p2 + p3 + p4 + p5:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">  <span class="keyword">else</span>: <span class="keyword">return</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line">size = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">  dice = categ(<span class="number">1</span>/<span class="number">6</span>,<span class="number">1</span>/<span class="number">6</span>, <span class="number">1</span>/<span class="number">6</span>, <span class="number">1</span>/<span class="number">6</span>, <span class="number">1</span>/<span class="number">6</span>, <span class="number">1</span>/<span class="number">6</span>)  <span class="comment"># fair die</span></span><br><span class="line">  <span class="built_in">print</span>(dice)</span><br></pre></td></tr></table></figure>

<pre><code>5
2
3
4
3
3
4
2
5
3
</code></pre>
<h2 id="Multinomial-Distribution"><a href="#Multinomial-Distribution" class="headerlink" title="Multinomial Distribution"></a>Multinomial Distribution</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Multinomial distribution is the generalization of the binomial distribution when the categorical variable has more than two outcomes</span></span><br><span class="line"><span class="comment"># Example: Simulation of the number  of times each side of a fair die shows up if the die is tossed 10 times</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>] <span class="comment"># initialize count to zero</span></span><br><span class="line">size = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">  dice = categ(<span class="number">1</span>/<span class="number">6</span>,<span class="number">1</span>/<span class="number">6</span>, <span class="number">1</span>/<span class="number">6</span>, <span class="number">1</span>/<span class="number">6</span>, <span class="number">1</span>/<span class="number">6</span>, <span class="number">1</span>/<span class="number">6</span>)</span><br><span class="line">  y[dice] += <span class="number">1</span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(y[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure>

<pre><code>[0, 4, 2, 1, 1, 2]
</code></pre>
<p>Probability of multinomial distribution</p>
<h1 id="frac-n-x-1-cdots-x-k-p-1-x-1-cdots-p-k-x-k"><a href="#frac-n-x-1-cdots-x-k-p-1-x-1-cdots-p-k-x-k" class="headerlink" title="$\frac{n!}{x_1!\cdots x_k!} p_1^{x_1} \cdots p_k^{x_k}$"></a>$\frac{n!}{x_1!\cdots x_k!} p_1^{x_1} \cdots p_k^{x_k}$</h1><h2 id="Beta-Distribution"><a href="#Beta-Distribution" class="headerlink" title="Beta Distribution"></a>Beta Distribution</h2><p>The beta distribution is a family of continuous probability distributions defined on the interval [0, 1] parameterized by two positive shape parameters, denoted by α and β, that appear as exponents of the random variable and control the shape of the distribution. The generalization to multiple variables is called a Dirichlet distribution.</p>
<p>In Bayesian inference, the beta distribution is the conjugate prior probability distribution for the Bernoulli, binomial, negative binomial and geometric distributions. The beta distribution is a suitable model for the random behavior of percentages and proportions.</p>
<p>The probability density function (pdf) of the beta distribution, for 0 ≤ x ≤ 1, and shape parameters α, β &gt; 0, is a power function of the variable x and of its reflection (1 − x) as follows:</p>
<p>${\displaystyle {\begin{aligned}f(x;\alpha ,\beta )&amp;&#x3D;\mathrm {constant} \cdot x^{\alpha -1}(1-x)^{\beta -1}\[3pt]&amp;&#x3D;{\frac {x^{\alpha -1}(1-x)^{\beta -1}}{\displaystyle \int _{0}^{1}u^{\alpha -1}(1-u)^{\beta -1},du}}\[6pt]&amp;&#x3D;{\frac {\Gamma (\alpha +\beta )}{\Gamma (\alpha )\Gamma (\beta )}},x^{\alpha -1}(1-x)^{\beta -1}\[6pt]&amp;&#x3D;{\frac {1}{\mathrm {B} (\alpha ,\beta )}}x^{\alpha -1}(1-x)^{\beta -1}\end{aligned}}}$</p>
<p>where Γ(z) is the gamma function.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/7/78/PDF_of_the_Beta_distribution.gif" alt="image"></p>
<h2 id="numpy-random-beta"><a href="#numpy-random-beta" class="headerlink" title="numpy.random.beta"></a>numpy.random.beta</h2><h2 id="Dirichlet-distribution"><a href="#Dirichlet-distribution" class="headerlink" title="Dirichlet distribution"></a>Dirichlet distribution</h2><p>The Dirichlet distribution  ${\displaystyle \operatorname {Dir} ({\boldsymbol {\alpha }})})$, is a family of continuous multivariate probability distributions parameterized by a vector ${\displaystyle {\boldsymbol {\alpha }}}$ of positive reals.</p>
<p>The Dirichlet distribution of order K ≥ 2 with parameters α1, …, αK &gt; 0 has a probability density function  given by</p>
<p>${\displaystyle f\left(x_{1},\ldots ,x_{K};\alpha <em>{1},\ldots ,\alpha <em>{K}\right)&#x3D;{\frac {1}{\mathrm {B} ({\boldsymbol {\alpha }})}}\prod <em>{i&#x3D;1}^{K}x</em>{i}^{\alpha <em>{i}-1}}$<br>where ${\displaystyle {x</em>{k}}</em>{k&#x3D;1}^{k&#x3D;K}}$ belong to the standard ${\displaystyle K-1}$ simplex, or in other words: ${\displaystyle \sum <em>{i&#x3D;1}^{K}x</em>{i}&#x3D;1{\mbox{ and }}x</em>{i}\geq 0{\mbox{ for all }}i\in {1,\dots ,K}}$<br>The normalizing constant is the multivariate beta function, which can be expressed in terms of the gamma function:</p>
<p>${\displaystyle \mathrm {B} ({\boldsymbol {\alpha }})&#x3D;{\frac {\prod _{i&#x3D;1}^{K}\Gamma (\alpha _{i})}{\Gamma \left(\sum _{i&#x3D;1}^{K}\alpha _{i}\right)}},\qquad {\boldsymbol {\alpha }}&#x3D;(\alpha _{1},\ldots ,\alpha _{K}).}$</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/74/Dirichlet.pdf/page1-1500px-Dirichlet.pdf.jpg" alt="image"></p>
<h2 id="np-random-dirichlet"><a href="#np-random-dirichlet" class="headerlink" title="np.random.dirichlet()"></a>np.random.dirichlet()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Exercise</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">categ3</span>(<span class="params">p1,p2,p3</span>):</span><br><span class="line">  r = np.random.uniform(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">if</span> r &lt; p1:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">elif</span> r &lt; p1 + p2:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">else</span>: <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">d1 = np.random.dirichlet((<span class="number">1</span>/<span class="number">100</span>, <span class="number">1</span>/<span class="number">100</span>, <span class="number">1</span>/<span class="number">100</span>), <span class="number">1</span>) <span class="comment">## one die/dice</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get 10 samples from d1 using the function categ3</span></span><br><span class="line"></span><br><span class="line">d2 = np.random.dirichlet((<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get 10 samples from d2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># What is the difference between the samples from d1 and the samples from d2? </span></span><br><span class="line"><span class="comment"># How is it related to the parameters of the dirichlet distribution?</span></span><br></pre></td></tr></table></figure>

<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Bernoulli has two outcomes, e.g., Success(1) with probaility p and Failure(0) with probabilty 1- p. </p>
<p>Binomial is about the count of number of successes in N trials. It is the sum of the Bernoullis (ones and zeros)</p>
<p>Categorical has more than two discrete outcomes with probabilities p1, p2, p3, ….</p>
<p>Multinomial is about the count of each category.</p>
<p>Bernoulli is a special case of categorical </p>
<p>Binomial is a special case of multinomial</p>
<p>Beta is a distribution on distributions (Bernoulli)</p>
<p>Dirichlet is a distribution on distributions (Categorical)</p>
<p>Beta is a special case of Dirichlet</p>
<h2 id="Monte-Carlo-Methods"><a href="#Monte-Carlo-Methods" class="headerlink" title="Monte Carlo Methods"></a>Monte Carlo Methods</h2><p>Monte Carlo methods, or Monte Carlo experiments, are a broad class of computational algorithms that rely on repeated random sampling to obtain numerical results. The underlying concept is to use randomness to solve problems that might be deterministic in principle. </p>
<p><a href="https://en.wikipedia.org/wiki/Monte_Carlo_method">Wikipedia</a></p>
<h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h3><p>For example, consider a quadrant (circular sector) inscribed in a unit square. Given that the ratio of their areas is<br>π<br>&#x2F;<br>4<br>, the value of π can be approximated using a Monte Carlo method:</p>
<ol>
<li>Draw a square, then inscribe a quadrant within it</li>
<li>Uniformly scatter a given number of points over the square</li>
<li>Count the number of points inside the quadrant, i.e. having a distance from the origin of less than 1</li>
</ol>
<p>The ratio of the inside-count and the total-sample-count is an estimate of the ratio of the two areas,<br>π<br>&#x2F;<br>4<br>. Multiply the result by 4 to estimate π.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/84/Pi_30K.gif/440px-Pi_30K.gif" alt="image"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy</span><br><span class="line"></span><br><span class="line">N = <span class="number">100000</span></span><br><span class="line">x_array = scipy.random.rand(N)</span><br><span class="line">y_array = scipy.random.rand(N)</span><br><span class="line"><span class="comment"># generate N pseudorandom independent x and y-values on interval [0,1)</span></span><br><span class="line">N_qtr_circle = <span class="built_in">sum</span>(x_array ** <span class="number">2</span> + y_array ** <span class="number">2</span> &lt; <span class="number">1</span>)</span><br><span class="line"><span class="comment"># Number of pts within the quarter circle x^2 + y^2 &lt; 1 centered at the origin with radius r=1.</span></span><br><span class="line"><span class="comment"># True area of quarter circle is pi/4 and has N_qtr_circle points within it.</span></span><br><span class="line"><span class="comment"># True area of the square is 1 and has N points within it, hence we approximate pi with</span></span><br><span class="line">pi_approx = <span class="number">4</span> * <span class="built_in">float</span>(N_qtr_circle) / N  <span class="comment"># Typical values: 3.13756, 3.15156</span></span><br></pre></td></tr></table></figure>

<h2 id="Integration-Issues"><a href="#Integration-Issues" class="headerlink" title="Integration Issues"></a>Integration Issues</h2><p>If an elementary function is differentiable, we can explicitly output its derivative (e.g., autodiff). Most integrable functions don’t have elementary antiderivative (e.g., $exp(-x^2)$ ). If the denominator in Bayes formula is an integral, it could be intractable</p>
<h2 id="Monte-Carlo-approaches"><a href="#Monte-Carlo-approaches" class="headerlink" title="Monte Carlo approaches"></a>Monte Carlo approaches</h2><p>$$E_p[f(x)] &#x3D; \int f(x)p(x) dx \approx \frac{1}{n}\sum_{i} f(x_i)$$   $$x_i \sim p(x)$$</p>
<h2 id="Rejection-Sampling"><a href="#Rejection-Sampling" class="headerlink" title="Rejection Sampling"></a>Rejection Sampling</h2><p>If we don’t have CDF or cannot invert the CDF, then rejection sampling can be used, at least for lower dimensional spaces.</p>
<p>The algorithm (used by John von Neumann and dating back to Buffon and his needle) to obtain a sample from distribution ${\displaystyle X}$ with density ${\displaystyle f}$ using samples from distribution ${\displaystyle Y}$ with density ${\displaystyle g}$ is as follows:</p>
<p>Obtain a sample ${\displaystyle y}$ from distribution ${\displaystyle Y}$ and a sample ${\displaystyle u}$ from ${\displaystyle \mathrm {Unif} (0,1)}$  (the uniform distribution over the unit interval).<br>Check whether or not ${\textstyle u&lt;f(y)&#x2F;Mg(y)}$.<br>If this holds, accept ${\displaystyle y}$ as a sample drawn from ${\displaystyle f}$;<br>if not, reject the value of ${\displaystyle y}$ and return to the sampling step.<br>The algorithm will take an average of ${\displaystyle M}$ iterations to obtain a sample.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> pearsonr</span><br></pre></td></tr></table></figure>

<h2 id="Example-3"><a href="#Example-3" class="headerlink" title="Example"></a>Example</h2><p>Standard Normal Distribution $\tilde{p}(x)&#x3D;e^{-x^{2}&#x2F;2}$ without the normalizing denominator $Z&#x3D;{\frac {1}{\sqrt {2\pi }}}$</p>
<p>$p(x)&#x3D;{\frac {\tilde{p}(x)} {Z}}$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># We want to sample from this distribution, assuming the denominator is difficult to integrate</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">p_tilde</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.exp(-x**<span class="number">2</span>/<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Here is a function (standard normal) easy to sample from. It gives us proposals</span></span><br><span class="line"><span class="comment"># For simplicity we chose p_tilde / Z as q</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">q</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.exp(-x**<span class="number">2</span>/<span class="number">2</span>)/np.sqrt(<span class="number">2</span>*np.pi)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h1 id="Target-Distribution"><a href="#Target-Distribution" class="headerlink" title="Target Distribution"></a>Target Distribution</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">M=<span class="number">10</span></span><br><span class="line">denominator = np.sqrt(<span class="number">2</span>*np.pi)</span><br><span class="line"></span><br><span class="line">xvals = np.arange(-<span class="number">4</span>,<span class="number">4</span>,<span class="number">.1</span>)</span><br><span class="line">p_tilde_vals = [p_tilde(x) <span class="keyword">for</span> x <span class="keyword">in</span> xvals]</span><br><span class="line">qvals = [M*p/denominator <span class="keyword">for</span> p <span class="keyword">in</span> p_tilde_vals]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">plt.plot(xvals, p_tilde_vals)</span><br><span class="line">plt.plot(xvals, qvals)</span><br><span class="line">plt.legend([<span class="string">&#x27;p_tilde(x)&#x27;</span>, <span class="string">&#x27;Mq(x)&#x27;</span>], fontsize=<span class="number">15</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;p_tilde(x)&#x27;</span>, fontsize=<span class="number">15</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<pre><code>Text(0, 0.5, &#39;p_tilde(x)&#39;)
</code></pre>
<p>​<br><img src="/output_31_1.png" alt="png"><br>​    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">denominator = np.sqrt(<span class="number">2</span>*np.pi) <span class="comment"># we know it this time but it could be an intractable integral</span></span><br><span class="line">M=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># proposals accepted</span></span><br><span class="line">accepted = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">1000000</span> <span class="comment"># proposals</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    proposal = np.random.normal(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    prob_accept = p_tilde(proposal) / (M*q(proposal))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> np.random.random() &lt; prob_accept:</span><br><span class="line">        accepted.append(proposal)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.mean(accepted))</span><br><span class="line"><span class="built_in">print</span>(np.var(accepted))</span><br><span class="line"><span class="built_in">len</span>(accepted)</span><br></pre></td></tr></table></figure>

<pre><code>0.002990957644427239
1.00051595341158





250428
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="built_in">len</span>(accepted) / N)*<span class="number">100</span></span><br></pre></td></tr></table></figure>




<pre><code>25.0428
</code></pre>
<h2 id="Drawbacks"><a href="#Drawbacks" class="headerlink" title="Drawbacks"></a>Drawbacks</h2><p>Rejection sampling can lead to a lot of unwanted samples being taken if the function being sampled is highly concentrated in a certain region, for example a function that has a spike at some location. </p>
<p>Large M –&gt; few accepted</p>
<p><img src="https://theclevermachine.files.wordpress.com/2012/09/rejectionsamplingcriterion.png?w=584" alt="image"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Exercises:</span></span><br><span class="line"><span class="comment">## f(1) = 1, f(2) =2, f(3) = 3. Is f(x) a pmf? if not, what is the normalizing constant?</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## is f(x) = 4*x on the interval [0,1] a density function? if not, what is the normalizing factor?</span></span><br><span class="line"><span class="comment">## choose g(x) = 1 as the proposal distribution</span></span><br><span class="line"><span class="comment">## Choose M=4 and M=10 to compare the wasted samples</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># proposals accepted</span></span><br><span class="line">accepted = []</span><br><span class="line"></span><br><span class="line">M=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">N = <span class="number">1000000</span> <span class="comment"># proposals</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    proposal = np.random.random()</span><br><span class="line">    </span><br><span class="line">    prob_accept = <span class="number">4</span>*proposal / M*<span class="number">1</span> <span class="comment"># y ~ q(y), prop_accept = 𝑓(𝑦)/𝑀𝑔(𝑦)</span></span><br><span class="line">                                   <span class="comment"># f(y) = 4*y, g(y)=1, M =10</span></span><br><span class="line">    u = np.random.random()</span><br><span class="line">    <span class="keyword">if</span> u  &lt; prob_accept:</span><br><span class="line">        accepted.append(proposal)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.mean(accepted))</span><br><span class="line"><span class="built_in">print</span>(np.var(accepted))</span><br><span class="line"><span class="built_in">len</span>(accepted)</span><br></pre></td></tr></table></figure>

<pre><code>0.6675852172604363
0.055471605869961006





199125
</code></pre>
<h2 id="Importance-Sampling"><a href="#Importance-Sampling" class="headerlink" title="Importance Sampling"></a>Importance Sampling</h2><p>Importance sampling is a general technique for estimating properties of a particular distribution, while only having samples generated from a different distribution than the distribution of interest. </p>
<p>The basic idea of importance sampling is to sample the states from a different distribution to lower the variance of the estimation of E[X;P], or when sampling from P is difficult.</p>
<p>$$E_p[f(x)] &#x3D; \int f(x)p(x) dx &#x3D; \int f(x)\frac{p(x)}{q(x)}q(x) dx \approx \frac{1}{n} \sum_{i} f(x_i)\frac{p(x_i)}{q(x_i)}$$</p>
<p>$$ x_i \sim q(x)$$</p>
<h2 id="Example-4"><a href="#Example-4" class="headerlink" title="Example"></a>Example</h2><p>Let the dashed curve be standard normal N(0,1) with density p(x) and t_1 &#x3D; 1.96, then p(t&gt;t_1) &#x3D; 0.025. Let f(x) &#x3D; 1 if x &gt; 1.96 and 0 otherwise</p>
<p>The solid curve is N(3,1) with density q(x).</p>
<p><img src="https://www.researchgate.net/profile/Christine-Strauss-2/publication/220669034/figure/fig1/AS:341401574363140@1458407886431/Probability-Shift-in-Importance-Sampling-4-Importance-Sampling-The-estimate-4-is.png" alt="image">  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sampling from the p(x)</span></span><br><span class="line">values = []</span><br><span class="line">N = <span class="number">1000000</span> <span class="comment"># proposals</span></span><br><span class="line"></span><br><span class="line">f = <span class="keyword">lambda</span> x:x&gt;<span class="number">1.96</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Sample from p</span></span><br><span class="line">proposals = np.random.normal(loc=<span class="number">0</span>,scale=<span class="number">1</span>,size=N)</span><br><span class="line">values = f(proposals)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;average &#123;&#125; variance &#123;&#125;&quot;</span>.<span class="built_in">format</span>(np.mean(values), np.var(values)))</span><br></pre></td></tr></table></figure>

<pre><code>average 0.025196 variance 0.024561161584
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sampling from q(x) results less variance</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line">f = <span class="keyword">lambda</span> x:x&gt;<span class="number">1.96</span></span><br><span class="line">p = <span class="keyword">lambda</span> x : stats.norm().pdf(x)</span><br><span class="line">q = <span class="keyword">lambda</span> x : stats.norm(loc=<span class="number">3</span>,scale=<span class="number">1</span>).pdf(x)</span><br><span class="line"></span><br><span class="line">values = []</span><br><span class="line">N = <span class="number">1000000</span> <span class="comment"># proposals</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Sample from q</span></span><br><span class="line">proposals = np.random.normal(loc=<span class="number">3</span>,scale=<span class="number">1</span>,size=N)</span><br><span class="line">    </span><br><span class="line">values = f(proposals)*p(proposals)/q(proposals) </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;average &#123;&#125; variance &#123;&#125;&quot;</span>.<span class="built_in">format</span>(np.mean(values), np.var(values)))</span><br></pre></td></tr></table></figure>

<pre><code>average 0.025031757655900575 variance 0.0022310917341863755
</code></pre>
<h2 id="Confusion-of-multinomial-vs-categorical"><a href="#Confusion-of-multinomial-vs-categorical" class="headerlink" title="Confusion of multinomial vs categorical"></a>Confusion of multinomial vs categorical</h2><p>In some fields such as natural language processing, categorical and multinomial distributions are synonymous and it is common to speak of a multinomial distribution when a categorical distribution is actually meant. This stems from the fact that it is sometimes convenient to express the outcome of a categorical distribution as a “1-of-K” vector (a vector with one element containing a 1 and all other elements containing a 0) rather than as an integer in the range ${\displaystyle 1\dots K}$; in this form, a categorical distribution is equivalent to a multinomial distribution over a single trial.</p>
<p><a href="https://en.wikipedia.org/wiki/Multinomial_distribution">Reference</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> multinomial</span><br><span class="line"><span class="comment">#rv = multinomial(1, [1/6,1/6,1/6,1/6,1/6,1/6])</span></span><br><span class="line"><span class="comment">#rv.rvs(1)</span></span><br><span class="line">multinomial.rvs(n=<span class="number">1</span>, p=[<span class="number">1</span>/<span class="number">6</span>,<span class="number">1</span>/<span class="number">6</span>,<span class="number">1</span>/<span class="number">6</span>,<span class="number">1</span>/<span class="number">6</span>,<span class="number">1</span>/<span class="number">6</span>,<span class="number">1</span>/<span class="number">6</span>], size=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[0, 1, 0, 0, 0, 0]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">z=np.random.multinomial(<span class="number">1</span>, [<span class="number">1</span>/<span class="number">6.</span>]*<span class="number">6</span>, size=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(np.argmax(z))</span><br><span class="line">z</span><br></pre></td></tr></table></figure>

<pre><code>0





array([[1, 0, 0, 0, 0, 0]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## We&#x27;ve defined the function categ() above</span></span><br><span class="line">categ(<span class="number">1</span>/<span class="number">6</span>,<span class="number">1</span>/<span class="number">6</span>, <span class="number">1</span>/<span class="number">6</span>, <span class="number">1</span>/<span class="number">6</span>, <span class="number">1</span>/<span class="number">6</span>, <span class="number">1</span>/<span class="number">6</span>) </span><br></pre></td></tr></table></figure>




<pre><code>6
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.choice( a=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],  size=<span class="number">1</span>  , p=[<span class="number">1</span>/<span class="number">6</span>, <span class="number">1</span>/<span class="number">6</span>, <span class="number">1</span>/<span class="number">6</span>, <span class="number">1</span>/<span class="number">6</span>,<span class="number">1</span>/<span class="number">6</span>, <span class="number">1</span>/<span class="number">6</span>]  )                         </span><br></pre></td></tr></table></figure>




<pre><code>array([4])
</code></pre>
]]></content>
      <categories>
        <category>课程学习</category>
      </categories>
      <tags>
        <tag>DATA606</tag>
      </tags>
  </entry>
  <entry>
    <title>01252022 DATA641</title>
    <url>/2022/01/25/01252022-DATA641/</url>
    <content><![CDATA[<p>Syllabus &amp; Some notes</p>
<span id="more"></span>

<p>This course will introduce fundamental concepts and techniques involved in getting computers to deal more intelligently with human language. It is focused primarily on text (as opposed to speech) and will offer a grounding in core NLP methods for text processing (such as lexical analysis, sequential tagging, syntactic parsing, semantic representations, text classification, unsupervised discovery of latent structure), key ideas in the application<br>of deep learning to language tasks, and consideration of the role of language technology in modern society.<br>The content of this course will be substantially similar to Computational Linguistics I, though with some adjustments geared toward longer&#x2F;fewer lectures and emphasizing practical rather than theoretical concerns.</p>
<blockquote>
<p>Something I learned is that doing audio speech recognition and translations is actually easier than just doing text translations. GRU Autoencoder (for large datasets w&#x2F; normal freq of repetition of tokenized words) &gt; LSTM autoencoder and both &#x3D;&gt; normal autoencoder for doing text translations.<br>LSTM aencoder &gt;&gt;&gt; GRU for doing datasets with high frequency of word&#x2F;token repetition.<br>Using dask, pandas, tensorflow, keras and scikit for preprocess, tokenizing data, setting up models and splitting up data into train, test, and split.</p>
<p>Mix and matching LSTM, GRU, and RNN in one model doesn’t work out well and doesn’t confer any increase in test accuracy.</p>
</blockquote>
<blockquote>
<p>One of the big use cases I have seen at my work is using it pragmatically just to speed up or automate tasks that would take people a long time like classifying PDF documents that may need a signature or not. There is no machine understanding of the text documents but it does save a lot of humans time when it’s hundreds &#x2F; thousands of documents</p>
</blockquote>
<p>How does language work? What makes language a language?</p>
<h5 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h5><p><strong>semanticity</strong>, particularly the arbitrary relation of sounds to meanings</p>
<p>【语言学】使语义化<br>变形</p>
<p><strong>latent structure</strong>, as opposed simply to sequential patterns</p>
<p>潜在结构，潜结构</p>
<p>(latent structure model 隐结构模型)</p>
<p><strong>recursion</strong>, and particularly center-embedding recursion</p>
<p>[uncountable ] ( mathematics 数 ) the process of repeating a function,each time applying it to the result of the previous stage 递归； 递回</p>
<h5 id="Zipfian-curve"><a href="#Zipfian-curve" class="headerlink" title="Zipfian curve"></a>Zipfian curve</h5><ul>
<li><p>Rank of words vs Frequency of words</p>
</li>
<li><p>Engineer like to focus on the first section</p>
</li>
<li><p>Scientists like to focus on the latter section</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202201260202075.png" alt="uTools_1643158913049"></p>
]]></content>
      <categories>
        <category>课程学习</category>
      </categories>
      <tags>
        <tag>DATA641</tag>
      </tags>
  </entry>
  <entry>
    <title>01262022 DATA604</title>
    <url>/2022/01/26/01262022-DATA604/</url>
    <content><![CDATA[<p>syllabus_604_22.pdf</p>
<span id="more"></span>

<h4 id="OUTLINE-OF-MATERIAL"><a href="#OUTLINE-OF-MATERIAL" class="headerlink" title="OUTLINE OF MATERIAL"></a>OUTLINE OF MATERIAL</h4><p>​	The goal of this course is to present in detail the fundamental mathematical ideas<br>behind the data science concepts.</p>
<ul>
<li>Introduction to Data Science and Big Data.</li>
<li>Review of elementary statistics and Exploratory Data Analysis.</li>
<li>Some relevant concepts from geometry and topology.</li>
<li>Overview of classication methods; Metric learning and nearest neighbor<br>search; voting.</li>
<li>Kernel methods, Mercer’s theorem, and Support Vector Machines.</li>
<li>Multi-class classication methods.</li>
<li>Training, testing, validation; Cross-validation.</li>
<li>Clustering vs classication techniques; k-means.</li>
<li>Frame theory and dictionaries.</li>
<li>Elementary spectral graph theory, minimum and maximum graph cuts, graph<br>partitions.</li>
<li>Principal Component Analysis.</li>
<li>Laplacian Eigenmaps, manifold learning and dimension reduction concepts.</li>
</ul>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202201261901031.png" alt="image-20220126190156921"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202201261914393.png" alt="image-20220126191457313"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202201261925664.png" alt="image-20220126192538583"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202201261932037.png" alt="image-20220126193243949"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202201261938893.png" alt="image-20220126193856764"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202201261947327.png" alt="image-20220126194708219"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202201261951875.png" alt="image-20220126195112695"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202201261954129.png" alt="image-20220126195425016"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202201262001742.png" alt="image-20220126200127655"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202201262007243.png" alt="image-20220126200741165"></p>
]]></content>
      <categories>
        <category>课程学习</category>
      </categories>
      <tags>
        <tag>DATA604</tag>
      </tags>
  </entry>
  <entry>
    <title>2082022</title>
    <url>/2022/02/08/02082022/</url>
    <content><![CDATA[<p>杂记</p>
<span id="more"></span>

<h3 id="《绿皮车》"><a href="#《绿皮车》" class="headerlink" title="《绿皮车》"></a>《绿皮车》</h3><p>2018年的美国电影</p>
<p>中间一段情书写的非常好</p>
<blockquote>
<p>亲爱的德洛莉丝，每当我想起你，我都会想起爱荷华州的美丽平原，我们之间的距离让我感到意志消沉。没有你，我的时间和旅途都毫无意义。爱上你是我做过最容易的事情。除了你，一切都不重要。我活着的每一天，我都这么认为遇上你的那天我就爱上了你。今天，我仍然爱着你，往后余生，我会一直爱你</p>
</blockquote>
<h3 id="塔岛哥哥"><a href="#塔岛哥哥" class="headerlink" title="塔岛哥哥"></a>塔岛哥哥</h3><p><a href="https://space.bilibili.com/14947599/channel/seriesdetail?sid=1172361">《浴血黑帮》</a></p>
<p><a href="https://space.bilibili.com/14947599/channel/seriesdetail?sid=1991517">《唐顿庄园》</a></p>
]]></content>
      <categories>
        <category>尘世间</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>4.6 周一</title>
    <url>/2020/04/06/4-6-%E5%91%A8%E4%B8%80/</url>
    <content><![CDATA[<h1 id="周一记"><a href="#周一记" class="headerlink" title="周一记"></a>周一记</h1><span id="more"></span>
<p>清明节假期，周一没有课。原本三节课:大数据，计算机安全以及程序语言设计原理。</p>
<h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><p>大数据的教材一直很难找，实际上这也是一门新兴学科，目前学到的都是分布式那一块的知识。没有教材只能看视频实际上我感觉也是有些不妥。而且目前还没有明确考试方式。只能先快进学习了。</p>
<h2 id="计算机安全"><a href="#计算机安全" class="headerlink" title="计算机安全"></a>计算机安全</h2><p>计算机安全也是mooc和录播视频的结合体。目前学到的多数内容是关于密码学的。难点也是有点难复习。</p>
<h2 id="程序语言设计原理"><a href="#程序语言设计原理" class="headerlink" title="程序语言设计原理"></a>程序语言设计原理</h2><p>刘尚东老师很早就录好了视频，由于是美方课，本节课调节到了周三下午。答案提前给了，这也意味着自学的必要性。说实话这课确实没怎么好好学习过，接下来也要好好注意一下</p>
<h1 id="TOEFL"><a href="#TOEFL" class="headerlink" title="TOEFL"></a>TOEFL</h1><p>疫情影响下，托福已经一拖再拖，在家复习效率确实有点勉强。原本以为五月五六号才开学，但是学校的第一批次大概是四月十七到二十号，五月回归正常也是极有可能的。上网课的同时给托福的复习带来了不小的压力。</p>
<h2 id="听力和阅读"><a href="#听力和阅读" class="headerlink" title="听力和阅读"></a>听力和阅读</h2><p>两个老大难了。需要每天坚持。但也是稳定的，可显而易见的提高的。</p>
<h2 id="写作和口语"><a href="#写作和口语" class="headerlink" title="写作和口语"></a>写作和口语</h2><p>很迷很玄。在家没办法保证复习的质量。难。</p>
<h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><p>生活能否规律化实现早睡早起有锻炼</p>
<p>能否调剂好时间的分配</p>
<p>能否保证日常学习和托付复习的质量</p>
]]></content>
      <categories>
        <category>本科</category>
      </categories>
      <tags>
        <tag>课程学习</tag>
      </tags>
  </entry>
  <entry>
    <title>4.11 随笔</title>
    <url>/2020/04/11/4-11-%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<p>金三角风云之泰北孤军，一支没有祖国的华人军队的异域征程</p>
<span id="more"></span>
<p>谁能想到金三角的起源竟然和一支打不过共产党的国民党残军有关呢？<br>在云南地区边境的雨林里，被败退台湾的国民党蒋介石之流抛弃，与泰国缅甸政府存在摩擦，为了谋生开始种罂粟，当不了云南王当了缅甸王。一众将领却也能服从命令，最终却只能终老台湾。<br>（不过这几个将领毕业于黄埔军校，着实让人想一探当年这个中国军校的风采与渊源。）<br>剩下的残兵老将被泰国利用却不能获得合法国籍，在边境游荡。<br>“一群被遗忘的人，他们战死便与草木同朽，他们战胜仍是天机不容。”<br>着实可悲可叹。</p>
<p>参考资料</p>
<p><a href="https://www.youtube.com/watch?v=25w1rNC_PZ0">https://www.youtube.com/watch?v=25w1rNC_PZ0</a></p>
]]></content>
      <categories>
        <category>尘世间</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>4705 桌面进化</title>
    <url>/2022/04/10/4705-%E6%A1%8C%E9%9D%A2%E8%BF%9B%E5%8C%96%E5%8F%B2/</url>
    <content><![CDATA[<p>入住4705之后，自己布置的桌面的两次大变化</p>
<span id="more"></span>

<h1 id="12-x2F-07-x2F-2021"><a href="#12-x2F-07-x2F-2021" class="headerlink" title="12&#x2F;07&#x2F;2021"></a>12&#x2F;07&#x2F;2021</h1><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204102058807.JPG" alt="IMG_1170"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204102059865.JPG" alt="IMG_1169"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204102059294.JPG" alt="IMG_1171"></p>
<h1 id="04-x2F-10-x2F-2022"><a href="#04-x2F-10-x2F-2022" class="headerlink" title="04&#x2F;10&#x2F;2022"></a>04&#x2F;10&#x2F;2022</h1><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204102100408.JPG" alt="IMG_3064"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204102100261.JPG" alt="IMG_3061"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204102101095.JPG" alt="IMG_3062"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204102102515.JPG" alt="IMG_3063"></p>
<hr>
<ol>
<li><p>BenQ Zowie XL2540K 显示器</p>
<p>$317.28</p>
</li>
<li><p>BenQ ScreenBar 显示屏挂灯</p>
<p>$139.90</p>
</li>
<li><p>Dell UltraSharp U2720Q 显示器</p>
<p>$650.84</p>
</li>
<li><p>Hagibis Dual USB C Docking Station</p>
<p>$78.39</p>
</li>
<li><p>WALI Monitor Stand Riser for Computer</p>
<p>$12.71</p>
</li>
<li><p>Marbrasse Monitor Stand Riser</p>
<p>$15.32</p>
</li>
<li><p>Logitech G915 TKL Keyboard</p>
<p>$167.48</p>
</li>
<li><p>Logitech G PRO X Mouse</p>
<p>$146.28</p>
</li>
<li><p>Soarking Charging Dock for Logitech Mouse</p>
<p>$31.79</p>
</li>
<li><p>Anker Magnetic Wireless Charger</p>
<p>$74.19</p>
</li>
<li><p>Herman Miller Mirra Chair</p>
<p>$295.74</p>
</li>
<li><p>Marshall Kilburn II Portable Bluetooth Speaker</p>
<p>$238.77</p>
</li>
</ol>
]]></content>
      <categories>
        <category>UMD</category>
      </categories>
      <tags>
        <tag>UMD</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Learnlab</title>
    <url>/2022/02/21/AWS-Learnlab/</url>
    <content><![CDATA[<p>Learner Lab - Associate Level</p>
<p><a href="https://aws.amazon.com/cn/getting-started/">https://aws.amazon.com/cn/getting-started/</a></p>
<span id="more"></span>

<p><a href="https://awsacademy.instructure.com/courses/14960">AWS Academy Learner Lab - Associate Services [14960]</a></p>
<p><a href="https://awsacademy.instructure.com/courses/14553">AWS Academy Learner Lab - Foundation Services [14553]</a></p>
<div class="pdfobject-container" data-target="./AWSAcademyLearnerLabStudentGuide.pdf" data-height="500px"></div>

]]></content>
      <categories>
        <category>课程学习</category>
      </categories>
      <tags>
        <tag>DATA605</tag>
      </tags>
  </entry>
  <entry>
    <title>604 03302022</title>
    <url>/2022/03/30/604-03302022/</url>
    <content><![CDATA[<p>Slides 15</p>
<span id="more"></span>

<h2 id="vector-space"><a href="#vector-space" class="headerlink" title="vector space"></a>vector space</h2><ol>
<li><h3 id="Linear-Representation-by-Vector-Spaces"><a href="#Linear-Representation-by-Vector-Spaces" class="headerlink" title="Linear Representation by Vector Spaces"></a>Linear Representation by Vector Spaces</h3></li>
</ol>
<p>​		矢量空间的线性表示</p>
<p>A vector space is a mathematical structure formed by two types of objects: a collection of elements called vectors, and two operations on pairs of vectors: addition and scalar multiplication. As such two vectors may be added together, and any vector can be multiplied by numbers, called scalars. Thus, for a vector space X, for any two of its elements x, y ∈ X, and any numbers α, β ∈ F (a ﬁeld of numbers), we can form the linear combinations as new elements of X:</p>
<p>矢量空间是由两类对象形成的数学结构：称为矢量的元素集合，以及对矢量对的两种操作：加法和标量乘法。因此，两个向量可以相加，任何向量都可以与数字相乘，称为标量。因此，对于一个矢量空间X，对于它的任何两个元素x，y∈X，以及任何数字α，β∈F（一个数域），我们可以形成线性组合作为X的新元素。</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220330182825938.png" alt="image-20220330182825938"></p>
<ol start="2">
<li><h3 id="Axioms-of-Vector-Spaces"><a href="#Axioms-of-Vector-Spaces" class="headerlink" title="Axioms of Vector Spaces"></a>Axioms of Vector Spaces</h3></li>
</ol>
<p>​		矢量空间的公理</p>
<p>The operations of addition and scalar multiplication in a vector space must satisfy a number of conditions called axioms:</p>
<p>Associativity of addition<br>Commutativity of addition<br>Identity element of addition<br>Inverse elements of addition<br>Compatibility of scalar multiplication with ﬁeld multiplication Identity element of scalar multiplication<br>Distributivity of scalar multiplication with respect to vector addition Distributivity of scalar multiplication with respect to ﬁeld addition</p>
<p>矢量空间中的加法和标量乘法运算必须满足一些条件，称为公理。</p>
<p>加法的关联性<br>加法的共轭性<br>加法的同一元素<br>加法的逆向元素<br>标量乘法与字段乘法的相容性<br>标量乘法的身份元素<br>标量乘法对于矢量加法的分布性<br>标量乘法对于场加法的分布性</p>
<ol start="3">
<li><h3 id="Diversity-of-representations-from-bases-to-frames"><a href="#Diversity-of-representations-from-bases-to-frames" class="headerlink" title="Diversity of representations: from bases to frames"></a>Diversity of representations: from bases to frames</h3>表现形式的多样性：从基础到框架</li>
</ol>
<p>A <strong>basis</strong> is a set of linearly independent vectors which can represent every vector in a given vector space through their linear combinations.</p>
<p>An <strong>orthogonal basis</strong> for a vector space with an inner product, is a basis with vectors which are mutually orthogonal (perpendicular). If the vectors of an orthogonal basis are or length (norm) 1, the resulting basis is an <strong>orthonormal basis (ONB)</strong>.</p>
<p>An ONB may cease to be an ONB after even a small perturbation, or when any of its elements is removed. We seek thus representation systems with more stability.</p>
<p><strong>Frames</strong> were introduced by Dunford and Schaeffer in 1952.</p>
<p>基是一组线性独立的向量，它可以通过它们的线性组合代表给定向量空间中的每个向量。</p>
<p>一个具有内积的向量空间的正交基，是一个具有相互正交（垂直）的向量的基。如果一个正交基的向量都是长度（规范）为1的，那么得到的基就是一个正交基（ONB）。</p>
<p>一个ONB甚至在一个小的扰动之后，或者当它的任何元素被移除之后，都可能不再是一个ONB。因此，我们寻求具有更多稳定性的表示系统。</p>
<p>框架是由邓福德和谢弗在1952年提出的。</p>
<ol start="4">
<li><h3 id="Bases"><a href="#Bases" class="headerlink" title="Bases"></a>Bases</h3></li>
</ol>
<p>The role of a basis is to allow us to <strong>represent</strong> elements of the vector space in terms of sequences of scalars (numbers), which are called vector coordinates. This is an important step, because thanks to this <strong>representation</strong>, abstract or complicated objects obtain a uniform mathematical format. The reason for this may not necessarily be clear when we think of the most typical example of a vector space: d-dimensional Euclidean vector space. This is because the Euclidean space is not just a good example of a vector space, it is also a prototypical example, and last but not least - a ﬁnite dimensional vector space.</p>
<p>Inﬁnite dimensional vector spaces provide us with more intriguing examples of objects, and the role of a basis which allows us to replace these complicated objects by sequences of numbers becomes much more clear.</p>
<ul>
<li><p>Vector spaces of polynomials;</p>
</li>
<li><p>Function spaces (Lipschitz, integrable, ﬁnite energy functions, etc.)</p>
</li>
</ul>
<p>基的作用是允许我们用标量（数字）的序列来表示矢量空间的元素，这些标量被称为矢量坐标。这是重要的一步，因为有了这种表示方法，抽象或复杂的对象就获得了统一的数学格式。当我们想到矢量空间最典型的例子时，可能不一定清楚其中的原因：D维欧几里得矢量空间。这是因为欧几里得空间不仅是矢量空间的一个很好的例子，它也是一个典型的例子，最后但并非最不重要的是–一个一维矢量空间。</p>
<p>几何维向量空间为我们提供了更多有趣的对象例子，而基础的作用使我们能够用数字序列来取代这些复杂的对象，这一点变得更加清晰。</p>
<p>多项式的矢量空间。</p>
<p>函数空间（Lipschitz、可整定、限定能量的函数等）</p>
<ol start="5">
<li><h3 id="Normed-vector-spaces"><a href="#Normed-vector-spaces" class="headerlink" title="Normed vector spaces"></a>Normed vector spaces</h3>有规范的向量空间</li>
</ol>
<p>A norm in a vector space X is a non-negative real-valued function x ↦ → ∥ x ∥ , which satisﬁes the axioms of sublinearlity (also known as Minkowski inequality or triangle inequality), and non-degeneracy.</p>
<p>A normed vector space is a pair ( X, ∥ · ∥) where X is a vector space and ∥ · ∥ a norm on X.</p>
<p>Every ﬁnite (N) dimensional vector space X can be equipped with a norm. Indeed, let { b 1 , . . . , b N } be a basis for X. Then, for any x ∈ X, we can write uniquely:</p>
<p>矢量空间X中的规范是一个非负实值函数x ↦ → ∥ x ∥ ，它满足次线性公理（也称为明斯基不等式或三角不等式）和非退化性公理。</p>
<p>规范化向量空间是一对( X, ∥ - ∥)，其中X是一个向量空间，∥ - ∥是X上的规范。</p>
<p>每个有限的（N）维向量空间X都可以配备一个规范。事实上，让{b 1 , … … 然后，对于任何x∈X，我们可以写出唯一的。</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220330185344376.png" alt="image-20220330185344376"></p>
<h4 id="Example-Fourier-Basis-for-RN"><a href="#Example-Fourier-Basis-for-RN" class="headerlink" title="Example: Fourier Basis for RN"></a>Example: Fourier Basis for RN</h4><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220330185737428.png" alt="image-20220330185737428"></p>
<p>The columns (or rows) of this matrix form an orthonormal basis for the space of N-dimensional complex vectors R N . This basis is called the Fourier basis. And the matrix F is known as the Discrete Fourier Transform. Clearly F is a unitary matrix, and as such it is, in particular, invertible.</p>
<p>这个矩阵的列（或行）构成了N维复数向量空间R N的正态基。这个基被称为傅里叶基。而矩阵F被称为离散傅里叶变换。显然，F是一个单元矩阵，因此，它尤其是可反转的。</p>
<ol start="6">
<li><h3 id="Dimension"><a href="#Dimension" class="headerlink" title="Dimension"></a>Dimension</h3>纬度</li>
</ol>
<p>The dimension theorem for vector spaces states that all bases of a vector space have equally many elements.</p>
<p>This unique number of elements for a given vector space may be ﬁnite or inﬁnite.</p>
<p>We deﬁne the <strong>dimension of the vector space</strong> to be the number of elements of any its basis.</p>
<p>It is sometimes called the <strong>Hamel dimension</strong>.</p>
<p>We are interested in <strong>ﬁnite dimensional</strong> vector spaces.</p>
<p>A <strong>Euclidean vector space</strong> is a ﬁnite-dimensional inner product space over the real numbers.</p>
<p>A typical case of Euclidean vector space is R n . Every Euclidean space is isomorphic to this example.</p>
<p>维度向量空间的维度定理指出，向量空间的所有基数都有同样多的元素。</p>
<p>对于一个给定的向量空间来说，这个唯一的元素数可能是无限的，也可能是不确定的。</p>
<p>我们将矢量空间的维数定义为其任何基的元素数。</p>
<p>它有时被称为Hamel维度。</p>
<p>我们感兴趣的是ﬁnite维度的向量空间。</p>
<p>欧几里得向量空间是实数上的一个五维内积空间。</p>
<p>欧氏矢量空间的一个典型案例是R n。每个欧几里得空间都与这个例子同构。</p>
<ol start="7">
<li><h3 id="Eigenvalues-and-Eigenvectors"><a href="#Eigenvalues-and-Eigenvectors" class="headerlink" title="Eigenvalues and Eigenvectors"></a>Eigenvalues and Eigenvectors</h3><p>特征值和特征向量</p>
<p>If A is a linear transformation from a vector space R n into itself and v &#x3D; 0 is a nonzero vector in V, then v is an <strong>eigenvector</strong> of T if T ( v ) ̸ is a scalar multiple of v, for some λ ∈ R,</p>
<p>In this case we say that λ is the <strong>eigenvalue</strong> (characteristic value) of A associated with v.</p>
<p>There is a direct correspondence between n × n matrices and linear transformations from R n into itself, given any basis of the vector space. Hence, in a ﬁnite-dimensional vector space, it is equivalent to deﬁne eigenvalues and eigenvectors using either the language of matrices, or the language of linear transformations.</p>
<p>如果A是一个从矢量空间R n到自身的线性变换，并且v &#x3D; 0是V中的一个非零矢量，那么如果T ( v ) ̸是v的标量倍数，对于某些λ∈R，v是T的一个特征向量。</p>
<p>在这种情况下，我们说λ是与v相关的A的特征值（特性值）。</p>
<p>在给定矢量空间的任何基础的情况下，n×n矩阵与从R n到自身的线性变换之间存在着直接的对应关系。因此，在ﬁnite-dimensional矢量空间中，使用矩阵语言或线性变换语言来定义特征值和特征向量是等价的。</p>
</li>
<li><h3 id="EVD"><a href="#EVD" class="headerlink" title="EVD"></a>EVD</h3></li>
</ol>
<p>​		归一化</p>
<p>The <strong>eigendecomposition (EVD)</strong> (spectral decomposition) of a matrix is the factorization of this matrix into a canonical form, where the matrix is represented in terms of its eigenvalues and eigenvectors.</p>
<p>If A is a linear transformation from a vector space R n into itself, represented by an n × n matrix, which has n linearly independent eigenvectors e i , i &#x3D; 1, . . . , n, then A can be written as</p>
<p>矩阵的eigendecomposition（EVD）（谱系分解）是将该矩阵分解为一个典型的形式，其中矩阵以其特征值和特征向量表示。</p>
<p>如果A是一个从矢量空间R n到自身的线性变换，由一个n×n矩阵表示，它有n个线性独立的特征向量e i，i &#x3D; 1, . . , n，那么A可以被写成</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220330195728677.png" alt="image-20220330195728677"></p>
<p>Q is the n × n matrix whose ith column is the eigenvector e i of A; </p>
<p>Λ is the diagonal matrix whose diagonal elements are the corresponding eigenvalues λ i .</p>
<p>Q是n×n矩阵，其第i列是A的特征向量e i；</p>
<p>Λ是对角矩阵，其对角线元素是相应的特征值λ i。</p>
<h4 id="Using-EVDs"><a href="#Using-EVDs" class="headerlink" title="Using EVDs"></a>Using EVDs</h4><p>Suppose we are given data set in the form of an n × m matrix X, where the data points are considered to be the consecutive columns of the matrix X. This means we have m vectors x i in R n (or n observed variables with m independent observations). Next, suppose we use one of the above methods, e.g., PCA, to compute a new ONB for our space R n . Further, assume that these eigenvectors are stored as columns of some matrix V.</p>
<p>假设我们得到了n×m矩阵X形式的数据集，其中数据点被认为是矩阵X的连续列。这意味着我们在R n中有m个向量x i（或n个观察变量有m个独立的观察值）。接下来，假设我们使用上述方法之一，例如PCA，为我们的空间R n计算一个新的ONB。此外，假设这些特征向量被存储为某个矩阵V的列。</p>
<p>We can use the new basis to represent the original data in these new coordinates, i.e., to compute the expansions of the data vectors in terms of the new ONB. To do this we compute:</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220330201655912.png" alt="image-20220330201655912"></p>
<p>that is we are computing projections of x i onto the basis { v j , j &#x3D; 1, . . . , n } . In matrix notation V T X is an n × m matrix consisting of column vectors which are the new coefﬁcients of x i ’s in the basis { v j } . This is the desired new representation of our data.</p>
<p>我们可以使用新的基础来表示这些新坐标中的原始数据，即计算数据向量在新的ONB方面的扩展。要做到这一点，我们要计算。</p>
<p>也就是说，我们要计算x i在基{v j , j &#x3D; 1, . . , n } . 在矩阵符号中，V T X是一个n×m的矩阵，由列向量组成，是x i在基{v j }上的新系数。. 这就是我们所期望的数据的新表示。</p>
<ol start="9">
<li><h3 id="Orthonormal-bases-of-eigenvectors"><a href="#Orthonormal-bases-of-eigenvectors" class="headerlink" title="Orthonormal bases of eigenvectors"></a>Orthonormal bases of eigenvectors</h3></li>
</ol>
<p>​		特征向量的正态基</p>
<p>Given any eigenvalue λ, we can deﬁne its eigenspace to be the collection of vectors for which this is an eigenvalue.</p>
<p>The example with scalar multiplication implies that any multiple of an eigenvector of λ is an eigenvector of λ. Similarly with vector addition. As such an eigenspace is a linear subspace of R n .</p>
<p>If a matrix A satisﬁes the condition A T A &#x3D; AA T , then such a matrix has an eigenbasis consisting of mutually orthogonal eigenvectors. This means that eigenspaces are pairwise orthogonal.</p>
<p>This implies that for such an A the matrix Q in EVD is an orthogonal matrix, i.e., such that</p>
<p>给定任何一个特征值λ，我们可以把它的特征空间定义为这是一个特征值的向量的集合。</p>
<p>标量乘法的例子意味着λ的特征向量的任何倍数都是λ的特征向量，与之类似的是向量加法。因此，一个特征空间是R n的一个线性子空间。</p>
<p>如果一个矩阵A满足条件A T A &#x3D; AA T，那么这样的矩阵就有一个由相互正交的特征向量组成的特征基。这意味着，特征空间是成对正交的。</p>
<p>这意味着对于这样一个A，EVD中的矩阵Q是一个正交矩阵，即，这样的矩阵</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220330200600270.png" alt="image-20220330200600270"></p>
]]></content>
      <categories>
        <category>课程学习</category>
      </categories>
      <tags>
        <tag>DATA604</tag>
      </tags>
  </entry>
  <entry>
    <title>DATA604 hw3</title>
    <url>/2022/04/09/DATA604-hw3/</url>
    <content><![CDATA[<p>DATA604 hw3</p>
<span id="more"></span>

<p>population:</p>
<p>Statistics<br>A finite or infinite collection of items under consideration.</p>
<hr>
<ol>
<li>Accuracy (all <strong>correct</strong> &#x2F; all) &#x3D; TP + TN &#x2F; TP + TN + FP + FN</li>
<li>Misclassification (all <strong>incorrect</strong> &#x2F; all) &#x3D; FP + FN &#x2F; TP + TN + FP + FN</li>
<li>Precision (<strong>true</strong> positives &#x2F; <strong>predicted</strong> positives) &#x3D; TP &#x2F; TP + FP</li>
<li>Sensitivity aka Recall (<strong>true</strong> positives &#x2F; all <strong>actual</strong> positives) &#x3D; TP &#x2F; TP + FN</li>
<li>Specificity (<strong>true</strong> negatives &#x2F; all <strong>actual</strong> negatives) &#x3D;TN &#x2F; TN + FP</li>
</ol>
<p><a href="https://en.wikipedia.org/wiki/Sensitivity_and_specificity">https://en.wikipedia.org/wiki/Sensitivity_and_specificity</a></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204091659696.png" alt="image-20220409155936566"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204091700410.png" alt="image-20220409160011348"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204091700526.png" alt="image-20220409160028460"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204091701554.png" alt="image-20220409160153481"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204091714844.png" alt="image-20220409161409736"></p>
<hr>
<ul>
<li>False positive rate (α) &#x3D; <a href="https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#Type_I_error">type I error</a> &#x3D; 1 − specificity &#x3D; FP &#x2F; (FP + TN)</li>
<li>False negative rate (β) &#x3D; <a href="https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#Type_II_error">type II error</a> &#x3D; 1 − sensitivity &#x3D; FN &#x2F; (TP + FN)</li>
</ul>
<hr>
<p><a href="https://towardsdatascience.com/baffling-concept-of-true-positive-and-true-negative-bffbc340f107">https://towardsdatascience.com/baffling-concept-of-true-positive-and-true-negative-bffbc340f107</a></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204091712060.png" alt="image-20220409161237992"></p>
<hr>
<p>The <em>average accuracy</em> is calculated as the sum of the accuracy figures in column Accuracy divided by the number of classes in the test set.</p>
<p>The <em>average reliability</em> is calculated as the sum of the reliability figures in column Reliability divided by the number of classes in the test set.</p>
<p>The <em>overall accuracy</em> is calculated as the total number of correctly classified pixels (diagonal elements) divided by the total number of test pixels.</p>
]]></content>
      <categories>
        <category>课程学习</category>
      </categories>
      <tags>
        <tag>DATA604</tag>
      </tags>
  </entry>
  <entry>
    <title>Beautiful Words</title>
    <url>/2022/01/29/Beautiful-Words/</url>
    <content><![CDATA[<p>一些美妙的英文单词</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th>Words</th>
<th>Meanings</th>
</tr>
</thead>
<tbody><tr>
<td>pluviophile</td>
<td>雨瘾者</td>
</tr>
<tr>
<td>Nefelibata</td>
<td>漫步云端的人 活在自己的幻想中 不遵循社会传统</td>
</tr>
<tr>
<td>Collapsar</td>
<td>坍缩星 自我陨落的古老星体 一步步变成黑洞</td>
</tr>
<tr>
<td>Paracosm</td>
<td>幻想的世界</td>
</tr>
<tr>
<td>Confectionary</td>
<td>糖果店 糖果 甜的</td>
</tr>
<tr>
<td>Solitude</td>
<td>孤独 隐僻 独居的</td>
</tr>
<tr>
<td>Effervescent</td>
<td>冒泡的 沸腾的 兴奋的</td>
</tr>
<tr>
<td>Echo</td>
<td>回响</td>
</tr>
<tr>
<td>Melancholy</td>
<td>悲哀 忧愁</td>
</tr>
<tr>
<td>Eureka</td>
<td>找到了！成功了！</td>
</tr>
<tr>
<td>Milky Way</td>
<td>银河</td>
</tr>
<tr>
<td>pine</td>
<td>松树</td>
</tr>
<tr>
<td>lachesism</td>
<td>渴望灾难 比如你在海平面上看到雷雨，为暴风雨的到来而欢呼雀跃</td>
</tr>
<tr>
<td>jouska</td>
<td>脑海中不断出现且无法停止的假象对话</td>
</tr>
<tr>
<td>Sonder</td>
<td>过客感 （一生在不断的告别</td>
</tr>
<tr>
<td>onism</td>
<td>由于困在一个躯体中 无法同时分身多地而导致的失落感</td>
</tr>
<tr>
<td>Lelucermaire</td>
<td>灯下夜祷</td>
</tr>
<tr>
<td>Evanescence</td>
<td>转瞬即逝 渐逝</td>
</tr>
<tr>
<td>Nirvana</td>
<td>涅槃</td>
</tr>
<tr>
<td>Ubiquitous</td>
<td>普遍存在 无处不在</td>
</tr>
<tr>
<td>Ataraxia</td>
<td>心神安宁 心平气和</td>
</tr>
<tr>
<td>Pendler</td>
<td>小贩 乘车上下班的人 使用月季票上下班的人</td>
</tr>
<tr>
<td>cosmonaut</td>
<td>宇航员 太空人</td>
</tr>
<tr>
<td>Vellichor</td>
<td>在旧书店里 时光缓慢而静谧地流逝的氛围</td>
</tr>
<tr>
<td>aloha</td>
<td>喂 你好 再见</td>
</tr>
<tr>
<td>hippopotomonstrosesquippedaliophobia</td>
<td>长单词恐惧症</td>
</tr>
<tr>
<td>Anchor</td>
<td>锚 安全感 依靠 停泊之人</td>
</tr>
<tr>
<td>sapphire</td>
<td>蓝宝石 天蓝色 蔚蓝色</td>
</tr>
<tr>
<td>Frenemy</td>
<td>亦敌亦友</td>
</tr>
<tr>
<td>melancolie</td>
<td>黑胆汁 忧郁症 凄凉 抑郁</td>
</tr>
<tr>
<td>Weltschmerz</td>
<td>厌世 世界痛苦 悲观冷漠</td>
</tr>
<tr>
<td>Culaccino</td>
<td>一杯冰水放在桌子上的水印</td>
</tr>
<tr>
<td>morii</td>
<td>渴望留住一个转瞬即逝的体验</td>
</tr>
<tr>
<td>brisk</td>
<td>脆响</td>
</tr>
<tr>
<td>epiphany</td>
<td>顿悟</td>
</tr>
<tr>
<td>euphoria</td>
<td>欢愉</td>
</tr>
<tr>
<td>serendipity</td>
<td>机缘巧合</td>
</tr>
<tr>
<td>singularity</td>
<td>奇怪</td>
</tr>
<tr>
<td>mikrokosmos</td>
<td>小宇宙</td>
</tr>
<tr>
<td>vicissitudes</td>
<td>沧海桑田</td>
</tr>
<tr>
<td>euphoria</td>
<td>极度兴奋</td>
</tr>
<tr>
<td>serendipity</td>
<td>机缘巧合</td>
</tr>
<tr>
<td>ethereal</td>
<td>超凡脱俗的</td>
</tr>
<tr>
<td>Petrichor</td>
<td>雨后的泥土味</td>
</tr>
<tr>
<td>iridescent</td>
<td>色彩斑斓的</td>
</tr>
<tr>
<td>Eureka</td>
<td>我发现了</td>
</tr>
<tr>
<td>benevolence</td>
<td>仁慈</td>
</tr>
<tr>
<td>oblivion</td>
<td>忘却</td>
</tr>
<tr>
<td>Aurora</td>
<td>极光，曙光</td>
</tr>
<tr>
<td>serendipity</td>
<td>珍宝</td>
</tr>
<tr>
<td>desideratum</td>
<td>所愿之物</td>
</tr>
<tr>
<td>elapse</td>
<td>流逝</td>
</tr>
<tr>
<td>Myosotis</td>
<td>勿忘我</td>
</tr>
<tr>
<td>Magnolia</td>
<td>木兰</td>
</tr>
<tr>
<td>anemone</td>
<td>银莲花</td>
</tr>
<tr>
<td>dwindling</td>
<td>凋零</td>
</tr>
<tr>
<td>engulf</td>
<td>吞噬</td>
</tr>
<tr>
<td>rapture</td>
<td>狂喜</td>
</tr>
<tr>
<td>redemptio</td>
<td>救赎</td>
</tr>
</tbody></table>
<p>You are the cause of my euphoria.</p>
<p>欢欣之意皆由你</p>
<p>看电影《浮生一日》，认识了一个很长的单词，叫Mamihlapinatapai，它来自南美的一种叫做Yaghan的语言。它描述了一种状态，或者说是一小段时间，就是当事的双方有了共同的愿望，但是谁都没有开口把窗户纸捅破的那个时间段。比如两个人在打冷战，无数个用来报复的视而不见不理不睬之后，终于二人都想要言和，但一时又都有些羞于主动表示，于是气氛变得微妙而凝固，大家都静静的等待一方先开口，可能下一秒就彼此拥抱了，下一秒就美好了。但在下一秒之前，就是Mamihlapinatapai。</p>
]]></content>
      <categories>
        <category>尘世间</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>DATA605 Final Project</title>
    <url>/2022/03/02/DATA605-Final-Project/</url>
    <content><![CDATA[<p>Notes about DATA605 Big Data System</p>
<p>Data source: </p>
<p><a href="https://www.kaggle.com/allen-institute-for-ai/CORD-19-research-challenge?select=metadata.csv">COVID-19 Open Research Dataset Challenge (CORD-19)</a></p>
<p><a href="https://www.semanticscholar.org/cord19">https://www.semanticscholar.org/cord19</a></p>
<span id="more"></span>

<h1 id="Proposal"><a href="#Proposal" class="headerlink" title="Proposal"></a>Proposal</h1><h2 id="What-problem-are-you-trying-to-solve-using-a-Big-Data-System"><a href="#What-problem-are-you-trying-to-solve-using-a-Big-Data-System" class="headerlink" title="What problem are you trying to solve using a Big Data System?"></a>What problem are you trying to solve using a Big Data System?</h2><p>We plan to use the covid virus data and policy data to create a model and then predict that how the flu can be affected if we apply  the same policies.</p>
<h2 id="Why-does-your-system-need-to-be-a-Big-Data-System"><a href="#Why-does-your-system-need-to-be-a-Big-Data-System" class="headerlink" title="Why does your system need to be a Big Data System?"></a>Why does your system need to be a Big Data System?</h2><p>The data we are going to use is about 67 GB. If it runs on our local pc, it may take much longer time, no need to talk about if we need to debug.</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202203021031955.png" alt="image-20220302103103919"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202203021030322.png" alt="image-20220302103048271"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202203021041290.png" alt="image-20220302104142156"></p>
<h2 id="How-will-your-system-satisfy-the-4Vs"><a href="#How-will-your-system-satisfy-the-4Vs" class="headerlink" title="How will your system satisfy the 4Vs?"></a>How will your system satisfy the 4Vs?</h2><h3 id="Volume-体积"><a href="#Volume-体积" class="headerlink" title="Volume 体积"></a>Volume 体积</h3><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202203021033614.png" alt="image-20220302103336550"></p>
<h3 id="Variety-多样性"><a href="#Variety-多样性" class="headerlink" title="Variety 多样性"></a>Variety 多样性</h3><p>CORD-19 is a resource of over 500,000 scholarly articles, including over 200,000 with full text, about COVID-19, SARS-CoV-2, and related coronaviruses. This freely available dataset is provided to the global research community to apply recent advances in natural language processing and other AI techniques to generate new insights in support of the ongoing fight against this infectious disease.</p>
<h3 id="Velocity-速度"><a href="#Velocity-速度" class="headerlink" title="Velocity 速度"></a>Velocity 速度</h3><h3 id="Veracity-真实性"><a href="#Veracity-真实性" class="headerlink" title="Veracity 真实性"></a>Veracity 真实性</h3><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202203021032503.png" alt="image-20220302103224460"></p>
<h2 id="What-technologies-will-you-use"><a href="#What-technologies-will-you-use" class="headerlink" title="What technologies will you use?"></a>What technologies will you use?</h2><p><a href="https://www.runoob.com/w3cnote/github-tools.html">GitHub上整理的一些工具</a></p>
<blockquote>
<h2 id="大数据处理-x2F-数据分析-x2F-分布式工具"><a href="#大数据处理-x2F-数据分析-x2F-分布式工具" class="headerlink" title="大数据处理&#x2F;数据分析&#x2F;分布式工具"></a>大数据处理&#x2F;数据分析&#x2F;分布式工具</h2><ul>
<li>Hadoop：分布式的文件系统，结合其MapReduce编程模型可以用来做海量数据的批处理（Hive，Pig，HBase啥的就不说了），值得介绍的是Cloudera的Hadoop分支CDH5，基于YARN MRv2集成了Spark可直接用于生产环境的Hadoop，对于企业快速构建数据仓库非常有用。</li>
<li>Ceph:Linux分布式文件系统（特点：无中心）</li>
<li>Storm：实时流数据处理，可以看下IBM的一篇介绍 （还有个Yahoo的S4，也是做流数据处理的）</li>
<li>Spark：大规模流式数据处理（可以应付企业中常见的三种数据处理场景：复杂的批量数据处理（batch data processing）；基于历史数据的交互式查询（interactive query）；基于实时数据流的数据处理（streaming data processing）），CSND有篇文章介绍的不错</li>
<li>Spark Streaming：基于Spark的实时计算框架</li>
<li>Tachyon：分布式内存文件系统</li>
<li>Mesos：计算框架一个集群管理器，提供了有效的、跨分布式应用或框架的资源隔离和共享Impala：新一代开源大数据分析引擎，提供Sql语义，比- Hive强在速度上</li>
<li>SNAPPY：快速的数据压缩系统，适用于Hadoop生态系统中</li>
<li>Kafka:高吞吐量的分布式消息队列系统</li>
<li>ActiveMQ:是Apache出品，最流行的，能力强劲的开源消息总线</li>
<li>MQTT:Message Queuing Telemetry Transport，消息队列遥测传输）是IBM开发的一个即时通讯协议，有可能成为物联网的重要组成部分</li>
<li>RabbitMQ：记得OpenStack就是用的这个东西吧</li>
<li>ZeroMQ：宣称是将分布式计算变得更简单，是个分布式消息队列，可以看下云风的一篇文章的介绍开源的日志收集系统：scribe、chukwa、kafka、flume。这有一篇对比文章</li>
<li>Zookeeper：可靠的分布式协调的开源项目</li>
<li>Databus：LinkedIn 实时低延迟数据抓取系统</li>
</ul>
<p>数据源获取：Flume、Google Refine、Needlebase、ScraperWiki、BloomReach</p>
<p>序列化技术：JSON、BSON、Thrift、Avro、Google Protocol Buffers</p>
<p>NoSql：Apache Hadoop、Apache Casandra、MongoDB、Apache CouchDB、Redis、BigTable、HBase、Hypertable、Voldemort、Neo4j</p>
<p>MapReduce相关：Hive、Pig、Cascading、Cascalog、mrjob、Caffeine、S4、MapR、Acunu、Flume、Kafka、Azkaban、Oozie、Greenplum</p>
<p>数据处理：R、Yahoo! Pipes、Mechanical Turk、Solr&#x2F; Lucene、ElasticSearch、Datameer、Bigsheets、TinkerpopNLP自然语言处理：Natural Language Toolkit、Apache OpenNLP、Boilerpipe、OpenCalais</p>
<p>机器学习：WEKA、Mahout、scikits.learn、SkyTree</p>
<p>可视化技术：GraphViz、Processing、Protovis、Google Fusion Tables、Tableau、Highcharts、EChats（百度的还不错）、Raphaël.js</p>
<ul>
<li>Kettle：开源的ETL工具</li>
<li>Pentaho：以工作流为核心的开源BI系统</li>
<li>Mondrian：开源的Rolap服务器</li>
<li>Oozie：开源hadoop的工作流调度引擎</li>
</ul>
<p>开源的数据分析可视化工具：Weka、Orange、KNIME</p>
<p>Cobar：阿里巴巴的MySql分布式中间件</p>
</blockquote>
<p>​	<a href="https://techvidvan.com/tutorials/big-data-technologies/#:~:text=Big%20Data%20technologies%20are%20the,amount%20of%20real%2Dtime%20data.">Rising Big Data Technologies You Must Know In 2021</a></p>
<ul>
<li><p>aws</p>
<p>aws ++++</p>
</li>
<li><p>Hadoop</p>
<p><a href="https://www.runoob.com/w3cnote/hadoop-tutorial.html">Hadoop 教程</a></p>
<p>Hadoop 是一个开源的分布式计算和存储框架，由 Apache 基金会开发和维护。</p>
<p>Hadoop 为庞大的计算机集群提供可靠的、可伸缩的应用层计算和存储支持，它允许使用简单的编程模型跨计算机群集分布式处理大型数据集，并且支持在单台计算机到几千台计算机之间进行扩展。</p>
<p>Hadoop 使用 Java 开发，所以可以在多种不同硬件平台的计算机上部署和使用。其核心部件包括分布式文件系统 (Hadoop DFS，HDFS) 和 MapReduce。</p>
</li>
<li><p>MongoDB</p>
<p><a href="https://www.runoob.com/mongodb/mongodb-tutorial.html">MongoDB 教程</a></p>
<p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</p>
<p>在高负载的情况下，添加更多的节点，可以保证服务器性能。</p>
<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p>
<p>MongoDB 将数据存储为一个文档，数据结构由键值(key&#x3D;&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p>
</li>
<li><p>Kafka</p>
</li>
<li><p>Spark</p>
</li>
</ul>
<h1 id="Problem-amp-Solution"><a href="#Problem-amp-Solution" class="headerlink" title="Problem &amp; Solution"></a>Problem &amp; Solution</h1><p>Q: Dataset is too big to upload</p>
<p>S: </p>
<ol>
<li><a href="https://stackoverflow.com/questions/19241671/downloading-a-file-from-internet-into-s3-bucket">downloading a file from Internet into S3 bucket</a></li>
</ol>
<p>​	use curl</p>
<p><code> curl &quot;https://download-link-address/&quot; | aws s3 cp - s3://aws-bucket/data-file</code></p>
<blockquote>
<p>curl “<a href="https://www.kaggle.com/allen-institute-for-ai/CORD-19-research-challenge?select=metadata.csv&quot;">https://www.kaggle.com/allen-institute-for-ai/CORD-19-research-challenge?select=metadata.csv&quot;</a> | aws s3 cp - s3:&#x2F;&#x2F;cord-19-data</p>
</blockquote>
<p>curl “<a href="https://www.kaggle.com/allen-institute-for-ai/CORD-19-research-challenge/download&quot;">https://www.kaggle.com/allen-institute-for-ai/CORD-19-research-challenge/download&quot;</a> | aws s3 cp - s3:&#x2F;&#x2F;cord-19-data</p>
<p>API command :</p>
<p>kaggle datasets download -d allen-institute-for-ai&#x2F;CORD-19-research-challenge</p>
<p>kaggle datasets download -d allen-institute-for-ai&#x2F;CORD-19-research-challenge | aws s3 cp - s3:&#x2F;&#x2F;cord-19-data</p>
<ol start="2">
<li><p><a href="https://medium.com/@antonysruthy11/loading-kaggle-dataset-to-aws-s3-using-boto3-50af3e015fb2">Loading Kaggle dataset to AWS S3 using Boto3 - Medium</a></p>
<ol>
<li><p>pip install kaggle</p>
</li>
<li><p>pip install awscli</p>
</li>
<li><p>pip install boto3</p>
<p>AKIAWIHOEAJ25KOUT7EK,c4PmAB1Ckh9EQB4ihT84dgP0PdSUu8It9lw3cl2t</p>
</li>
</ol>
</li>
<li><p><a href="https://confusedcoders.com/data-engineering/how-to-copy-kaggle-data-to-amazon-s3">Part 1: How to copy Kaggle data to Amazon S3</a></p>
</li>
</ol>
<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>Terminus </p>
<p><a href="https://support.termius.com/hc/en-us/articles/4416457789593">Integration with Amazon AWS on Desktop (beta)</a></p>
<p><a href="https://cord-19-data.s3.amazonaws.com/-">https://cord-19-data.s3.amazonaws.com/-</a></p>
<p>s3:&#x2F;&#x2F;cord-19-data&#x2F;-</p>
<p>ssh -i <filename>.pem ec2-user@<public-ip></p>
<p>ssh -i labsuser.pem <a href="mailto:&#x65;&#x63;&#50;&#45;&#x75;&#x73;&#x65;&#114;&#64;&#x35;&#x34;&#46;&#49;&#53;&#57;&#x2e;&#x32;&#x38;&#x2e;&#50;&#49;&#x37;">&#x65;&#x63;&#50;&#45;&#x75;&#x73;&#x65;&#114;&#64;&#x35;&#x34;&#46;&#49;&#53;&#57;&#x2e;&#x32;&#x38;&#x2e;&#50;&#49;&#x37;</a></p>
<p>ssh -i ~&#x2F;.ssh&#x2F;labsuser.pem ec2-user@<public-ip></p>
<p>ssh -i ~&#x2F;.ssh&#x2F;labsuser.pem <a href="mailto:&#x65;&#x63;&#x32;&#x2d;&#117;&#x73;&#101;&#x72;&#64;&#53;&#52;&#x2e;&#x31;&#53;&#57;&#x2e;&#50;&#x38;&#46;&#x32;&#49;&#55;">&#x65;&#x63;&#x32;&#x2d;&#117;&#x73;&#101;&#x72;&#64;&#53;&#52;&#x2e;&#x31;&#53;&#57;&#x2e;&#50;&#x38;&#46;&#x32;&#49;&#55;</a></p>
]]></content>
      <categories>
        <category>课程学习</category>
      </categories>
      <tags>
        <tag>DATA641</tag>
      </tags>
  </entry>
  <entry>
    <title>DATA605 Reading Material 1</title>
    <url>/2022/02/02/DATA605-Reading-Material-1/</url>
    <content><![CDATA[<p>“Big_Data_Concepts_Techniques_and_Technologies”</p>
<span id="more"></span>

<h3 id="2-1-BIG-DATA-RELEVANCE"><a href="#2-1-BIG-DATA-RELEVANCE" class="headerlink" title="2.1. BIG DATA RELEVANCE"></a>2.1. BIG DATA RELEVANCE</h3><p>Organizations need to understand and  analyze relevant data flows, join data analytics with  product&#x2F;process development, and move it closer to  the core business (Davenport et al., 2012).</p>
<h4 id="Possible-Applications"><a href="#Possible-Applications" class="headerlink" title="Possible Applications:"></a>Possible Applications:</h4><p>healthcare, public sector, retail, manufacturing, and personal-location contexts, stating that value can be generated in each one of them.</p>
<h4 id="Concept"><a href="#Concept" class="headerlink" title="Concept:"></a>Concept:</h4><p>The concept of Big Data is about leveraging access to a vast volume of data, which<br>can help retrieving value for organizations, with minimal human intervention, due to the<br>advancements made in data processing technologies.</p>
<h4 id="Usage："><a href="#Usage：" class="headerlink" title="Usage："></a>Usage：</h4><ul>
<li>The use of Big Data can make information more transparent and usable across the<br>organization</li>
<li>Business performance can be increased with more accurate and detailed facts, turned<br>possible by collecting and processing more transactional data</li>
<li>Better management decisions can be made through data analysis</li>
<li>Better management decisions can be made through data analysis</li>
</ul>
<p>Big Data will have a significant impact in value creation and competitive  advantage for organizations, such as new ways to interact with customers or to develop  products, services, and strategies, consequently raising profitability. Another area where  the concept of Big Data is of major relevance is the <u><strong>Internet of Things (IoT)</strong></u>, seen as a network of sensors embedded into several devices (e.g., appliances, smartphones, cars),  which is a significant source of Big Data, bringing many business environments (e.g.,  cities) into the era of Big Data (M. Chen et al., 2014).</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202021910103.png" alt="image-20220202191034054"></p>
<h3 id="2-2-BIG-DATA-CHARACTERISTICS"><a href="#2-2-BIG-DATA-CHARACTERISTICS" class="headerlink" title="2.2. BIG DATA CHARACTERISTICS"></a>2.2. BIG DATA CHARACTERISTICS</h3><p><u>There is no widely accepted threshold for classifying data as Big Data</u></p>
<p>“big” implies significance, complexity, and challenge</p>
<ul>
<li>characteristics</li>
<li>the augmentation of traditional data with more unstructured data sources</li>
<li>quantitative thresholds</li>
</ul>
<p>(size, complexity, or techniques and technologies to process large<br>and complex datasets.)</p>
<h4 id="Variety"><a href="#Variety" class="headerlink" title="Variety:"></a>Variety:</h4><p>Regarding variety, Big Data can be classified as structured (e.g., transactional data,<br>spreadsheets, and relational databases), semi-structured (e.g., Web server logs, Extensible Markup Language – XML, and JavaScript Object Notation – JSON), and unstructured (e.g., social media posts, audio, video, and images) (Chandarana &amp; Vijayalakshmi, 2014; Gandomi &amp; Haider, 2015). Traditional technologies can have significant difficulties storing and processing Big Data, such as content from Web pages, click-stream data, search indexes, social media posts, emails, documents, and sensor data. Most of this data does not fit well in traditional databases, hence, there must be a paradigm shift in the way organizations perform analyzes to accommodate raw structured, semi-structured, and unstructured data, in order to take advantage of the value in Big Data (Zikopoulos &amp; Eaton, 2011).</p>
<p>The final characteristic covered by the 3Vs model is velocity, which refers either to the<br>rate at which data is generated or to the required speed of analysis and decision support<br>(Gandomi &amp; Haider, 2015). Data can be generated at different rates, ranging from batch<br>to real-time (streaming) (Chandarana &amp; Vijayalakshmi, 2014; Zikopoulos &amp; Eaton, 2011).<br>It is preferable to apply the definition of velocity to data in motion, instead of the rate at<br>which data is collected, stored, and retrieved from storage. Continuous data streams can<br>create competitive advantages in contexts where the identification of trends must occur<br>in short periods of time, as in financial markets, for example (Zikopoulos &amp; Eaton, 2011).</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202021922214.png"></p>
<h4 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h4><p>Hardware &#x2F; good database</p>
<p>Other characteristics, which according to the literature often go unnoticed, are the variability and complexity, introduced by SAS (Gandomi &amp; Haider, 2015). Variability is related to the different rates at which data flows, according to different peaks and inconsistent data velocity. Complexity highlights the challenges of dealing with data from multiple sources, namely connecting, matching, cleaning, and transforming them. Besides the former, Krishnan (2013) also proposes three other characteristics: ambiguity, concerning the lack of appropriate metadata, resulting from the combination of volume and variety; viscosity, when the volume and velocity of data cause resistance in data flows; virality, which measures the time of data propagation among peers in a network.</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202021924846.png" alt="image-20220202192431788"></p>
<h3 id="2-3-BIG-DATA-CHALLENGES"><a href="#2-3-BIG-DATA-CHALLENGES" class="headerlink" title="2.3. BIG DATA CHALLENGES"></a>2.3. BIG DATA CHALLENGES</h3><p>General dilemmas may include challenges such as the lack of consensus and rigor in<br>Big Data’ s definition, models, and architectures.</p>
<p> In fact, the lack of standard benchmarks to compare different technologies is seriously aggravated by the constant technological evolution of Big Data environments</p>
<h4 id="Q-1"><a href="#Q-1" class="headerlink" title="Q:"></a>Q:</h4><p>anyway to set a standard</p>
<p>How to take full advantage of Big Data in areas such as scientific research, engineering,<br>medicine, finance, education, government, retail, transportation, or telecommunications<br>remains an open question  </p>
<p>Discussions about how to select the most appropriate data from several sources or how to estimate their value are major issues (Chandarana &amp; Vijayalakshmi, 2014). </p>
<p>Another issue regularly discussed is how Big Data helps representing the population better than a small dataset does . The answer obviously depends on the context, but the authors make the important point that one should not assume that more data is always better</p>
<p>Data throughout its life cycle can potentially create severe bottlenecks in networks,<br>storage devices, and relational databases. </p>
<p>take significant time, as it is challenging to sequentially iterate through the whole dataset in a short amount of time. Consequently, the authors highlight the importance of designing indexes and implementing adequate preprocessing technologies. Hashem et al. (2015) identify the need to study adequate models to store and retrieve data as a crucial factor to successfully implement Big Data solutions. Models and algorithms for scalable data analysis also remain an open research issue, as well as the integration and analysis of data arriving continuously from streams</p>
<p>Mining data streams has been identified as an emergent research topic in Big Data analytics (H. Chen, Chiang, &amp; Storey, 2012).</p>
<p>one of the challenges lies in guaranteeing adequate monitoring and security without<br>exposing users’ data when processing it.</p>
<h3 id="2-4-TECHNIQUES-FOR-BIG-DATA-SOLUTIONS"><a href="#2-4-TECHNIQUES-FOR-BIG-DATA-SOLUTIONS" class="headerlink" title="2.4. TECHNIQUES FOR BIG DATA SOLUTIONS"></a>2.4. TECHNIQUES FOR BIG DATA SOLUTIONS</h3>]]></content>
      <categories>
        <category>课程学习</category>
      </categories>
      <tags>
        <tag>DATA605</tag>
      </tags>
  </entry>
  <entry>
    <title>DATA641 Midterm</title>
    <url>/2022/03/07/DATA641-Midterm/</url>
    <content><![CDATA[<p>Q1 + Q6</p>
<span id="more"></span>

<h1 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h1><h2 id="i-Inflectional-morphology"><a href="#i-Inflectional-morphology" class="headerlink" title="i.Inflectional morphology"></a>i.Inflectional morphology</h2><h3 id="Def"><a href="#Def" class="headerlink" title="Def:"></a>Def:</h3><p>The part of grammar that deals with the inflections of words. Inflection produces grammatical variants of the same word. Languages that add inflectional morphemes to words are sometimes called inflectional languages. It can be done by serveral ways: affixation, reduplication, alternation, suprasegmental variations. Inflection is most typically realized by adding an inflectional morpheme (that is, affixation) to the base form (either the root or a stem).</p>
<h3 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation:"></a>Explanation:</h3><p>good news(n) —&gt; she was <u>good newsed</u>(adj) [some gets good news can be called he is good newsed]</p>
<h2 id="ii-Derivational-morphology"><a href="#ii-Derivational-morphology" class="headerlink" title="ii.Derivational morphology"></a>ii.Derivational morphology</h2><h3 id="Def-1"><a href="#Def-1" class="headerlink" title="Def:"></a>Def:</h3><p>The part of grammar that deals with the derivation of words. Derivation produces a new word by adding affixes to existing words or stem occurs. Affixes are bound morphemes which can only attach to word or stem. The process changes the new semantically and grammatically.</p>
<h3 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation:"></a>Explanation:</h3><p>good news(n) —&gt; she was <u>good newsed</u>(v)	[sth good news sb]</p>
<h2 id="iii-Constituents"><a href="#iii-Constituents" class="headerlink" title="iii.Constituents"></a>iii.Constituents</h2><h3 id="Def-2"><a href="#Def-2" class="headerlink" title="Def:"></a>Def:</h3><p>In syntactic analysis, a constituent is a word or a group of words that function(s) as a single unit within a hierarchical structure. The analysis of constituent structure is associated mainly with phrase structure grammars, although dependency grammars also allow sentence structure to be broken down into constituent parts. The constituent structure of sentences is identified using constituency tests. These tests manipulate some portion of a sentence and based on the result, clues are delivered about the immediate constituent structure of the sentence. Many constituents are phrases. A phrase is a sequence of one or more words (in some theories two or more) built around a head lexical item and working as a unit within a sentence. A word sequence is shown to be a phrase&#x2F;constituent if it exhibits one or more of the behaviors discussed below.</p>
<h3 id="Explanation-2"><a href="#Explanation-2" class="headerlink" title="Explanation:"></a>Explanation:</h3><p><u>i</u> <u>talked to</u> <u>my dad’s second cousin</u> [like: <u>sb</u> <u>do something to</u> <u>sb</u>]</p>
<h2 id="iv-Multi-wordunits-x2F-collocations"><a href="#iv-Multi-wordunits-x2F-collocations" class="headerlink" title="iv.Multi-wordunits&#x2F;collocations"></a>iv.Multi-wordunits&#x2F;collocations</h2><h3 id="Def-3"><a href="#Def-3" class="headerlink" title="Def:"></a>Def:</h3><p>A multiword is a lexical unit formed by two or more words to yield a new concept, different from the composition of the meaning of its elements.</p>
<p>There are about six main types of collocations: adjective+noun, noun+noun (such as collective nouns), verb+noun, adverb+adjective, verbs+prepositional phrase (phrasal verbs), and verb+adverb.</p>
<h3 id="Explanation-3"><a href="#Explanation-3" class="headerlink" title="Explanation:"></a>Explanation:</h3><p>i <u>talked to</u> my dad’s second cousin <u>in toronto</u> <u>on (good) friday</u></p>
<h2 id="v-Coreference"><a href="#v-Coreference" class="headerlink" title="v.Coreference"></a>v.Coreference</h2><h3 id="Def-4"><a href="#Def-4" class="headerlink" title="Def:"></a>Def:</h3><p>In linguistics, coreference, sometimes written co-reference, occurs when two or more expressions in a text refer to the same person or thing; they have the same referent</p>
<h3 id="Explanation-4"><a href="#Explanation-4" class="headerlink" title="Explanation:"></a>Explanation:</h3><p>i talked to <u>my dad’s second cousin</u> in toronto on good friday and <u>he</u> was just good newsed! (he &lt;—&gt; my dad’s second cousin)</p>
<h2 id="vi-Syntactic-ambiguity"><a href="#vi-Syntactic-ambiguity" class="headerlink" title="vi.Syntactic ambiguity"></a>vi.Syntactic ambiguity</h2><h3 id="Def-5"><a href="#Def-5" class="headerlink" title="Def:"></a>Def:</h3><p>Syntactic ambiguity, also called amphiboly or amphibology, is a situation where a sentence may be interpreted in more than one way due to ambiguous sentence structure.</p>
<h3 id="Explanation-5"><a href="#Explanation-5" class="headerlink" title="Explanation:"></a>Explanation:</h3><p>i talked to <u><strong>my dad</strong>’s second cousin</u> in toronto on good friday and <u>he</u> was just good newsed! (Who is good newsed? My dad or my dad’s second cousin)</p>
<h2 id="vii-Number-agreement"><a href="#vii-Number-agreement" class="headerlink" title="vii.Number agreement"></a>vii.Number agreement</h2><h3 id="Def-6"><a href="#Def-6" class="headerlink" title="Def:"></a>Def:</h3><p>agreement in number between words in the same grammatical construction (e.g., between adjectives and the nouns they modify)</p>
<h3 id="Explanation-6"><a href="#Explanation-6" class="headerlink" title="Explanation:"></a>Explanation:</h3><p>i talked to my dad’s second cousin in toronto on good friday and <u>he</u> <u>was</u> just good newsed! (“he” is single, so “was” is used)</p>
<h2 id="viii-“Infinite-capacity-from-finite-means”"><a href="#viii-“Infinite-capacity-from-finite-means”" class="headerlink" title="viii.“Infinite capacity from finite means”"></a>viii.“Infinite capacity from finite means”</h2><h3 id="Def-7"><a href="#Def-7" class="headerlink" title="Def:"></a>Def:</h3><p>Some information can indicated by the sentence we saw, even though it is said in the sentence.</p>
<h3 id="Explanation-7"><a href="#Explanation-7" class="headerlink" title="Explanation:"></a>Explanation:</h3><p>i talked to my dad’s second cousin in toronto on good friday and he was just good newsed! —&gt;</p>
<p>Her dad has cousins more than two.</p>
<p>Toronto on that Friday had a good weather.</p>
<p>Her dad’s second cousin was in toronto on that Friday.</p>
<hr>
<h1 id="6"><a href="#6" class="headerlink" title="6"></a>6</h1><h2 id="1-True"><a href="#1-True" class="headerlink" title="1. True"></a>1. True</h2><p>Susan and Mary enjoyed the spaghetti they served with her brother.</p>
<p>There are only two forms of ambiguity: lexical ambiguity and syntactic ambiguity.</p>
<p>For this sentence, there are three ambiguities:</p>
<ul>
<li>Who served the spaghetti?</li>
<li>Whose brother? Susan’s or Mary’s?</li>
<li>Did the brother eat the spaghetti? Or he just went to accompany those two girls?</li>
</ul>
<h2 id="2-False"><a href="#2-False" class="headerlink" title="2. False"></a>2. False</h2><p>Zipf’s law is a relation between rank order and frequency of occurrence: it states that when observations (e.g., words) are ranked by their frequency, the frequency of a particular observation is inversely proportional to its rank, Frequency ∝ 1 Rank .</p>
<h2 id="3-False"><a href="#3-False" class="headerlink" title="3. False"></a>3. False</h2><p>Byte pair encoding or digram coding is a simple form of data compression in which <u>the most common pair of consecutive bytes of data</u> is replaced with <u>a byte that does not occur within that data</u>. A table of the replacements is required to rebuild the original data. </p>
<h2 id="4-True"><a href="#4-True" class="headerlink" title="4. True"></a>4. True</h2><p>Word2vec is a group of related models that are used to produce word embeddings. These models are shallow, two-layer neural networks that are trained to reconstruct linguistic contexts of words. Word2vec takes as its input a large corpus of text and produces a vector space, typically of several hundred dimensions, with each unique word in the corpus being assigned a corresponding vector in the space. Word vectors are positioned in the vector space such that words that share common contexts in the corpus are located close to one another in the space.</p>
<p>Each word will not be represented by a discrete and sparse vector, but by a d-dimension continuous vector, and the meaning of each word will be captured by its relation to other words </p>
<h2 id="5-True"><a href="#5-True" class="headerlink" title="5. True"></a>5. True</h2><p>“frame” + “er” + “s” &#x3D; “framers”</p>
<p>framer —&gt;framer —&gt;framers</p>
<p>(ex: drive —&gt;driver —&gt; drivers &#x2F; office —&gt;officer —&gt;officers)</p>
<h2 id="6-1"><a href="#6-1" class="headerlink" title="6."></a>6.</h2><h2 id="7-False"><a href="#7-False" class="headerlink" title="7.False"></a>7.False</h2><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202203071931156.jpeg" alt="笔记 2022年3月7日 19"></p>
]]></content>
      <categories>
        <category>课程学习</category>
      </categories>
      <tags>
        <tag>DATA641</tag>
      </tags>
  </entry>
  <entry>
    <title>DATA606 Presentation</title>
    <url>/2022/03/06/DATA606-Presentation/</url>
    <content><![CDATA[<p>Group 4</p>
<span id="more"></span>

<h1 id="Member"><a href="#Member" class="headerlink" title="Member"></a>Member</h1><ol>
<li>Yibo Zhang</li>
<li>Chao cao</li>
<li>Jiawei Luo</li>
<li>Tapen Katipelli</li>
</ol>
<h1 id="Sections"><a href="#Sections" class="headerlink" title="Sections"></a>Sections</h1><p>2 Chao</p>
<p>​	Markov Chain Monte Carlo</p>
<p>2.1 Chao</p>
<p>​	Estimating Expectations with Markov Chains</p>
<p>2.2 Tapan</p>
<p>​	Ideal Behavior</p>
<p>2.3 Jou L</p>
<p>​	Pathological Behavior</p>
<p>2.4 Sam Zhang</p>
<p>​	The Metropolis-Hastings Algorithm </p>
<h3 id="2-Markov-Chain-Monte-Carlo"><a href="#2-Markov-Chain-Monte-Carlo" class="headerlink" title="2 Markov Chain Monte Carlo"></a>2 Markov Chain Monte Carlo</h3><h4 id="What-is-MCMC"><a href="#What-is-MCMC" class="headerlink" title="What is MCMC?"></a>What is MCMC?</h4><p>Markov chain Monte Carlo (MCMC) methods comprise a class of algorithms for sampling from a probability distribution. By constructing a Markov chain that has the desired distribution as its equilibrium distribution, one can obtain a sample of the desired distribution by recording states from the chain. The more steps are included, the more closely the distribution of the sample matches the actual desired distribution.</p>
<p>Markov chain Monte Carlo methods create samples from a continuous random variable, with probability density proportional to a known function. These samples can be used to evaluate an integral over that variable, as its expected value or variance.</p>
<h4 id="Difference-between-Markov-chain-and-Monte-Carlo"><a href="#Difference-between-Markov-chain-and-Monte-Carlo" class="headerlink" title="Difference between Markov chain and Monte Carlo"></a>Difference between Markov chain and Monte Carlo</h4><p>Markov Chain Monte Carlo sampling provides a class of algorithms for systematic random sampling from high-dimensional probability distributions.</p>
<p>Unlike Monte Carlo sampling methods that are able to draw independent samples from the distribution, Markov Chain Monte Carlo methods draw samples where the next sample is dependent on the existing sample, called a Markov Chain.</p>
<h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p>Markov chain Monte Carlo uses a Markov chain to stochastically explore the typical set, generating a random grid across the region of high probability from which we can struct accurate expectation estimates. Given sufficient computational resources a properly designed Markov chain will eventually explore the typical set of any distribution.</p>
<p>MC methods are a class of methods, of which MCMC is one possibility. </p>
<p>Even MCMC does not uniquely define your method as there are different variations of MCMC.</p>
<h3 id="2-1-Estimating-Expectations-with-Markov-Chains"><a href="#2-1-Estimating-Expectations-with-Markov-Chains" class="headerlink" title="2.1 Estimating Expectations with Markov Chains"></a>2.1 Estimating Expectations with Markov Chains</h3><p>A Markov chain is a progression of points in parameter space generated by sequentially applying a random map known as a Markov transition. Alternatively, we can think of a Markov transition as a conditional probability density, T(q’ | q), defining to which point, q’, we are most likely to jump from the initial point, q</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202203071626531.png" alt="image-20220307162633504"></p>
<p>So long as this condition holds, at every initial point the Markov transition will concentrate towards the typical set. Consequently, no matter where we begin in parameter space the corresponding Markov chain will eventually drift into, and then across, the typical set. </p>
<p>Given sufficient time, the history of the Markov chain, {q0, . . . , qN}, denoted samples generated by the Markov chain, becomes a convenient quantification of the typical set.</p>
<p>In particular, we can estimate expectations across the typical set, and hence expectations across the entire parameter space, by averaging the target function over this history.</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202203071626935.png" alt="image-20220307162621908"></p>
<h4 id="Limitation-for-expectation"><a href="#Limitation-for-expectation" class="headerlink" title="Limitation for expectation"></a><strong>Limitation for expectation</strong></h4><p>As we run the Markov chain for longer and longer, it will better explore the typical set and, up to some technicalities, these Markov chain Monte Carlo estimators will converge to the true expectations.</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202203071626150.png" alt="image-20220307162604107"></p>
<p>Unfortunately, this asymptotic behavior is of limited use in practice because we do not have the infinite computational resources to ensure that we can always run a Markov chain long enough to achieve sufficient exploration. In order to develop a robust tool we need to understand how Markov chains behave after only a finite number of transitions.</p>
<h1 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h1><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202203071629704.png" alt="image-20220307162926652"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202203071629542.png" alt="image-20220307162950500"></p>
<h2 id="2-1-Estimating-Expectations-with-Markov-Chains-1"><a href="#2-1-Estimating-Expectations-with-Markov-Chains-1" class="headerlink" title="2.1 Estimating Expectations with Markov Chains"></a>2.1 Estimating Expectations with Markov Chains</h2><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202203071630218.png" alt="image-20220307163040180"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202203071631819.png" alt="image-20220307163103771"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202203071631723.png" alt="image-20220307163124692"></p>
<h1 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h1><p>Markov chain Monte Carlo uses a Markov chain to stochastically explore the typical set,generating  a  random  grid  across  the  region  of  high  probability  from  which  we  can  construct accurate expectation estimates.</p>
<p>MCMC methods are primarily used for calculating <a href="https://en.wikipedia.org/wiki/Numerical_analysis">numerical approximations</a> of <a href="https://en.wikipedia.org/wiki/Multiple_integral">multi-dimensional integrals</a></p>
<p>By constructing a <a href="https://en.wikipedia.org/wiki/Markov_chain">Markov chain</a> that has the desired distribution as its <a href="https://en.wikipedia.org/wiki/Markov_chain#Steady-state_analysis_and_limiting_distributions">equilibrium distribution</a>, one can obtain a sample of the desired distribution by recording states from the chain. The more steps are included, the more closely the distribution of the sample matches the actual desired distribution.</p>
<p>Varisons:</p>
<p>Not a single algorithm. Various algorithms exist for constructing chains, including the <a href="https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm">Metropolis–Hastings algorithm</a>.</p>
<p>Problems:</p>
<p>While MCMC methods were created to address multi-dimensional problems better than generic Monte Carlo algorithms, when the number of dimensions rises they too tend to suffer the <a href="https://en.wikipedia.org/wiki/Curse_of_dimensionality">curse of dimensionality</a>: regions of higher probability tend to stretch and get lost in an increasing volume of space that contributes little to the integral.</p>
<p>Markov chain uses a random map known as a Markov  transition. Nothing will happen unless Markov transition preserves the target distribution, which means we generated a ensemble of samples fromthe target distribution and applied the transition then we would get a new ensemble thatwas still distributed according to the target distribution</p>
<p>We can estimate expectations across the typical set, and hence expectationsacross the entire parameter space, by averaging the target function over this history.</p>
<p>As we run the Markov chain for longer and longer, it will better explore the typical set</p>
]]></content>
      <categories>
        <category>课程学习</category>
      </categories>
      <tags>
        <tag>DATA606</tag>
      </tags>
  </entry>
  <entry>
    <title>DATA641 assignment1</title>
    <url>/2022/02/07/DATA641-assignment1/</url>
    <content><![CDATA[<p>Assignment 1：Normalizing text and exploring a corpus</p>
<p>规范化文本和探索语料库</p>
<span id="more"></span>

<h2 id="Assignment-1"><a href="#Assignment-1" class="headerlink" title="Assignment 1"></a>Assignment 1</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><ul>
<li><p>Starting with a typical “raw” dataset</p>
<p>从一个典型的 “原始 “数据集开始</p>
<p> a dataset of speeches from the U.S. Congressional Record during 2020</p>
<p>We’ll be using a dataset of speeches from the U.S. Congressional Record during 2020, acquired using code at <a href="https://github.com/ahoho/congressional-record">https://github.com/ahoho/congressional-record</a>. This is publicly available material.</p>
<p>2020年期间美国国会记录中的演讲数据集</p>
</li>
<li><p>Extracting relevant text to create one or more corpora</p>
<p>提取相关文本以创建一个或多个语料库</p>
<p>We’ll restrict ourselves to the Senate, and create subcorpora of speeches by Democrats and Republicans.</p>
<p>我们将把自己限制在参议院，并创建民主党人和共和党人的演讲的子体。</p>
</li>
<li><p>Tokenizing text</p>
<p>符号化文本</p>
<p>We’ll use the <u><strong>spaCy tokenizer</strong></u></p>
<p>我们将使用<u><strong>spaCy标记器</strong></u>。</p>
</li>
<li><p>Normalizing text</p>
<p>正常化文本</p>
<p>Well use case folding and also a stopword list</p>
<p>我们将使用案例折叠法和一个停顿词列表。</p>
</li>
<li><p>Extracting potentially useful ngrams</p>
<p>提取潜在的有用的ngrams</p>
<p>In this assignment we’ll focus on bigrams</p>
<p>在这项任务中，我们将专注于大词</p>
</li>
</ul>
<h3 id="The-files-you’ll-be-working-with"><a href="#The-files-you’ll-be-working-with" class="headerlink" title="The files you’ll be working with"></a>The files you’ll be working with</h3><p>You’ll be working with the following:</p>
<ul>
<li>Files in <a href="https://jsonlines.org/">jsonlines</a> format containing raw data<ul>
<li><code>test_speeches.jsonl.gz</code> - small example data for testing</li>
<li><code>speeches2020_jan_to_jun.jsonl.gz</code> - main data you’ll run on</li>
</ul>
</li>
<li>Files containing code<ul>
<li><code>assignment.py</code> - code skeleton that you’ll fill in</li>
<li><code>public_tests_obj.py</code> - code to run for unit testing</li>
</ul>
</li>
<li>Other resources<ul>
<li><code>mallet_en_stoplist.txt</code> - the stopword list from the widely used <a href="http://mallet.cs.umass.edu/">Mallet</a> toolkit</li>
</ul>
</li>
</ul>
<h3 id="What-you-should-do"><a href="#What-you-should-do" class="headerlink" title="What you should do"></a>What you should do</h3><ul>
<li><p>Check out this repo</p>
</li>
<li><p>Execute <code>python assignment.py</code></p>
<ul>
<li><p>It should run successfully from end to end with progress messages on the output</p>
</li>
<li><p>If it does not, most likely it’s because it is using packages you don’t have installed. Install them (see: requirements.txt)</p>
<ul>
<li><p>If you use conda, we recommend installing a fresh conda env and putting your classwork dependencies there.</p>
</li>
<li><p>Execute </p>
<pre><code>conda create --name YOURCONDAENVIRONMENT python=3.8
conda activate YOURCONDAENVIRONMENT
which pip
</code></pre>
</li>
<li><p>Ensure that your <code>pip</code> lives in its own env, like: <code>/anaconda3/envs/YOURCONDANEVIRONMENT/bin/pip</code></p>
</li>
<li><p>Execute <code>pip install -r requirements.txt</code></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Execute <code>python public_tests_obj.py -v</code></p>
<ul>
<li>The code should run, but will report on tests that have failed.</li>
</ul>
</li>
<li><p>Read and modify <code>assignment.py</code>.  </p>
<ul>
<li><p>Each function has a detailed comment about input, output, and what it does.</p>
</li>
<li><p>You can look at <code>public_tests_obj.py</code> for examples of the function calls.</p>
</li>
<li><p>You will find a comment like <code># ASSIGNMENT: replace this with your code</code> everywhere you have work to do.</p>
<p>​	<u>Line：41；57；67；81；92；122</u></p>
</li>
<li><p>Keep working until all the tests pass when you run <code>public_tests_obj.py</code>.</p>
</li>
</ul>
</li>
<li><p><strong>Code to be graded.</strong> Once all tests pass, submit <code>assignment.py</code> to the Canvas. This will be the basis for grading your code.</p>
</li>
<li><p><strong>Analysis to be graded.</strong> For the analysis part of the assignment, look at the output of <code>assignment.py</code> and submit a brief but clear written response in a PDF file, named <code>writeup.pdf</code>.  (Note that, particularly if you are not very familiar with U.S. politics, you are welcome to discuss the data you’re looking at with other other people – as long as you state explicitly in your writeup that you have done so, and of course you need to write your answers in your own words.)</p>
<p>– <em>Looking at frequency.</em> The first set of outputs are lists of the top Democratic and Republican bigrams by frequency.  Looking at these lists, how similar or different are the most-frequent bigrams used by members of the two parties?  Are there any generalizations you can make about the two parties, at least during this time period, based on this information? If yes, discuss. If you think the answer is no, clearly explain why. Support your answer with examples.</p>
<p>看频率。第一组输出是按频率排列的民主党和共和党的前几位大词的列表。看一下这些列表，两党成员最常使用的重词有多大的相似或不同？<br>两党成员所使用的大词有多大的相似或不同？你是否可以对这两个政党做出任何概括关于这两个党，至少在这一时期，根据这些信息，你能做出什么概括吗？如果有的话。讨论一下。如果你认为答案是否定的，请明确解释原因。请用实例支持你的答案。</p>
</li>
</ul>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>运行assignment.py</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202071304966.png" alt="image-20220207130436907"></p>
<p>*:</p>
<p>​	一开始 speeches_dem.txt和speeches_rep.txt两个文件都是0kb</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Processing text <span class="keyword">from</span> <span class="built_in">input</span> file ./speeches2020_jan_to_jun.jsonl.gz</span><br><span class="line">(base) PS E:\My Drive\DATA641\Assignment1&gt; &amp; C:/ProgramData/Anaconda3/python.exe <span class="string">&quot;e:/My Drive/DATA641/Assignment1/assignment.py&quot;</span></span><br><span class="line"></span><br><span class="line">Processing text <span class="keyword">from</span> <span class="built_in">input</span> file ./speeches2020_jan_to_jun.jsonl.gz</span><br><span class="line"></span><br><span class="line">Reading <span class="keyword">and</span> cleaning text <span class="keyword">from</span> ./speeches2020_jan_to_jun.jsonl.gz</span><br><span class="line">13964it [<span class="number">00</span>:<span class="number">00</span>, <span class="number">38118.32</span>it/s]</span><br><span class="line"></span><br><span class="line">Writing Democrats<span class="string">&#x27; speeches to ./speeches_dem.txt</span></span><br><span class="line"><span class="string">Democrat speeches being written to ./speeches_dem.txt</span></span><br><span class="line"><span class="string">0it [00:00, ?it/s]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Writing Republicans&#x27;</span> speeches to ./speeches_rep.txt</span><br><span class="line">Republican speeches being written to ./speeches_rep.txt</span><br><span class="line">0it [<span class="number">00</span>:<span class="number">00</span>, ?it/s]</span><br><span class="line"></span><br><span class="line">Getting Dem unigram <span class="keyword">and</span> bigram counts</span><br><span class="line">Collecting bigram counts <span class="keyword">with</span> stopword-filtered bigrams</span><br><span class="line">Initializing spacy</span><br><span class="line">0it [<span class="number">00</span>:<span class="number">00</span>, ?it/s]</span><br><span class="line"></span><br><span class="line">Top Dem bigrams by frequency</span><br><span class="line"></span><br><span class="line">Getting Rep unigram <span class="keyword">and</span> bigram counts</span><br><span class="line">Collecting bigram counts <span class="keyword">with</span> stopword-filtered bigrams</span><br><span class="line">Initializing spacy</span><br><span class="line">0it [<span class="number">00</span>:<span class="number">00</span>, ?it/s]</span><br><span class="line"></span><br><span class="line">Top Rep bigrams by frequency</span><br></pre></td></tr></table></figure>



<blockquote>
<p>#Read in congressional speeches jsonlines, i.e. a file with one well formed json element per line.</p>
<p>#Limiting to just speeches where the chamber was the Senate, return a list of strings</p>
<p>in the following format:</p>
<p>​	‘<party>TAB<text>‘</p>
<p>where <party> and <text> refer to the elements of those names in the json.</p>
<p>Make sure to replace line-internal whitespace (one or more newlines, tabs, spaces, etc.) in text with a single space.</p>
<p>#For information on how to read from a gzipped file, rather than uncompressing and reading, see</p>
<p><a href="https://stackoverflow.com/questions/10566558/python-read-lines-from-compressed-text-files#30868178">https://stackoverflow.com/questions/10566558/python-read-lines-from-compressed-text-files#30868178</a></p>
<p>#For info on parsing jsonlines, see <a href="https://www.geeksforgeeks.org/json-loads-in-python/">https://www.geeksforgeeks.org/json-loads-in-python/</a>.</p>
<p>(There are other ways of doing it, of course.)</p>
<p>#读取国会演讲的jsonlines，即一个文件，每行有一个成型的json元素。</p>
<p>#只限于参议院的演讲，返回一个字符串的列表</p>
<p>以下列格式。</p>
<p>​	‘<party>TAB<text>‘</p>
<p>其中<party>和<text>指的是json中这些名字的元素。</p>
<p>确保将文本中的行内空白（一个或多个换行符、制表符、空格等）替换为一个空格。</p>
<p>#关于如何从压缩文件中读取，而不是解压后读取的信息，见<a href="https://stackoverflow.com/questions/10566558/python-read-lines-from-compressed-text-files#30868178">https://stackoverflow.com/questions/10566558/python-read-lines-from-compressed-text-files#30868178</a></p>
<p>#关于解析jsonlines的信息, 请看 <a href="https://www.geeksforgeeks.org/json-loads-in-python/">https://www.geeksforgeeks.org/json-loads-in-python/</a>.</p>
<p>(当然，还有其他的方法)。</p>
</blockquote>
<h3 id="运行public-tests-obj-py"><a href="#运行public-tests-obj-py" class="headerlink" title="运行public_tests.obj.py"></a>运行public_tests.obj.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(base) PS E:\My Drive\DATA641\Assignment1&gt; &amp; C:/ProgramData/Anaconda3/python.exe <span class="string">&quot;e:/My Drive/DATA641/Assignment1/public_tests_obj.py&quot;</span></span><br><span class="line">FFFF</span><br><span class="line">Reading <span class="keyword">and</span> cleaning text <span class="keyword">from</span> ./test_speeches.jsonl.gz</span><br><span class="line">1000it [<span class="number">00</span>:<span class="number">00</span>, <span class="number">33302.40</span>it/s]</span><br><span class="line">F</span><br><span class="line">======================================================================</span><br><span class="line">FAIL: test_filter_stopword_bigrams (__main__.TestBigramPublic)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;e:\My Drive\DATA641\Assignment1\public_tests_obj.py&quot;</span>, line <span class="number">56</span>, <span class="keyword">in</span> test_filter_stopword_bigrams</span><br><span class="line">    self.assertCountEqual(filtered_bigrams, output_bigrams,</span><br><span class="line">AssertionError: Element counts were <span class="keyword">not</span> equal:</span><br><span class="line">First has <span class="number">2</span>, Second has <span class="number">0</span>:  [<span class="string">&#x27;the&#x27;</span>, <span class="string">&#x27;pretty&#x27;</span>]</span><br><span class="line">First has <span class="number">1</span>, Second has <span class="number">0</span>:  [<span class="string">&#x27;fox&#x27;</span>, <span class="string">&#x27;in&#x27;</span>]</span><br><span class="line">First has <span class="number">1</span>, Second has <span class="number">0</span>:  [<span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;the&#x27;</span>] : Test failed: test_filter_stopword_bigrams</span><br><span class="line"></span><br><span class="line">======================================================================</span><br><span class="line">FAIL: test_load_stopwords (__main__.TestBigramPublic)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;e:\My Drive\DATA641\Assignment1\public_tests_obj.py&quot;</span>, line <span class="number">29</span>, <span class="keyword">in</span> test_load_stopwords</span><br><span class="line">    self.assertTrue(<span class="built_in">all</span>(x <span class="keyword">in</span> stopwords <span class="keyword">for</span> x <span class="keyword">in</span> correct_stopwords))</span><br><span class="line">AssertionError: <span class="literal">False</span> <span class="keyword">is</span> <span class="keyword">not</span> true</span><br><span class="line"></span><br><span class="line">======================================================================</span><br><span class="line">FAIL: test_ngrams (__main__.TestBigramPublic)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;e:\My Drive\DATA641\Assignment1\public_tests_obj.py&quot;</span>, line <span class="number">39</span>, <span class="keyword">in</span> test_ngrams</span><br><span class="line">    self.assertEqual(bigrams, correct_bigrams,</span><br><span class="line">AssertionError: Lists differ: [] != [[<span class="string">&#x27;the&#x27;</span>, <span class="string">&#x27;pretty&#x27;</span>], [<span class="string">&#x27;pretty&#x27;</span>, <span class="string">&#x27;brown&#x27;</span>], [[<span class="number">81</span> chars]ds<span class="string">&#x27;]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Second list contains 7 additional elements.</span></span><br><span class="line"><span class="string">First extra element 0:</span></span><br><span class="line"><span class="string">+  [&#x27;</span>fox<span class="string">&#x27;, &#x27;</span><span class="keyword">in</span><span class="string">&#x27;],</span></span><br><span class="line"><span class="string">+  [&#x27;</span><span class="keyword">in</span><span class="string">&#x27;, &#x27;</span>the<span class="string">&#x27;],</span></span><br><span class="line"><span class="string">+  [&#x27;</span>the<span class="string">&#x27;, &#x27;</span>pretty<span class="string">&#x27;],</span></span><br><span class="line"><span class="string">+  [&#x27;</span>pretty<span class="string">&#x27;, &#x27;</span>woods<span class="string">&#x27;]] : Test failed: test_ngrams got the wrong bigrams</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">======================================================================</span></span><br><span class="line"><span class="string">FAIL: test_normalize_tokens (__main__.TestBigramPublic)</span></span><br><span class="line"><span class="string">----------------------------------------------------------------------</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;e:\My Drive\DATA641\Assignment1\public_tests_obj.py&quot;, line 67, in test_normalize_tokens</span></span><br><span class="line"><span class="string">    self.assertListEqual(normalized_toks, correct_output,</span></span><br><span class="line"><span class="string">AssertionError: Lists differ: [&#x27;</span>I<span class="string">&#x27;, &#x27;</span>saw<span class="string">&#x27;, &#x27;</span>@psresnik<span class="string">&#x27;, &quot;&#x27;</span>s<span class="string">&quot;, &#x27;page&#x27;, &#x27;at[39 chars]url&#x27;] != [&#x27;i&#x27;, &#x27;saw&#x27;, &quot;</span><span class="string">&#x27;s&quot;, &#x27;</span>page<span class="string">&#x27;, &#x27;</span>at<span class="string">&#x27;, &#x27;</span>http://um[<span class="number">26</span> chars]url<span class="string">&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">First differing element 0:</span></span><br><span class="line"><span class="string">&#x27;</span>I<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span>i<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">First list contains 1 additional elements.</span></span><br><span class="line"><span class="string">First extra element 6:</span></span><br><span class="line"><span class="string">&#x27;</span>http://umiacs.umd.edu/~resnik/this_url<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+ [&#x27;</span>i<span class="string">&#x27;, &#x27;</span>saw<span class="string">&#x27;, &quot;&#x27;</span>s<span class="string">&quot;, &#x27;page&#x27;, &#x27;at&#x27;, &#x27;http://umiacs.umd.edu/~resnik/this+url&#x27;]</span></span><br><span class="line"><span class="string">- [&#x27;I&#x27;,</span></span><br><span class="line"><span class="string">-  &#x27;saw&#x27;,</span></span><br><span class="line"><span class="string">-  &#x27;@psresnik&#x27;,</span></span><br><span class="line"><span class="string">-  &quot;</span><span class="string">&#x27;s&quot;,</span></span><br><span class="line"><span class="string">-  &#x27;</span>page<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">-  &#x27;</span>at<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">-  &#x27;</span>http://umiacs.umd.edu/~resnik/this_url<span class="string">&#x27;] : Test failed: test_normalize_tokens</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">======================================================================</span></span><br><span class="line"><span class="string">FAIL: test_read_and_clean_lines (__main__.TestBigramPublic)</span></span><br><span class="line"><span class="string">----------------------------------------------------------------------</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;e:\My Drive\DATA641\Assignment1\public_tests_obj.py&quot;, line 20, in test_read_and_clean_lines</span></span><br><span class="line"><span class="string">    self.assertEqual(len(lines), correct_lines,</span></span><br><span class="line"><span class="string">AssertionError: 0 != 317 : Test failed: Count of Senate speeches in ./test_speeches.jsonl.gz is incorrect, should be 317</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">----------------------------------------------------------------------</span></span><br><span class="line"><span class="string">Ran 5 tests in 0.156s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">FAILED (failures=5)</span></span><br></pre></td></tr></table></figure>

<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h3><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202071524069.png" alt="image-20220207152429011"></p>
]]></content>
      <categories>
        <category>课程学习</category>
      </categories>
      <tags>
        <tag>DATA641</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2022/02/21/Docker/</url>
    <content><![CDATA[<p>Docker Tutorial</p>
<p><a href="https://www.docker.com/">https://www.docker.com/</a></p>
<span id="more"></span>

<h1 id="大佬slides的结构"><a href="#大佬slides的结构" class="headerlink" title="大佬slides的结构"></a>大佬slides的结构</h1><ol>
<li><p>Docker的定义</p>
</li>
<li><p>Docker架构</p>
<p>*：不同系统下的架构</p>
</li>
<li><p>Docker优势</p>
</li>
<li><p>Docker三个基本概念</p>
<ul>
<li>Image</li>
<li>Container</li>
<li>Repository</li>
</ul>
</li>
<li><p>Docker常用command</p>
</li>
<li><p>Dockerfile</p>
<p>构建镜像</p>
<p>使用的命令行&#x2F;参数</p>
<p>*：layered architecture</p>
<p>构建成功之后的代码运行界面</p>
</li>
<li><p>Docker文件系统</p>
<ol>
<li>AUFS&#x2F;创建容器时AUFS产生的变化</li>
<li>Volumes</li>
<li>Bind mounts</li>
</ol>
</li>
<li><p>Docker容器连接</p>
</li>
<li><p>Docker容器互联</p>
<p>*：网络结构图</p>
</li>
<li><p>Docker Compose</p>
</li>
<li><p>Docker仓库管理</p>
</li>
<li><p>References</p>
</li>
</ol>
<h2 id="pdf"><a href="#pdf" class="headerlink" title="pdf"></a>pdf</h2><div class="pdfobject-container" data-target="./DockerSlides.pdf" data-height="500px"></div>



<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://docs.docker.com/desktop/mac/install/">Install Docker Desktop on Mac</a></p>
<p>（However, to get the best experience, we recommend that you install Rosetta 2）</p>
<h3 id="自带的tutorial命令行"><a href="#自带的tutorial命令行" class="headerlink" title="自带的tutorial命令行"></a>自带的tutorial命令行</h3><p><code>docker run -d -p 80:80 docker/getting-started</code></p>
<p>![Screen Shot 2022-02-21 at 16.38.18](<a href="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/Screen">https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/Screen</a> Shot 2022-02-21 at 16.38.18.png)</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ol>
<li><p><a href="https://zh.wikipedia.org/wiki/Docker">https://zh.wikipedia.org/wiki/Docker</a></p>
</li>
<li><p><a href="https://docs.docker.com/get-started/overview/">https://docs.docker.com/get-started/overview/</a></p>
<p><a href="https://docs.docker.com/get-started/">https://docs.docker.com/get-started/</a></p>
</li>
<li><p><a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a></p>
</li>
<li><p><a href="https://yeasy.gitbook.io/docker_practice/">https://yeasy.gitbook.io/docker_practice/</a></p>
</li>
<li><p><a href="https://www.bilibili.com/read/cv15180540">https://www.bilibili.com/read/cv15180540</a></p>
<p><a href="https://www.bilibili.com/read/cv15181760">https://www.bilibili.com/read/cv15181760</a></p>
</li>
</ol>
<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><ol>
<li><a href="https://www.youtube.com/watch?v=iqqDU2crIEQ">https://www.youtube.com/watch?v=iqqDU2crIEQ</a></li>
<li><a href="https://www.youtube.com/watch?v=pTFZFxd4hOI">https://www.youtube.com/watch?v=pTFZFxd4hOI</a></li>
<li><a href="https://www.youtube.com/watch?v=3c-iBn73dDE">https://www.youtube.com/watch?v=3c-iBn73dDE</a></li>
<li><a href="https://www.youtube.com/watch?v=fqMOX6JJhGo">https://www.youtube.com/watch?v=fqMOX6JJhGo</a></li>
<li><a href="https://www.bilibili.com/video/BV1s54y1n7Ev?from=search&amp;seid=6545698363302615398&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/video/BV1s54y1n7Ev?from=search&amp;seid=6545698363302615398&amp;spm_id_from=333.337.0.0</a></li>
</ol>
<h1 id="Slides结构"><a href="#Slides结构" class="headerlink" title="Slides结构"></a>Slides结构</h1><h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><p><a href="https://docs.docker.com/get-started/overview/">https://docs.docker.com/get-started/overview/</a></p>
<h2 id="What-can-I-use-Docker-for"><a href="#What-can-I-use-Docker-for" class="headerlink" title="What can I use Docker for?"></a>What can I use Docker for?</h2><p><a href="https://docs.docker.com/get-started/overview/">https://docs.docker.com/get-started/overview/</a></p>
<p><a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a></p>
<h2 id="和传统的虚拟化方式比较"><a href="#和传统的虚拟化方式比较" class="headerlink" title="和传统的虚拟化方式比较"></a>和传统的虚拟化方式比较</h2><ul>
<li><p>Linux容器基础之LXC技术介绍：</p>
<p>描述:Docker引擎的基础是Linux容器(Linux Containers,LXC)技术,容器有效的将各个操作系统管理的资源划分到孤立的组,以便更好的在孤立的组之间平衡有冲突的资源使用需求。<br>容器可以在核心CPU本地运行指令,并不需要任何专门的解释机制;最早的容器技术可以追溯到1982年Unix系列操作系统上的chroot工具;用户操作容器就像操作一个轻量级虚拟机那样简单,也可以将容器比作为一种沙盒(Sandbox) </p>
<p>传统虚拟化</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202240942238.png" alt="传统虚拟化"></p>
<p>Docker</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202240942337.png" alt="Docker"></p>
</li>
</ul>
<p><a href="https://www.bilibili.com/read/cv15180540">https://www.bilibili.com/read/cv15180540</a></p>
<p><a href="https://yeasy.gitbook.io/docker_practice/introduction/why">https://yeasy.gitbook.io/docker_practice/introduction/why</a></p>
<p>传统虚拟化方式是在硬件层面实现虚拟化,需要有额外的虚拟机管理应用和虚拟机操作系统层，然后在该系统上运行业务所需程序;</p>
<p>Docker虚拟化方式是在宿主系统层面上实现虚拟化,直接复用本地主机的操作系统与内核，容器内没有自己的内核，所以容器内的应用进程实际运行于宿主机内核,因此更加轻量级</p>
<ul>
<li><p>什么是虚拟化技术?<br>虚拟化技术是一个通用的概念,在不同的领域有不同的理解;在计算机领域一般指的是计算机虚拟化(Computer Virtualization)或者说是服务器虚拟化;虚拟化的核心是对资源进行抽象和管理,目标往往是为了在同一个主机上运行多个系统或者应用,从而提高系统资源的利用率,同时带来降低成本,方便管理和容错和容灾等好处;</p>
<ul>
<li><p>硬件虚拟化:真正意义上的基于它的技术不多见,少数网卡中的单根多IO虚拟化等技术;</p>
</li>
<li><p>软件虚拟化(Virtualization)</p>
</li>
</ul>
<p>1.应用虚拟化</p>
<p>2.平台虚拟化:细分</p>
<p>2.1 完全虚拟化</p>
<p>2.2 硬件辅助虚拟化:利用硬件CPU辅助支持虚拟化技术Intel-VT和AND-V处理铭感指令来实现完全虚拟化的功能;</p>
<p>2.3 部分虚拟化:只对部分硬件资源进行虚拟化,客户端系统需要进行修改;</p>
<p>2.4 准虚拟化(Paravirtualization):如xen</p>
<p>2.5 操作系统级虚拟化:内核通过创建多个虚拟化的操作系统实例内核和库来隔离不同的进程,dokcer以及其他容器都在这个范畴之内; 作者：WeiyiGeek <a href="https://www.bilibili.com/read/cv15180540">https://www.bilibili.com/read/cv15180540</a> 出处：bilibili</p>
</li>
</ul>
<h2 id="为什么要用Docker"><a href="#为什么要用Docker" class="headerlink" title="为什么要用Docker"></a>为什么要用Docker</h2><h2 id="Docker的体系（architecture）"><a href="#Docker的体系（architecture）" class="headerlink" title="Docker的体系（architecture）"></a>Docker的体系（architecture）</h2><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202241004615.svg%252Bxml" alt="Docker Architecture Diagram"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202241004368.png" alt="image-20220224100436306"></p>
<h3 id="daemon"><a href="#daemon" class="headerlink" title="daemon"></a><strong>daemon</strong></h3><p>A background process that handles requests for services such as print spooling and file transfers, and is dormant when not required.</p>
<p>(指在某种条件得到满足时能自动进行工作的计算机程序)，守护程序</p>
<p>监听 Docker API 请求并管理 Docker 对象，如图像、容器、网络和卷。守护进程还可以与其他守护进程通信，以管理 Docker 服务。</p>
<h2 id="完整的Docker组成"><a href="#完整的Docker组成" class="headerlink" title="完整的Docker组成"></a>完整的Docker组成</h2><p>(1) 守护进程(Daemon)：Docker守护进程(dockerd)侦听Docker API请求并管理Docker对象,，如图像、容器、网络和卷。守护进程还可以与其他守护进程通信来管理Docker服务。</p>
<p>(2) REST API: 主要与Docker Daemon进行交互，比如Docker Cli或者直接调用REST API；</p>
<p>(3) 客户端(Docker Client): 它是与Docker交互的主要方式通过命令行接口(CLI)客户端(docker命令)，客户机将命令通过REST API发送给并执行其命令；()</p>
<p>(4) Register Repository 镜像仓库: Docker注册表存储Docker镜像，可以采用Docker Hub是公共注册仓库，或者采用企业内部自建的Harbor私有仓库;</p>
<p>(5) Image 镜像: 映像是一个只读模板，带有创建Docker容器的指令。映像通常基于另一个映像，还需要进行一些额外的定制，你可以通过Docker Hub公共镜像仓库进行拉取对应的系统或者应用镜像;</p>
<p>(6) Container 容器: 容器是映像的可运行实例。您可以使用Docker API或CLI创建、启动、停止、移动或删除容器。您可以将一个容器连接到一个或多个网络，将存储附加到它，甚至根据它的当前状态创建一个新映像。</p>
<p>(7) Services : Docker引擎支持集群模式服务允许您跨多个Docker守护进程()扩展管理容器，服务允许您定义所需的状态，例如在任何给定时间必须可用的服务副本的数量。默认情况下，服务在所有工作节点之间进行负载平衡。对于使用者来说Docker服务看起来是一个单独的应用程序</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202240916374.webp" alt="WeiyiGeek.引擎图"></p>
<h2 id="Docker内部的具体实现"><a href="#Docker内部的具体实现" class="headerlink" title="Docker内部的具体实现"></a>Docker内部的具体实现</h2><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202241112816.webp" alt="Docker 内部具体实现"></p>
<h2 id="Docker资源隔离"><a href="#Docker资源隔离" class="headerlink" title="Docker资源隔离"></a>Docker资源隔离</h2><p>Docker 本质是宿主机上的一个进程</p>
<p>•通过namespace实现资源隔离以及轻量级虚拟化容器服务</p>
<p>•通过cgroup实现了资源限制</p>
<p>•通过写时复制技术(Copy-on-write)实现了高效的文件操作</p>
<p>Docker通过由内核namespace提供实现的隔离，namespace的API包括还有在&#x2F;proc下的部分文件</p>
<p>•进程隔离：每个容器都运行在自己的进程环境中</p>
<p>•网络隔离：容器间的虚拟网络接口和 IP 地址都是分开的</p>
<p>•文件系统隔离：每个容器都有自己的 root 文件系统</p>
<p>•资源隔离和分组：使用 cgroups 将 CPU 和内存之类的资源独立分配给每个 Docker 容器</p>
<h3 id="Namespace的六项隔离"><a href="#Namespace的六项隔离" class="headerlink" title="Namespace的六项隔离"></a>Namespace的六项隔离</h3><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202241139888.webp" alt="namespace的六项隔离"></p>
<h2 id="Docker常见概念"><a href="#Docker常见概念" class="headerlink" title="Docker常见概念"></a>Docker常见概念</h2><table>
<thead>
<tr>
<th align="left">概念</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Docker 镜像(Images)</td>
<td align="left">Docker 镜像是用于创建 Docker 容器的模板，比如 Ubuntu 系统。</td>
</tr>
<tr>
<td align="left">Docker 容器(Container)</td>
<td align="left">容器是独立运行的一个或一组应用，是镜像运行时的实体。</td>
</tr>
<tr>
<td align="left">Docker 客户端(Client)</td>
<td align="left">Docker 客户端通过命令行或者其他工具使用 Docker SDK (<a href="https://docs.docker.com/develop/sdk/">https://docs.docker.com/develop/sdk/</a>) 与 Docker 的守护进程通信。</td>
</tr>
<tr>
<td align="left">Docker 主机(Host)</td>
<td align="left">一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。</td>
</tr>
<tr>
<td align="left">Docker Registry</td>
<td align="left">Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(<a href="https://hub.docker.com/">https://hub.docker.com</a>) 提供了庞大的镜像集合供使用。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <strong>&lt;仓库名&gt;:&lt;标签&gt;</strong> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <strong>latest</strong> 作为默认标签。</td>
</tr>
<tr>
<td align="left">Docker Machine</td>
<td align="left">Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure</td>
</tr>
</tbody></table>
<h1 id="指令-重要概念"><a href="#指令-重要概念" class="headerlink" title="指令+重要概念"></a>指令+重要概念</h1><h2 id="image-镜像"><a href="#image-镜像" class="headerlink" title="image 镜像"></a>image 镜像</h2><p>images 类似于虚拟机镜像，借鉴了Git利用分成分层优点，通过文件系统分层的概念实现了分层复用，极大的节约了磁盘空间；</p>
<p>简单的您可以将它理解成为<u><strong>一个面向Docker引擎的只读模板包含文件系统</strong></u> </p>
<h3 id="创建镜像的方法"><a href="#创建镜像的方法" class="headerlink" title="创建镜像的方法"></a>创建镜像的方法</h3><ol>
<li>从已有镜像的容器创建</li>
<li>基于本地模板导入：使用操作系统模板导入一个镜像文件</li>
<li>基于Dockerfile导入</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">######### 从已有镜像创建 ############</span></span><br><span class="line">$sudo docker commit [option-选项] ContainerId [Repository[:Tag]]</span><br><span class="line">$sudo docker commit -m <span class="string">&quot;xx&quot;</span> -a <span class="string">&quot;oo&quot;</span> ContainerID(被修改过的ID) [Repository[:Tag]]</span><br><span class="line"></span><br><span class="line">-a,--author=<span class="string">&quot;作者&quot;</span></span><br><span class="line"></span><br><span class="line">-m,--message=<span class="string">&quot;更改信息&quot;</span></span><br><span class="line"></span><br><span class="line">-p,--pause=ture 提交时暂停容器Container运行</span><br><span class="line"></span><br><span class="line">$sudo docker run -it centos:latest /<span class="built_in">bin</span>/bash</span><br><span class="line">[root@32a481e170c6 ~]$ touch &#123;<span class="number">1.</span><span class="number">.10</span>&#125;.txt  <span class="comment">#上面这个容器ID非常重要在进行修改之后</span></span><br><span class="line"></span><br><span class="line">$sudo docker container ls -a   <span class="comment">#查看容器记录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个新的镜像</span></span><br><span class="line">$sudo docker commit -m <span class="string">&quot;Zabbix base in Centos7&quot;</span> -a <span class="string">&quot;Weiyigeek&quot;</span> 32a481e170c6 centoszabbix:latest</span><br><span class="line">sha256:680ddb57c4b80c625ef68e113f553ee932a06f25d4685d25a0b6464cf5d60982  <span class="comment">#成功会给出一个镜像ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######### 从本地模板导入 ############</span></span><br><span class="line">$sudo cat ubuntu-<span class="number">14.04</span>.tar.gz | docker <span class="keyword">import</span> - ubuntu:<span class="number">14.04</span>  <span class="comment">#本地导入镜像命令 </span></span><br></pre></td></tr></table></figure>

<p>当该镜像在容器运行存在的时候,镜像文件默认是无法被删除的;必须停止&#x2F;删除容器ID才能删除镜像文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当同一个镜像有多个标签的时候rmi命令只是删错了该进行的标签而且,并不影响镜像文件</span></span><br><span class="line"><span class="comment">#但当只剩下一个标签的时候就要小心了,如果在停止的状态下再次使用rmi命令则会删除该镜像</span></span><br><span class="line">$ sudo docker rmi ubuntu18<span class="number">.04</span></span><br><span class="line">Untagged: ubuntu18<span class="number">.04</span>:latest</span><br><span class="line">$ sudo docker rmi ubuntu ubuntutls</span><br><span class="line">Untagged: ubuntu:latest</span><br><span class="line">Untagged:  <span class="comment">#删除了这个镜像文件的所有AUFS层</span></span><br><span class="line">ubuntu@sha256:d26d529daa4d8567167181d9d569f2a85da3c5ecaf539cace2c6223355d69981</span><br><span class="line"></span><br><span class="line">$ sudo docker rmi -f ubuntutls  <span class="comment">#强制删除</span></span><br><span class="line">Untagged: ubuntutls:latest</span><br><span class="line">Deleted: sha256:d131e0fa2585a7efbfb187f70d648aa50e251d9d3b7031edf4730ca6154e221e</span><br></pre></td></tr></table></figure>



<h3 id="镜像操作常用命令"><a href="#镜像操作常用命令" class="headerlink" title="镜像操作常用命令"></a>镜像操作常用命令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#搜索关于Archlinux镜像,输出信息不截断显示</span></span><br><span class="line">docker search --no-trunc=false [镜像名称] </span><br><span class="line"></span><br><span class="line"><span class="comment">#仓库名(Repository) 或者 标签名[不指定着默认latest,即最新]</span></span><br><span class="line"><span class="comment">#获取Hub镜像如果不指定TAG将默认选择仓库中最新颁布的镜像</span></span><br><span class="line">docker pull name/[repository[:tag]] </span><br><span class="line"></span><br><span class="line"><span class="comment">#上传到docker仓库</span></span><br><span class="line">docker push DockerHubUser用户/test:latest  </span><br><span class="line"></span><br><span class="line"><span class="comment">#列出本机已有镜像</span></span><br><span class="line">docker images   </span><br><span class="line"></span><br><span class="line"><span class="comment">#为本地镜像添加一个新标签 [注意仓库名称必须小写]</span></span><br><span class="line">docker tag 原仓库[:标签] 新仓库名[:标签]  </span><br><span class="line"></span><br><span class="line"><span class="comment">#修改镜像的标签</span></span><br><span class="line">docker tag &lt;image <span class="built_in">id</span>&gt; username/name:devel</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取镜像的详细信息</span></span><br><span class="line">docker inspect [image <span class="built_in">id</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment">#-f 获取单个属性 返回JSON</span></span><br><span class="line">docker inspect -f &#123;&#123;<span class="string">&quot;.Architecture&quot;</span>&#125;&#125; <span class="number">550</span>(images Id 前面<span class="number">3</span>位) </span><br><span class="line"></span><br><span class="line"><span class="comment">#删除镜像 镜像id|仓库名称</span></span><br><span class="line">docker rmi [&lt;image <span class="built_in">id</span>&gt;|&lt;repository&gt; ]   </span><br><span class="line"></span><br><span class="line"><span class="comment">#不建议强行删除正在容器中运行的镜像文件</span></span><br><span class="line">docker rmi -f &lt;images <span class="built_in">id</span>&gt;   </span><br><span class="line"></span><br><span class="line"><span class="comment">#将镜像文件打包存出到磁盘</span></span><br><span class="line">docker save -o 保存文件名.tar  [repository[:tag]]  </span><br><span class="line"></span><br><span class="line"><span class="comment">#将镜像文件打包存出到磁盘</span></span><br><span class="line">docker save [repository[:tag]] &gt; 保存文件名 </span><br><span class="line"></span><br><span class="line"><span class="comment">#将打包的镜像文件进行载入</span></span><br><span class="line">docker load --<span class="built_in">input</span> 保存文件名.tar  </span><br><span class="line">docker load &lt; 保存文件名.tar </span><br></pre></td></tr></table></figure>



<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202270838438.png" alt="image-20220227083846357"></p>
<h3 id="save和export的区别"><a href="#save和export的区别" class="headerlink" title="save和export的区别"></a>save和export的区别</h3><ol>
<li><p>save 与 load 命令对应即导出与导入镜像，而export与import命令对应即导出导入容器;</p>
</li>
<li><p>save 保存后 load 加载的镜像没有丢失历史和层(Layer),而容器export导出然后import导入时所有的提交历史将会丢失，这意味着您无法回滚到之前的层;</p>
</li>
<li><p>补充:通过import导入的方式镜像只有一层，而通过commit的方式生成的镜像实际是在原有的Base Image(即复写层)上又生成了一层</p>
</li>
</ol>
<h2 id="Container-容器"><a href="#Container-容器" class="headerlink" title="Container 容器"></a>Container 容器</h2><p>镜像自身只读的,容器从镜像启动的时候会在镜像的最上层创建一个可写层,镜像本身将保持不变 </p>
<h3 id="创建并运行容器的标准操作"><a href="#创建并运行容器的标准操作" class="headerlink" title="创建并运行容器的标准操作"></a>创建并运行容器的标准操作</h3><ul>
<li>检查本地是否存在指定镜像,不存在就从公有仓库下载</li>
<li>利用镜像创建并启动一个容器</li>
<li>分配一个文件系统,并在只读的镜像层外面挂载一个可读写层</li>
<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>
<li>从地址池配置一个IP地址给容器</li>
<li>执行用户指定的应用程序</li>
<li>执行完毕后容器被终止</li>
</ul>
<h3 id="启动容器有两种方式"><a href="#启动容器有两种方式" class="headerlink" title="启动容器有两种方式"></a>启动容器有两种方式</h3><ul>
<li>一种是基于镜像新建一个容器并启动</li>
<li>另外一个是将在终止状态（stopped）的容器重新启动</li>
</ul>
<h3 id="容器操作常用命令"><a href="#容器操作常用命令" class="headerlink" title="容器操作常用命令"></a>容器操作常用命令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建容器但处于停止状态</span></span><br><span class="line">docker create -it repository[:tag]</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动创建的容器</span></span><br><span class="line">docker start -a -i &lt;container <span class="built_in">id</span>&gt;   </span><br><span class="line"></span><br><span class="line"><span class="comment">#-a 参数   连接容器并打印输出或错误 -</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-i 参数   启动容器并进入交互模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建并启动容器 等同于上面两条命令</span></span><br><span class="line">docker run -t -i repository[:tag]  /<span class="built_in">bin</span>/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#-t:让Docker分配一个伪终端(pseudo-tty)并绑定在容器的标准输入上.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-i:则让容器的标准输入保持打开.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CTRL+Z 和 Exit 则退出容器Container</span></span><br><span class="line"></span><br><span class="line">docker run -d repository[:tag] /<span class="built_in">bin</span>/sh -C <span class="string">&quot;echo hello word&quot;</span> <span class="comment">#守护态运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-d 参数即可后台运行,用户无法看到容器中的信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-c 执行的Command</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--rm 添加这个标记,容器会在停止后立即删除自身   (注意：与-d不能同时使用)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--name 使用--name web 标记可以为容器重新命名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取容器的输出信息</span></span><br><span class="line">docker logs &lt;Container-<span class="built_in">id</span>&gt;      </span><br><span class="line"></span><br><span class="line"><span class="comment">#采用ps -a NAMES 进入容器</span></span><br><span class="line">docker attach [names]  </span><br><span class="line"></span><br><span class="line"><span class="comment">#docker exec 至1.3版本起可以在容器中运行命令</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;Container-<span class="built_in">id</span>&gt;  /<span class="built_in">bin</span>/bash  </span><br><span class="line"></span><br><span class="line"><span class="comment">#显示本机上的所有容器ID运行的容器ID信息</span></span><br><span class="line">docker ps -aq   </span><br><span class="line"></span><br><span class="line"><span class="comment">#重启容器</span></span><br><span class="line">docker restart &lt;container <span class="built_in">id</span>&gt;  </span><br><span class="line"></span><br><span class="line"> <span class="comment">#停止容器</span></span><br><span class="line">docker stop &lt;container <span class="built_in">id</span>&gt; </span><br><span class="line"><span class="comment">#强行终止容器 可以直接发送SIGKILL信号来终止容器</span></span><br><span class="line">docker kill &lt;cantainer <span class="built_in">id</span>&gt;  </span><br><span class="line"></span><br><span class="line"><span class="comment">#删除容器删除依赖该镜像的容器ID,前3位即可</span></span><br><span class="line">docker rm &lt;container <span class="built_in">id</span>&gt;    </span><br><span class="line"></span><br><span class="line"><span class="comment">#-f,--force=false 强制终止并删除一个运行中的容器[默认会发生SIGKILL信号]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-l,--link=false  删除容器连接但保留容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-v,--volumes=false  删除容器挂载的数据卷</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#导出容器</span></span><br><span class="line">docker export &lt;container <span class="built_in">id</span>&gt; &gt;导出文件.tar  </span><br><span class="line"></span><br><span class="line"><span class="comment">#导入容器 </span></span><br><span class="line">docker <span class="keyword">import</span> - repository[:tag] </span><br></pre></td></tr></table></figure>

<h3 id="Docker-load-与-Docker-import-的比较"><a href="#Docker-load-与-Docker-import-的比较" class="headerlink" title="Docker load 与 Docker import 的比较"></a>Docker load 与 Docker import 的比较</h3><p>描述：导入容器和导入镜像是差不多的但是实际上又是有所区别的</p>
<p>load：导入镜像存储文件到本地镜像库 </p>
<p> import：导入一个容器快照到本地镜像库</p>
<p>容器快照：文件将丢失所有的历史记录和元数据信息(即保留容器当时的快照状态),导入的时候还需要重新制定标签等元数据信息;</p>
<p>镜像存储：文件将保存完整的记录,并且体积也要大</p>
<h3 id="rm和rmi的区别"><a href="#rm和rmi的区别" class="headerlink" title="rm和rmi的区别"></a>rm和rmi的区别</h3><ul>
<li>docker rm ： 删除一个或多个 容器</li>
<li>docker rmi ： 删除一个或多个 镜像 </li>
<li>docker prune ： 用来删除不再使用的 docker 对象</li>
</ul>
<h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>一个 <strong>Docker Registry</strong> 中可以包含多个 仓库（<strong>Repository</strong>）；每个仓库可以包含多个 标签（<strong>Tag</strong>）；每个标签对应一个镜像。</p>
<p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <u>&lt;仓库名&gt;:&lt;标签&gt;</u> 的格式来指定具体是这个软件哪个版本的镜像。</p>
<p>如果不给出标签，将以 latest 作为默认标签。</p>
<p>分为公开（Public）和私有(Private)。前者有多个版本，后者为用户自己搭建</p>
<h3 id="Public"><a href="#Public" class="headerlink" title="Public"></a>Public</h3><p>Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。</p>
<p>最常使用的 Registry 公开服务是官方的 Docker Hub，这也是默认的 Registry，并拥有大量的高质量的 官方镜像。</p>
<p>除此以外，还有 Red Hat 的 Quay.io；Google 的 Google Container Registry，Kubernetes 的镜像使用的就是这个服务；代码托管平台 GitHub 推出的 ghcr.io。</p>
<h4 id="Private"><a href="#Private" class="headerlink" title="Private"></a>Private</h4><p>Docker 官方提供了 Docker Registry 镜像，可以直接使用做为私有 Registry 服务。</p>
<p>开源的 Docker Registry 镜像只提供了 Docker Registry API 的服务端实现，足以支持 docker 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。</p>
<h3 id="镜像仓库操作常用命令"><a href="#镜像仓库操作常用命令" class="headerlink" title="镜像仓库操作常用命令"></a>镜像仓库操作常用命令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#连接并初始化hub仓库 需要输入用户名和密码认证,然后存放于/root/.docker/config.json 文件中</span></span><br><span class="line">docker login   </span><br><span class="line"></span><br><span class="line"><span class="comment">#下载指定仓库到本地</span></span><br><span class="line">docker pull [repository] </span><br><span class="line"></span><br><span class="line"><span class="comment">#上传镜像到仓库</span></span><br><span class="line">docker push [imges]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建和使用私有仓库"><a href="#创建和使用私有仓库" class="headerlink" title="创建和使用私有仓库"></a>创建和使用私有仓库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p <span class="number">5000</span>:<span class="number">5000</span> registry</span><br><span class="line"><span class="comment">#默认情况下仓库创建在容器的/tmp/register目录下,-v 通过镜像文件存放在宿主机本地的指定路径/opt/data/registry上;</span></span><br><span class="line">$ docker run -d -p <span class="number">5000</span>:<span class="number">5000</span> -v /opt/data/registry:/tmp/registry registry</span><br><span class="line"></span><br><span class="line"><span class="comment">#-d:容器启动后会进入后台,用户无法看到容器中的信息.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-p:指定仓库镜像的端口.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-v:将镜像的存放位置放在本地指定的路径上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#此时会在本地启动一个私有仓库服务,监听端口为5000; 更新标签本地仓库地址并上传到私有仓库之中 </span></span><br><span class="line"><span class="comment">#更改镜像的标签 </span></span><br><span class="line">$docker tag ubuntu:<span class="number">14.04</span> <span class="number">10.0</span><span class="number">.2</span><span class="number">.2</span>:<span class="number">5000</span>/test  </span><br><span class="line"></span><br><span class="line"><span class="comment">#下载镜像</span></span><br><span class="line">$docker pull <span class="number">10.0</span><span class="number">.2</span><span class="number">.2</span>:<span class="number">5000</span>/test              </span><br><span class="line"> </span><br><span class="line"><span class="comment">#可以以这个来测试是不是存在docker 5000未授权访问漏洞</span></span><br><span class="line"><span class="comment">#上传成功后可以查看到返回的json字符串 </span></span><br><span class="line">$ curl http://<span class="number">10.0</span><span class="number">.2</span><span class="number">.2</span>:<span class="number">5000</span>/v1/search  </span><br></pre></td></tr></table></figure>

<h3 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h3><p>curl是一个开源的用于数据传输的命令行工具与库，它使用URL语法格式，支持众多传输协议。作用是发出网络请求，然后获取数据，显示在”标准输出”（stdout）上面。</p>
<h3 id="自动创建（Automated-Builds）"><a href="#自动创建（Automated-Builds）" class="headerlink" title="自动创建（Automated Builds）"></a>自动创建（Automated Builds）</h3><p>对于需要经常升级镜像内程序来说十分的方便 </p>
<ul>
<li>创建登录Docker Hub 绑定Github;</li>
<li>在Docker Hub中配置一个自动创建</li>
<li>选取一个目标网站中的项目(需要Dockerfile和分支)</li>
<li>指定Dockerfile的位置并提交创建,可以在”自动创建页面”跟踪每次创建的状态;</li>
</ul>
<p>总结：仓库管理镜像的设计理论与Git差不多,工作流程为文件分发和合作带来的众多优势</p>
<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile是一个文本格式的配置文件,其内包含了一条条的指令(Instruction),每一条指令构建一层,因此每一条指令的内容,就是描述该层应当如何构建。<br>用户可以使用Dockerfile快速创建自定义的镜像;通过它所支持的内部指令,以及使用它创建镜像的基本过程,Docker拥有”一点修改代替大量更新”的灵活之处</p>
<ul>
<li><p>文本化的镜像生成操作让其方便版本管理和自动化部署</p>
<p>方便部署</p>
</li>
<li><p>每条命令对应镜像的一层,细化操作后保证其可增量更新,复用镜像块减小镜像体积 </p>
<p>减小体积</p>
</li>
</ul>
<p>总结为一点就是**<u>将每一层修改、安装、构建、操作命令都写入到一个脚本之中</u>**。</p>
<p>[一个镜像构建时不能超过 127 层，我们需要保证了稳定的变化的命令至于上层保证了每层打包出来的 Layer 能够尽可能的复用,而不会徒增镜像的大小，影响后续拉取镜像的速度 ]</p>
<h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>•基础镜像信息：FROM &lt;image&gt; 或者 FROM &lt;image&gt;:&lt;tag&gt;</p>
<p>•维护者信息: MAINTAINER （建议使用LABEL标签进行替代,先已丢弃）</p>
<p>•镜像标签信息: LABEL</p>
<p>•镜像操作指令: RUN</p>
<p>•容器启动时执行指令: CMD</p>
<p>在编写完成Dockerfile之后可以通过docker build 命令来创建镜像,该命令读取指定路径下(包括子目录)的dockerfile(实际上是构建上下文Context),并将该路径下的内容发送给Docker服务端由它创建镜像; 因此一般建议放置Dockerfile的目录为空另外可以通过dockerignore文件(每一行添加一条匹配模式)会让Docker忽略路径下的目录和文件</p>
<h3 id="docker-镜像生成常用命令"><a href="#docker-镜像生成常用命令" class="headerlink" title="docker 镜像生成常用命令"></a>docker 镜像生成常用命令</h3><p>docker build [选项]</p>
<ul>
<li>t ：指定标签信息</li>
</ul>
<p>–build-arg &lt;参数名&gt;&#x3D;&lt;值&gt;</p>
<h3 id="构建镜像的几种方式"><a href="#构建镜像的几种方式" class="headerlink" title="构建镜像的几种方式:"></a>构建镜像的几种方式:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#docker build [选项]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-t ：指定标签信息</span></span><br><span class="line"><span class="comment">#--build-arg &lt;参数名&gt;=&lt;值&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#构建镜像的几种方式: </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1) 指定的Dockfile所在路径为/tmp/docker_builder</span></span><br><span class="line">$docker build -t [TAG/version] /tmp/docker_builder</span><br><span class="line"></span><br><span class="line"><span class="comment">#2) 支持从 URL 构建</span></span><br><span class="line">$docker build https://github.com/twang2218/gitlab-ce-zh.git<span class="comment">#:11.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3) 用给定的 tar 压缩包构建</span></span><br><span class="line">$docker build http://server/context.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#4) 从标准输入中读取 Dockerfile 进行构建</span></span><br><span class="line">$docker build - &lt; Dockerfile</span><br><span class="line">$cat Dockerfile | docker build -</span><br><span class="line"></span><br><span class="line"><span class="comment">#5) 从标准输入中读取上下文压缩包进行构建</span></span><br><span class="line"><span class="comment">#标准输入的文件格式还可以是 gzip、bzip2 以及 xz </span></span><br><span class="line">$docker build - &lt; context.tar.gz   </span><br></pre></td></tr></table></figure>

<h3 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h3><h4 id="FROM-基础镜像信息"><a href="#FROM-基础镜像信息" class="headerlink" title="FROM - 基础镜像信息"></a>FROM - 基础镜像信息</h4><p>描述:</p>
<p>尽可能使用官方镜像或者信任的镜像作为你构建镜像的基础设施,推荐使用<a href="https://hub.docker.com/_/alpine/">Alpine</a>镜像，因为它被严格控制并保持最小尺寸（目前小于 6 MB），但它仍然是一个完整的发行版。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础语法</span></span><br><span class="line"></span><br><span class="line">FROM &lt;image&gt; 或者 FROM &lt;image&gt;:&lt;tag&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用案例</span></span><br><span class="line"></span><br><span class="line">FROM alpine</span><br><span class="line">FROM golang:<span class="number">1.9</span>-alpine <span class="keyword">as</span> builder <span class="comment"># 注意：多阶段构建使用 as 来为某一阶段命名 </span></span><br></pre></td></tr></table></figure>

<h4 id="LABEL-标签信息"><a href="#LABEL-标签信息" class="headerlink" title="LABEL - 标签信息"></a>LABEL - 标签信息</h4><p>描述:</p>
<p>可以给镜像添加标签来帮助组织镜像、记录许可信息、辅助自动化构建等</p>
<p>注意:如果你的字符串包含空格，那么它必须被引用或者空格必须被转义。如果您的字符串包含内部引号字符（”），则也可以将其转义。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础语法:每个标签一行，由 LABEL 开头加上一个或多个标签对。</span></span><br><span class="line"></span><br><span class="line">LABEL key=&lt;value&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用案例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Set one or more individual labels `#`开头的行是注释内容。</span></span><br><span class="line"></span><br><span class="line">LABEL maintainer=<span class="string">&quot;WeiyiGeek&quot;</span></span><br><span class="line">LABEL vendor=<span class="string">&quot;ACME Incorporated&quot;</span></span><br><span class="line">LABEL version=<span class="number">1.1</span></span><br><span class="line">LABEL com.example.version=<span class="string">&quot;0.0.1-beta&quot;</span></span><br><span class="line">LABEL com.example.release-date=<span class="string">&quot;2015-02-12&quot;</span> </span><br></pre></td></tr></table></figure>

<p>在 1.10 之前，建议将所有标签合并为一条LABEL指令，以防止创建额外的层，但是现在这个不再是必须的了 </p>
<h4 id="MAINTAINER-维护者信息"><a href="#MAINTAINER-维护者信息" class="headerlink" title="MAINTAINER - 维护者信息"></a>MAINTAINER - 维护者信息</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础语法</span></span><br><span class="line"></span><br><span class="line">MAINTAINER key=&lt;value&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用案例</span></span><br><span class="line"></span><br><span class="line">MAINTAINER WeiyiGeek master@weiyigeek.top </span><br></pre></td></tr></table></figure>

<h4 id="RUN-镜像操作命令"><a href="#RUN-镜像操作命令" class="headerlink" title="RUN - 镜像操作命令"></a>RUN - 镜像操作命令</h4><p>描述:</p>
<p>为了保持 Dockerfile 文件的可读性，以及可维护性，建议将长的或复杂的RUN指令用反斜杠\分割成多行。</p>
<p>RUN 指令最常见的用法是安装包用的apt-get,因为该指令会安装包 </p>
<p>有几个问题需要注意 ：</p>
<ul>
<li>不要使用 RUN apt-get upgrade 或 dist-upgrade , 如果基础镜像中的某个包过时了，你应该联系它的维护者。</li>
<li>如果你确定某个特定的包比如 foo 需要升级，使用 apt-get install -y foo 就行，该指令会自动升级 foo 包。</li>
<li>最好将 RUN 多条语句汇集成为一条 apt-get update 和 apt-get install 以及 rm -rf &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists* 组合成一条 RUN 声明</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础语法</span></span><br><span class="line"></span><br><span class="line">RUN &lt;COMMAND&gt; 或者 RUN [<span class="string">&quot;executable&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用案例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如：RUN [&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;echo Hello&quot;],当命令较长时可以使用\来换行;</span></span><br><span class="line">RUN apt-get update;\</span><br><span class="line">    apt-get install -y nginx ;\</span><br><span class="line">    rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line"><span class="comment">#展示了所有关于 apt-get 的建议</span></span><br><span class="line"><span class="comment">#其中 s3cmd 指令指定了一个版本号`1.1.*`。如果之前的镜像使用的是更旧的版本，指定新的版本会导致 apt-get udpate 缓存失效并确保安装的是新版本。</span></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">    aufs-tools \</span><br><span class="line">    automake \</span><br><span class="line">    build-essential \</span><br><span class="line">    curl \</span><br><span class="line">    dpkg-sig \</span><br><span class="line">    libcap-dev \</span><br><span class="line">    libsqlite3-dev \</span><br><span class="line">    mercurial \</span><br><span class="line">    reprepro \</span><br><span class="line">    ruby1<span class="number">.9</span><span class="number">.1</span> \</span><br><span class="line">    ruby1<span class="number">.9</span><span class="number">.1</span>-dev \</span><br><span class="line">    s3cmd=<span class="number">1.1</span>.* \</span><br><span class="line"> &amp;&amp; rm -rf /var/lib/apt/lists/* </span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202270952025.png" alt="image-20220227095244915"></p>
<h4 id="CMD-容器启动时执行指令"><a href="#CMD-容器启动时执行指令" class="headerlink" title="CMD- 容器启动时执行指令"></a>CMD- 容器启动时执行指令</h4><p>描述:</p>
<p>指令用于执行目标镜像中包含的软件和任何参数, 实际上为容器提供一个默认的执行命令。</p>
<p><strong><u>在Dockerfile中CMD被用来为ENTRYPOINT指令提供参数，则CMD和ENTRYPOINT指令都应该使用exec格式</u></strong></p>
<p>当基于镜像的容器运行时将会自动执行CMD指令, 并且如果在docker run命令中指定了参数，这些参数将会覆盖在CMD指令中设置的参数。</p>
<p>多数情况下CMD 都需要一个交互式的 shell (bash, Python, perl 等)，例如 CMD [“perl”, “-de0”]，或者 CMD [“PHP”, “-a”]。使用这种形式意味着，当你执行类似docker run -it python时，你会进入一个准备好的 shell 中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础语法</span></span><br><span class="line"><span class="comment">#CMD指令有如下三种格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#exec格式</span></span><br><span class="line">CMD [<span class="string">&quot;executable&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>]</span><br><span class="line"><span class="comment">#为ENTRYPOINT提供参数</span></span><br><span class="line">CMD [<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>]</span><br><span class="line"><span class="comment">#shell格式,在/bin/bash中执行提供给需要交互的应用</span></span><br><span class="line">CMD command param1 param2</span><br><span class="line"></span><br><span class="line"><span class="comment">#基础示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#(1)如果创建镜像的目的是为了部署某个服务(比如 Apache)</span></span><br><span class="line">CMD [<span class="string">&quot;apache2&quot;</span>, <span class="string">&quot;-DFOREGROUND&quot;</span>]</span><br><span class="line"><span class="comment">#(2)如果使用 shell 格式的话,实际的命令会被包装为 sh -c 的参数的形式进行执行。比如：</span></span><br><span class="line">CMD echo $HOME <span class="comment">#在实际执行中,会将其变更为： CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo $HOME&quot; ] </span></span><br></pre></td></tr></table></figure>

<p>注意事项:</p>
<p>(1)如果用户启动容器指定了运行命令则会覆盖掉CMD指定命令,<strong><u>注意每个Dockerfile只能有一条CMD命令,如果指定了多条命令只有最后一条执行;</u></strong></p>
<p>(2)CMD 在极少的情况下才会以 CMD [“param”, “param”] 的形式与ENTRYPOINT协同使用，除非你和你的镜像使用者都对 ENTRYPOINT 的工作方式十分熟悉。</p>
<h4 id="EXPOSE-端口映射指令"><a href="#EXPOSE-端口映射指令" class="headerlink" title="EXPOSE - 端口映射指令"></a>EXPOSE - 端口映射指令</h4><p> 描述:</p>
<p>EXPOSE指令用于指定容器将要监听的端口即默认向外部的暴露的服务端口。因此你应该为你的应用程序使用常见的端口。<br>对于外部访问，用户可以在执行 docker run 时使用一个标志来指示如何将指定的端口映射到所选择的端口。 </p>
<p>#基础语法<br>EXPOSE <port> [<port>…]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#(1) 告诉dokcer服务端容器暴露的端口号,供互联系统使用; 也就是 docker run -P 时会自动随机映射 EXPOSE 的端口。</span></span><br><span class="line"></span><br><span class="line">EXPOSE <span class="number">22</span> <span class="number">80</span> <span class="number">8443</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#(2) 例如提供 Apache web 服务的镜像应该使用 80，而提供 MongoDB 服务的镜像使用 27017</span></span><br><span class="line"></span><br><span class="line">EXPOSE <span class="number">80</span> <span class="number">27017</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#(3) 指定一个范围</span></span><br><span class="line"></span><br><span class="line">EXPOSE <span class="number">30000</span>-<span class="number">40000</span> </span><br></pre></td></tr></table></figure>



<h4 id="ENV-修改环境变量指令"><a href="#ENV-修改环境变量指令" class="headerlink" title="ENV - 修改环境变量指令"></a>ENV - 修改环境变量指令</h4><p>描述:</p>
<p>为了方便新程序运行，你可以使用ENV来为容器中安装的程序更新 PATH 环境变量。例如使用ENV PATH &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;bin:$PATH来确保CMD [“nginx”]能正确运行。类似于程序中的常量，该方法可以让你只需改变 ENV 指令来自动的改变容器中的软件版本。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础语法</span></span><br><span class="line"></span><br><span class="line">ENV &lt;key&gt; &lt;value&gt;   <span class="comment">#会被后续的RUN指令使用,并在容器运行时保持;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#基础示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式1: 如RUN还是运行时的应用，都可以直接使用这里定义的环境变量。</span></span><br><span class="line">ENV PG_MAJOR <span class="number">9.3</span></span><br><span class="line">ENV PATH /usr/local/postgres-\$PG_MAJOR/<span class="built_in">bin</span>:$PATH</span><br><span class="line">RUN curl -SL http://example.com/postgre-$PG_MAJOR.tar.xz  &amp;&amp; ENV PATH /usr/local/postgres-$PG_MAJOR/<span class="built_in">bin</span>:$PATH</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式2: 将所有的环境变量定义在一条ENV语句中</span></span><br><span class="line">ENV VERSION=<span class="number">1.0</span> DEBUG=on \</span><br><span class="line">    NAME=<span class="string">&quot;Happy Feet&quot;</span> </span><br></pre></td></tr></table></figure>



<h4 id="ARG-构建参数"><a href="#ARG-构建参数" class="headerlink" title="ARG - 构建参数"></a>ARG - 构建参数</h4><p>描述:</p>
<p>构建参数和 ENV 的效果一样都是设置环境变量不同点就是容器构建完成则失效</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ARG &lt;参数名&gt; [=&lt;默认值&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用方式与Shell中一致</span></span><br><span class="line"></span><br><span class="line">$&#123;IMG_PATH&#125; </span><br></pre></td></tr></table></figure>



<h4 id="ADD-添加指定目录文件到镜像指令"><a href="#ADD-添加指定目录文件到镜像指令" class="headerlink" title="ADD - 添加指定目录文件到镜像指令"></a>ADD - 添加指定目录文件到镜像指令</h4><p>描述:</p>
<p>该命令将复制指定的源文件<src>到镜像内中的目标文件<dest>,其中<src>可以是在Dockerfile所在的目录的一个相对路径(文件或者目录)&#x2F;URL&#x2F;tar文件（本地 tar 提取和远程 URL 支持） </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础语法</span></span><br><span class="line"></span><br><span class="line">ADD &lt;src&gt; &lt;dest&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#基础示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#(1)最佳用例是将本地tar文件自动提取到镜像中</span></span><br><span class="line"></span><br><span class="line">ADD rootfs.tar.xz</span><br><span class="line"></span><br><span class="line"><span class="comment">#(2)下载后的文件权限自动设置为 600 这个自动解压缩的功能非常有用；</span></span><br><span class="line"></span><br><span class="line">ADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz</span><br><span class="line">ADD --chown=<span class="number">55</span>:mygroup files* /mydir/ </span><br></pre></td></tr></table></figure>

<p>注意事项:</p>
<p>(1)为了让镜像尽量小，最好不要使用 ADD 指令从远程 URL 获取包，而是使用 curl 和 wget。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#你可以在文件提取完之后删掉不再需要的文件来避免在镜像中额外添加一层</span></span><br><span class="line"><span class="comment">#比如尽量避免下面的用法：</span></span><br><span class="line">ADD http://example.com/big.tar.xz /usr/src/things/</span><br><span class="line">RUN tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things</span><br><span class="line">RUN make -C /usr/src/things <span class="built_in">all</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#而是应该使用下面这种方法：由于使用的管道操作，所以没有中间文件需要删除。</span></span><br><span class="line">RUN mkdir -p /usr/src/things \</span><br><span class="line">    &amp;&amp; curl -SL http://example.com/big.tar.xz \</span><br><span class="line">    | tar -xJC /usr/src/things \</span><br><span class="line">    &amp;&amp; make -C /usr/src/things <span class="built_in">all</span> </span><br></pre></td></tr></table></figure>



<h4 id="COPY-复制指定文件或者目录到容器中"><a href="#COPY-复制指定文件或者目录到容器中" class="headerlink" title="COPY - 复制指定文件或者目录到容器中"></a>COPY - 复制指定文件或者目录到容器中</h4><p>描述:</p>
<p>COPY只支持简单将本地文件拷贝到镜像中它比 ADD 更透明,所以ADD和COPY功能类似但一般优先使用 COPY ;</p>
<p>COPY 指令将从构建上下文目录中 &lt;源路径&gt; 的文件&#x2F;目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置。</p>
<p>当目标路径不存在时候自动创建,当使用本地目录作为源目录时候推荐使用COPY: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础语法</span></span><br><span class="line"></span><br><span class="line">COPY &lt;src&gt; &lt;dest&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#选项</span></span><br><span class="line"></span><br><span class="line">--<span class="keyword">from</span>=多阶段构建的镜像名称 <span class="comment">#FROM Alpine AS [名称]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#常规方式</span></span><br><span class="line"></span><br><span class="line">COPY package.json /usr/src/app/</span><br><span class="line"><span class="comment">#&lt;源路径&gt; 可以是多个,甚至可以是通配符</span></span><br><span class="line">COPY hom* /mydir/</span><br><span class="line">COPY hom?.txt /mydir/</span><br><span class="line"></span><br><span class="line"><span class="comment">#选项来改变文件的所属用户及所属组。</span></span><br><span class="line"></span><br><span class="line">COPY --chown=<span class="number">55</span>:mygroup files* /mydir/</span><br><span class="line">COPY --<span class="keyword">from</span>=<span class="number">0</span> /go/src/github.com/go/helloworld/app .  <span class="comment">#多阶段构建，从上一阶段的镜像中复制文件</span></span><br><span class="line">COPY --<span class="keyword">from</span>=nginx:latest /etc/nginx/nginx.conf /nginx.conf  <span class="comment">#复制任意镜像中的文件（但需要指定镜像名称 )</span></span><br></pre></td></tr></table></figure>

<p>Tips:</p>
<p>对于其他不需要 ADD 的自动提取功能的文件或目录，你应该使用 COPY。</p>
<p>采用CPOY –from 从上一个构建阶段拷贝文件时，使用的路径是相对于上一阶段的根目录的，此时建议复制成果时候采用绝对路径; </p>
<h4 id="ENTRYPOINT-配置容器启动进入后的执行命令-应用运行前的准备工作"><a href="#ENTRYPOINT-配置容器启动进入后的执行命令-应用运行前的准备工作" class="headerlink" title="ENTRYPOINT - 配置容器启动进入后的执行命令-应用运行前的准备工作"></a>ENTRYPOINT - 配置容器启动进入后的执行命令-应用运行前的准备工作</h4><p>描述: </p>
<p>该指令是设置镜像的主命令，其作用是允许将镜像当成命令本身来运行（使用终端提供默认选项） </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础示例</span></span><br><span class="line"><span class="comment">#exec格式推荐的格式</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;executable&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>]</span><br><span class="line"><span class="comment">#shell格式:使用ENTRYPONT指令并不可被docker run提供的参数覆盖(与CMD不同之处)</span></span><br><span class="line">ENTRYPOINT command param1 param2    <span class="comment">#shell中执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基础示例</span></span><br><span class="line"><span class="comment"># 1.例如下面的示例镜像提供了命令行工具 s3cmd:</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;s3cmd&quot;</span>]</span><br><span class="line">CMD [<span class="string">&quot;--help&quot;</span>]</span><br><span class="line"><span class="comment">#现在直接运行该镜像创建的容器会显示命令帮助: $ docker run s3cmd</span></span><br><span class="line"><span class="comment">#或者提供正确的参数来执行某个命令：$ docker run s3cmd ls s3://mybucket</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.使用ENTRYPOINT 的exec形式来设置相对稳定的默认命令和参数，然后使用任何形式的CMD指令来设置可能发生变化的参数。</span></span><br><span class="line">FROM alpine</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;top&quot;</span>, <span class="string">&quot;-b&quot;</span>]</span><br><span class="line">CMD [<span class="string">&quot;-c&quot;</span>]</span><br><span class="line"><span class="comment">#当运行容器是，可以看到只有一个top进程在运行：</span></span><br><span class="line">$ docker run -it --rm --name alpine:test top -H</span><br><span class="line">PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND</span><br><span class="line">  <span class="number">1</span> root      <span class="number">20</span>   <span class="number">0</span>   <span class="number">19744</span>   <span class="number">2336</span>   <span class="number">2080</span> R  <span class="number">0.0</span>  <span class="number">0.1</span>   <span class="number">0</span>:<span class="number">00.04</span> top</span><br><span class="line">$ docker <span class="built_in">exec</span> -it alpine:test ps aux</span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root         <span class="number">1</span>  <span class="number">2.6</span>  <span class="number">0.1</span>  <span class="number">19752</span>  <span class="number">2352</span> ?        Ss+  08:<span class="number">24</span>   <span class="number">0</span>:<span class="number">00</span> top -b -H</span><br><span class="line">root         <span class="number">7</span>  <span class="number">0.0</span>  <span class="number">0.1</span>  <span class="number">15572</span>  <span class="number">2164</span> ?        R+   08:<span class="number">25</span>   <span class="number">0</span>:<span class="number">00</span> ps aux</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.ENTRYPOINT指令的shell格式</span></span><br><span class="line"><span class="comment">#通过为ENTRYPOINT指定文本格式的参数，此参数将在`/bin /sh -c` 中进行执行</span></span><br><span class="line"><span class="comment">#该形式将使用shell处理而不是shell环境变量，并且将忽略任何的CMD或docker run运行命令行参数。</span></span><br><span class="line">FROM alpine</span><br><span class="line">ENTRYPOINT <span class="built_in">exec</span> top -b </span><br></pre></td></tr></table></figure>

<p>补充说明:</p>
<p>1.ENTRYPOINT 指令也可以结合一个辅助脚本使用，和前面命令行风格类似，即使启动工具需要不止一个步骤。 </p>
<p>2.通过ENTRYPOINT指令可以将容器设置作为可执行的文件</p>
<p> 注意：当指定多个ENTRYPOINT时候只有最后一个生效; </p>
<h4 id="VOLUME-创建本地主机或其他主机挂载点-定义匿名卷"><a href="#VOLUME-创建本地主机或其他主机挂载点-定义匿名卷" class="headerlink" title="VOLUME- 创建本地主机或其他主机挂载点-定义匿名卷"></a>VOLUME- 创建本地主机或其他主机挂载点-定义匿名卷</h4><p>描述:</p>
<p>指令用于暴露任何数据库存储文件，配置文件，或容器创建的文件和目录。强烈建议使用 VOLUME来管理镜像中的可变部分和用户可以改变的部分。</p>
<ul>
<li>VOLUME指令只是起到了声明了容器中的目录作为匿名卷，但是并没有将匿名卷绑定到宿主机指定目录的功能;</li>
<li>镜像run了一个容器的时候，docker会在安装目录下的指定目录下面生成一个目录来绑定容器的匿名卷（这个指定目录不同版本的docker会有所不同）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础示例:</span></span><br><span class="line">VOLUME [<span class="string">&quot;&lt;路径1&gt;&quot;</span>, <span class="string">&quot;&lt;路径2&gt;&quot;</span>...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实际示例:</span></span><br><span class="line"><span class="comment">#一般用来存放数据和需要保持的数据等,在运行的时候我们就可以利用 -v /Store/data(宿主机):/date(容器),数据就可以直接存在在宿主机上面;</span></span><br><span class="line">VOLUME [<span class="string">&quot;/data&quot;</span>] 作者：WeiyiGeek https://www.bilibili.com/read/cv15220707 出处：bilibili</span><br></pre></td></tr></table></figure>

<h4 id="USER-指定容器运行时名用户名或者UID"><a href="#USER-指定容器运行时名用户名或者UID" class="headerlink" title="USER- 指定容器运行时名用户名或者UID"></a>USER- 指定容器运行时名用户名或者UID</h4><p>描述:</p>
<p>如果某个服务不需要特权执行，建议使用 USER 指令切换到非 root 用户。 </p>
<p>注意事项：</p>
<p>1.在镜像中用户和用户组每次被分配的 UID&#x2F;GID 都是不确定的，下次重新构建镜像时被分配到的 UID&#x2F;GID 可能会不一样。<br>如果要依赖确定的 UID&#x2F;GID 你应该显示的指定一个 UID&#x2F;GID。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式1</span></span><br><span class="line">RUN groupadd -r postgres -g <span class="number">1001</span> &amp;&amp; useradd -r -g postgres postgres -u <span class="number">1001</span></span><br><span class="line"><span class="comment"># 方式2</span></span><br><span class="line">RUN useradd -r -u <span class="number">1001</span> -U postgres </span><br></pre></td></tr></table></figure>

<p>2.应该避免使用 sudo 命令因为它不可预期的 TTY 和信号转发行为可能造成的问题比它能解决的问题还多。如果你真的需要和 sudo 类似的功能（例如以 root 权限初始化某个守护进程，以非 root 权限执行它）你可以使用 gosu 命令; 最后为了减少层数和复杂度，避免频繁地使用 USER 来回切换用户。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础示例</span></span><br><span class="line"><span class="comment">#(1) 当服务不需要管理员权限时,可以通过该命令指定运行用户,并且可以在之前创建所需要的用户</span></span><br><span class="line">USER daemon</span><br><span class="line"></span><br><span class="line"><span class="comment">#(2)要临时获取管理员权限可以使用gosu而不使用sudo;</span></span><br><span class="line"><span class="comment">#USER 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</span></span><br><span class="line">RUN groupadd -r postgres &amp;&amp; useradd -r -g postgres postgres</span><br><span class="line">USER postgres</span><br></pre></td></tr></table></figure>



<h4 id="WORKDIR-配置工作目录"><a href="#WORKDIR-配置工作目录" class="headerlink" title="WORKDIR - 配置工作目录"></a>WORKDIR - 配置工作目录</h4><p>描述:为了清晰性和可靠性，你应该总是在WORKDIR中使用绝对路径。另外你应该使用 WORKDIR 来替代类似于 RUN cd … &amp;&amp; do-something 的指令，后者难以阅读、排错和维护。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础示例</span></span><br><span class="line"><span class="comment">#(1)为后续的RUN CMD ENTRYPOINT 指令配置工作目录</span></span><br><span class="line">WORKDIR /path/to/workdir</span><br><span class="line"></span><br><span class="line"><span class="comment">#(2)使用多个WORKDIR指令，如果后续命令参数是相对路径，则会基于首个绝对路径进行拼接。</span></span><br><span class="line">WORKDIR /a</span><br><span class="line">WORKDIR b</span><br><span class="line">WORKDIR C</span><br><span class="line">RUN pwd  <span class="comment">#最终路径是/a/b/c </span></span><br></pre></td></tr></table></figure>



<h4 id="ONBUILD-为他人做嫁衣裳"><a href="#ONBUILD-为他人做嫁衣裳" class="headerlink" title="ONBUILD - 为他人做嫁衣裳"></a>ONBUILD - 为他人做嫁衣裳</h4><p>描述:ONBUILD是一个特殊的指令在当前镜像构建时并不会被执行。**<u>只有当以当前镜像为基础镜像去构建下一级镜像的时候才会被执行</u>**。它后面跟的是其它指令比如 RUN, COPY 等</p>
<p><strong><u>Dockerfile 中的其它指令都是为了定制当前镜像而准备的，唯有 ONBUILD 是为了帮助别人定制自己而准备的。</u></strong> </p>
<h4 id="STOPSIGNAL-指定所创建镜像启动的容器接收退出的信号值"><a href="#STOPSIGNAL-指定所创建镜像启动的容器接收退出的信号值" class="headerlink" title="STOPSIGNAL - 指定所创建镜像启动的容器接收退出的信号值"></a>STOPSIGNAL - 指定所创建镜像启动的容器接收退出的信号值</h4><p>描述: 该指令设置将发送到的系统调用信号容器退出，如果不定义信号名称默认是 SIGTERM。<br>此信号可以是格式中的 SIG <NAME>, 例如 SIGKILL，或与 例如内核的系统调用表 9 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实际示例</span></span><br><span class="line">STOPSIGNAL signal </span><br></pre></td></tr></table></figure>



<h4 id="SHELL-指定其他命令执行时默认使用shell的类型"><a href="#SHELL-指定其他命令执行时默认使用shell的类型" class="headerlink" title="SHELL - 指定其他命令执行时默认使用shell的类型"></a>SHELL - 指定其他命令执行时默认使用shell的类型</h4><p>描述: </p>
<p>该指令允许使用 shell 形式覆盖命令,</p>
<ul>
<li>Linux中默认的Shell是[“&#x2F;bin&#x2F;sh”, “-c”]</li>
<li>Windows中默认的Shell是[“cmd”, “&#x2F;S”, “&#x2F;C”]</li>
<li>如果Linux中还存在备用的shell例如（zsh、csh、tcsh），我们也可以采用此种方法指定。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实际示例</span></span><br><span class="line">SHELL [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>]</span><br><span class="line">SHELL [<span class="string">&quot;powershell&quot;</span>,<span class="string">&quot;-command&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实践使用示例</span></span><br><span class="line">FROM microsoft/nanoserver</span><br><span class="line">SHELL [<span class="string">&quot;powershell&quot;</span>,<span class="string">&quot;-command&quot;</span>]</span><br><span class="line">RUN New-Item -ItemType Directory C:\Example</span><br><span class="line">ADD Execute-MyCmdlet.ps1 c:\example\</span><br><span class="line">RUN c:\example\Execute-MyCmdlet -sample <span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure>



<h4 id="HEALTHCHECK-健康检查"><a href="#HEALTHCHECK-健康检查" class="headerlink" title="HEALTHCHECK - 健康检查"></a>HEALTHCHECK - 健康检查</h4><p>描述:该命令设置检查容器健康状况的命令,它与 kubernetes 中的 Pod 探针类似</p>
<p>在没有 HEALTHCHECK 指令前Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。很多情况下这没问题，但是如果程序进入死锁状态，或者死循环状态，应用进程并不退出，但是该容器已经无法提供服务了。</p>
<p>在 1.12 以前，Docker 不会检测到容器的这种状态，从而不会重新调度，导致可能会有部分容器已经无法提供服务了却还在接受用户请求。</p>
<p>从 Docker 1.12 引入该指令HEALTHCHECK 指令是告诉 Docker 应该如何进行判断容器的状态是否正常，从而比较真实的反应容器实际状态。</p>
<p>当在一个镜像指定了 HEALTHCHECK 指令后，用其启动容器，初始状态会为 starting，在 HEALTHCHECK 指令检查成功后变为 healthy，如果连续一定次数失败，则会变为 unhealthy。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础语法</span></span><br><span class="line"><span class="comment">#命令的返回值决定了该次健康检查的成功与否：0：成功；1：失败；2：保留，不要使用这个值。</span></span><br><span class="line">HEALTHCHECK [选项] CMD &lt;命令&gt;</span><br><span class="line"><span class="comment"># 选项：</span></span><br><span class="line">--interval=&lt;间隔&gt;：两次健康检查的间隔，默认为 <span class="number">30</span> 秒；</span><br><span class="line">--timeout=&lt;时长&gt;：健康检查命令运行超时时间，如果超过这个时间本次健康检查就被视为失败默认 <span class="number">30</span> 秒；</span><br><span class="line">--retries=&lt;次数&gt;：当连续失败指定次数后，则将容器状态视为 unhealthy，默认 <span class="number">3</span> 次。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</span></span><br><span class="line">HEALTHCHECK NONE </span><br></pre></td></tr></table></figure>

<h2 id="Docker容器文件系统"><a href="#Docker容器文件系统" class="headerlink" title="Docker容器文件系统"></a>Docker容器文件系统</h2><ul>
<li>Docker 镜像代表了容器的文件系统里的内容，是容器的基础，镜像一般是通过 Dockerfile 生成的</li>
<li>Docker 的镜像是分层的，所有的镜像（除了基础镜像）都是在之前镜像的基础上加上自己这层的内容生成的</li>
<li>Docker 中每一层镜像的元数据都是存在 json 文件中的，除了静态的文件系统之外，还会包含动态的数据</li>
<li>Docker 镜像生产容器后会在此基础之上加入挂载点到安装Docker宿主机文件系统之中，并提供一个读写层(Read-Write Layer)，所以容器进程的所有操作都在读写层进行</li>
</ul>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202271016159.webp" alt="1df77b34c33c40f050fe76c25004e8599fdc09e6.png@942w_581h_progressive"></p>
<h2 id="Volume-数据卷"><a href="#Volume-数据卷" class="headerlink" title="Volume 数据卷"></a>Volume 数据卷</h2><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p>
<ul>
<li>数据卷可以在容器之间共享和重用</li>
<li>对 数据卷 的修改会立马生效</li>
<li>对 数据卷的更新，不会影响镜像</li>
<li>数据卷 默认会一直存在，即使容器被删除</li>
</ul>
<blockquote>
<p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p>
</blockquote>
<h3 id="容器中管理数据的主要两种方式"><a href="#容器中管理数据的主要两种方式" class="headerlink" title="容器中管理数据的主要两种方式"></a>容器中管理数据的主要两种方式</h3><ul>
<li>数据卷： Data Volumes</li>
<li>数据卷容器： Data Volume Dontainers</li>
</ul>
<h3 id="数据管理共享的方式"><a href="#数据管理共享的方式" class="headerlink" title="数据管理共享的方式"></a>数据管理共享的方式</h3><ul>
<li>使用数据卷容器在容器和主机</li>
<li>容器和容器之间共享数据</li>
</ul>
<h3 id="数据卷命令行"><a href="#数据卷命令行" class="headerlink" title="数据卷命令行"></a>数据卷命令行</h3><p>使用 <code>--mount</code> 标记可以指定挂载一个本地主机的目录到容器中去</p>
<p>本地目录的路径必须是绝对路径，以前使用 <code>-v</code> 参数时如果本地目录不存在 Docker 会自动为你创建一个文件夹，现在使用 <code>--mount</code> 参数时如果本地目录不存在，Docker 会报错。</p>
<p>Docker 挂载主机目录的默认权限是 <code>读写</code>，用户也可以通过增加 <code>readonly</code> 指定为 <code>只读</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ docker run -d -P \</span><br><span class="line">    --name web \</span><br><span class="line">    <span class="comment"># -v /src/webapp:/usr/share/nginx/html \</span></span><br><span class="line">    --mount <span class="built_in">type</span>=bind,source=/src/webapp,target=/usr/share/nginx/html,readonly\</span><br><span class="line">    nginx:alpine</span><br></pre></td></tr></table></figure>

<p><code>--mount</code> 标记也可以从主机挂载单个文件到容器中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ docker run --rm -it \</span><br><span class="line">   <span class="comment"># -v $HOME/.bash_history:/root/.bash_history \</span></span><br><span class="line">   --mount <span class="built_in">type</span>=bind,source=$HOME/.bash_history,target=/root/.bash_history \</span><br><span class="line">   ubuntu:<span class="number">18.04</span> \</span><br><span class="line">   bash</span><br><span class="line"></span><br><span class="line">root@2affd44b4667:/<span class="comment"># history</span></span><br><span class="line"><span class="number">1</span>  ls</span><br><span class="line"><span class="number">2</span>  diskutil <span class="built_in">list</span></span><br></pre></td></tr></table></figure>





<p>？： mount和–volumes-from的关系</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个数据卷</span></span><br><span class="line">$ docker volume create my-vol</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有数据卷</span></span><br><span class="line">$ docker volume ls</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看指定数据卷的信息</span></span><br><span class="line">$ docker volume inspect my-vol</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### 创建一个web容器并创建一个数据卷挂载到容器的/webapp目录下(默认将宿主机/根映射到容器中webapp目录中)</span></span><br><span class="line">$ sudo docker run -d -P <span class="number">5000</span> --name web(新建容器) -v /webapp(容器目录) training/webapp(镜像) python app.py</span><br><span class="line"><span class="comment"># --name 指定容器的名称</span></span><br><span class="line"><span class="comment"># -v:将镜像的存放位置放在本地指定的路径上.</span></span><br><span class="line"><span class="comment"># -P:是允许外部访问容器需要暴露的port</span></span><br><span class="line"><span class="comment"># -d:是容器的后台运行守护</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#cp 把容器文件copy到宿主机,或者把宿主机的文件copy到容器</span></span><br><span class="line"><span class="comment">#把容器的1.php拷贝到宿主机家目录</span></span><br><span class="line">$docker cp 容器<span class="built_in">id</span>或者name:/home/wwwroot/<span class="number">1.</span>php /home/Lcy/ </span><br><span class="line"><span class="comment">#把宿主机的config.php拷贝到容器 </span></span><br><span class="line">$docker cp config.php 容器<span class="built_in">id</span>或者name:/home/wwwroot/  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#挂载主机目录/文件作为数据卷：</span></span><br><span class="line"><span class="comment">#挂载一个主机目录作为数据卷 /src/webapp[主机目录]:/opt/webapp[容器目录]:rw (权限)</span></span><br><span class="line">$ sudo docker run -d -P --name web -v  /src/webapp:/opt/webapp:rw training/webapp python app.py</span><br><span class="line"><span class="comment"># Docker挂载数据卷的默认权限 rw,ro[只读]          //加入ro后数据卷的数据就无法修改了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#挂载一个本地文件作为数据卷（注意再挂载文件得时候尽量设置ro自读,防止inode不一致报错）</span></span><br><span class="line">$ sudo docker run --rm -it -v ~/.bash_history:/.bash_history ubuntu /<span class="built_in">bin</span>/bash</span><br><span class="line"><span class="comment"># --rm ：当它退出自动移除容器 即docker ps -aq 不能查询到 </span></span><br></pre></td></tr></table></figure>

<h3 id="数据卷容器命令行"><a href="#数据卷容器命令行" class="headerlink" title="数据卷容器命令行"></a>数据卷容器命令行</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先创建一个数据卷容器dbdata并在其中创建一个数据卷挂载到/dbdata上 </span></span><br><span class="line">$ sudo docker run -it -v /dbdate --name dbdate ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment">#然后在容器中进行使用 创建两个容器db1 / db2</span></span><br><span class="line">$ sudo docker run -it --volumes-<span class="keyword">from</span> dbdate --name db1 ubuntu</span><br><span class="line">$ sudo docker run -it --volumes-<span class="keyword">from</span> dbdate --name db2 ubuntu</span><br><span class="line"><span class="comment">#使用--volumes-from参数所挂载数据卷的容器自身并不需要保持运行状态</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改目录中其中任何一个文件,其他容器的该目录都会改变</span></span><br><span class="line"><span class="comment">#可以从已有挂载了容器卷的容器来挂载数据卷</span></span><br><span class="line">$ sudo docker run -d --name db2 --volumes-<span class="keyword">from</span> db1 tarining/postgresql      </span><br><span class="line"><span class="comment">#删除挂载的容器(dbdata 、 db1 、db2)数据卷饼不会被自动的删除,必须在删除最后一个挂载着它容器时显示使用Docker rm -v 命令来指定同时删除关联的容器； </span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="数据卷容器迁移数据"><a href="#数据卷容器迁移数据" class="headerlink" title="数据卷容器迁移数据"></a>数据卷容器迁移数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##可以利用数据卷容器对其中的数据卷进行备份、恢复以实现数据的迁移 </span></span><br><span class="line"><span class="comment">#备份: 创建一个worker容器 ,将本地当前目录挂载到容器中backup目录,进行选择数据目录备份压缩</span></span><br><span class="line">$ sudo docker run --volumes-<span class="keyword">from</span> dbdata -v $(pwd):/backup --name worker ubuntu tar cvf /backup/backup.tar /dbdate</span><br><span class="line"></span><br><span class="line"><span class="comment">#恢复: 首先创建一个带有数据卷的容器dbdata2</span></span><br><span class="line">$ sudo docker run -v /dbdata --name dbdata2 ubuntu /<span class="built_in">bin</span>/bash</span><br><span class="line"><span class="comment">#解压备份文件到挂载的数据卷中</span></span><br><span class="line">$ sudo docker run --volumes-<span class="keyword">from</span> dbdata2 $(pwd):/backup busybox tar xvf /backup/backup.tar </span><br></pre></td></tr></table></figure>

<h3 id="Z和z的区别"><a href="#Z和z的区别" class="headerlink" title="Z和z的区别"></a>Z和z的区别</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置selinux标签如果使用selinux，可以添加z或z选项来修改挂载到容器中的主机文件或目录的selinux标签</span></span><br><span class="line"><span class="comment">#:z选项指示绑定挂载内容在多个容器之间共享。</span></span><br><span class="line"><span class="comment">#:Z选项表示绑定挂载内容是私有和非共享的。</span></span><br><span class="line"><span class="comment">#重要:当使用绑定与服务挂载时，selinux标签(:z和:Z)以及:ro将被忽略,设置了z选项以指定多个容器可以共享绑定挂载的内容,此时不能使用——mount标记修改selinux标签</span></span><br><span class="line">docker run -d --restart=always --name app-v /disk/webapp/war/:/usr/local/tomcat/webapps:z -p <span class="number">4081</span>:<span class="number">8080</span> -e JAVA_OPTS=-Dsome.<span class="built_in">property</span>=value -e Xmx=1536m tomcat-base:<span class="number">6.0</span><span class="number">.85</span>-jre8 </span><br></pre></td></tr></table></figure>

<h3 id="总结说明"><a href="#总结说明" class="headerlink" title="总结说明"></a>总结说明</h3><ul>
<li>推荐直接挂载文件目录到容器中,如果直接挂载一个文件到容器中在使用文本编辑工具时候可能会报错;</li>
<li>可以多次使用–volumes-from参数从来多个容器挂载多个数据卷;锁挂载的容器自身并不需要保持在运行状态</li>
<li>推荐使用数据卷和数据容器之外的物理备份存储系统,如RAID或者分布式系统如Ceph,GPFS,HDFS等</li>
</ul>
<h2 id="联合文件系统（UnionFS"><a href="#联合文件系统（UnionFS" class="headerlink" title="联合文件系统（UnionFS)"></a>联合文件系统（UnionFS)</h2><p>联合文件系统（<a href="https://en.wikipedia.org/wiki/UnionFS">UnionFS</a>）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。</p>
<p>联合文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p>
<p>另外，不同 Docker 容器就可以共享一些基础的文件系统层，同时再加上自己独有的改动层，大大提高了存储的效率。</p>
<p>Docker 中使用的 AUFS（Advanced Multi-Layered Unification Filesystem）就是一种联合文件系统。 <code>AUFS</code> 支持为每一个成员目录（类似 Git 的分支）设定只读（readonly）、读写（readwrite）和写出（whiteout-able）权限, 同时 <code>AUFS</code> 里有一个类似分层的概念, 对只读权限的分支可以逻辑上进行增量地修改(不影响只读部分的)。</p>
<p>Docker 目前支持的联合文件系统包括 <code>OverlayFS</code>, <code>AUFS</code>, <code>Btrfs</code>, <code>VFS</code>, <code>ZFS</code> 和 <code>Device Mapper</code>。</p>
<p>在可能的情况下，<a href="https://docs.docker.com/storage/storagedriver/select-storage-driver/">推荐</a> 使用 <code>overlay2</code> 存储驱动，<code>overlay2</code> 是目前 Docker 默认的存储驱动，以前则是 <code>aufs</code>。你可以通过配置来使用以上提到的其他类型的存储驱动。</p>
<p>Question:存储驱动</p>
<p>Question:engine</p>
<p>Question: 容器格式</p>
<h2 id="Docker-Compose-（需要加强学习）"><a href="#Docker-Compose-（需要加强学习）" class="headerlink" title="Docker Compose （需要加强学习）"></a>Docker Compose （需要加强学习）</h2><p>Compose 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）</p>
<p>Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责实现对 Docker 容器集群的快速编排。</p>
<p>它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）</p>
<h4 id="Docker-Compose重要概念"><a href="#Docker-Compose重要概念" class="headerlink" title="Docker Compose重要概念"></a>Docker Compose重要概念</h4><ul>
<li>服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li>
<li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。</li>
</ul>
<p>Compose 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p>
<p>Compose 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 Compose来进行编排管理。</p>
<h2 id="Docker-Machine"><a href="#Docker-Machine" class="headerlink" title="Docker Machine"></a>Docker Machine</h2><p>Docker Machine 是一种可以让您在虚拟主机上安装 Docker 的工具，并可以使用 docker-machine 命令来管理主机。</p>
<p>Docker Machine 也可以集中管理所有的 docker 主机，比如快速的给 100 台服务器安装上 docker。</p>
<p>Docker Machine 管理的虚拟主机可以是机上的，也可以是云供应商，如阿里云，腾讯云，AWS，或 DigitalOcean。</p>
<p>使用 docker-machine 命令，您可以启动，检查，停止和重新启动托管主机，也可以升级 Docker 客户端和守护程序，以及配置 Docker 客户端与您的主机进行通信。</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202271110444.png" alt="image-20220227111032314"></p>
<h2 id="容器连接"><a href="#容器连接" class="headerlink" title="容器连接"></a>容器连接</h2><p><a href="https://www.bilibili.com/read/cv15185166?spm_id_from=333.999.0.0">https://www.bilibili.com/read/cv15185166?spm_id_from=333.999.0.0</a></p>
<p>Question：网络连接的原理</p>
<h3 id="实现通过端口连接到一个docker容器"><a href="#实现通过端口连接到一个docker容器" class="headerlink" title="实现通过端口连接到一个docker容器"></a>实现通过端口连接到一个docker容器</h3><p>网络端口映射</p>
<ul>
<li><strong>-P :<strong>是容器内部端口</strong>随机</strong>映射到主机的端口。</li>
<li><strong>-p :</strong> 是容器内部端口绑定到<strong>指定</strong>的主机端口。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建了一个 python 应用的容器</span></span><br><span class="line">runoob@runoob:~$ docker run -d -P training/webapp python app.py</span><br><span class="line"><span class="comment"># 另外，我们可以指定容器绑定的网络地址，比如绑定 127.0.0.1。</span></span><br><span class="line"><span class="comment">#我们使用 -P 绑定端口号，使用 docker ps 可以看到容器端口 5000 绑定主机端口 32768</span></span><br><span class="line">runoob@runoob:~$ docker ps</span><br><span class="line">CONTAINER ID    IMAGE               COMMAND            ...           PORTS                     NAMES</span><br><span class="line">fce072cc88ce    training/webapp     <span class="string">&quot;python app.py&quot;</span>    ...     <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">32768</span>-&gt;<span class="number">5000</span>/tcp   grave_hopper</span><br><span class="line"><span class="comment">#我们也可以使用 -p 标识来指定容器端口绑定到主机端口。</span></span><br><span class="line"><span class="comment">#-P :是容器内部端口随机映射到主机的端口。</span></span><br><span class="line"><span class="comment">#-p : 是容器内部端口绑定到指定的主机端口。</span></span><br><span class="line">runoob@runoob:~$ docker run -d -p <span class="number">5000</span>:<span class="number">5000</span> training/webapp python app.py</span><br><span class="line">33e4523d30aaf0258915c368e66e03b49535de0ef20317d3f639d40222ba6bc0</span><br><span class="line">runoob@runoob:~$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND           ...           PORTS                     NAMES</span><br><span class="line">33e4523d30aa        training/webapp     <span class="string">&quot;python app.py&quot;</span>   ...   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">5000</span>-&gt;<span class="number">5000</span>/tcp    berserk_bartik</span><br><span class="line">fce072cc88ce        training/webapp     <span class="string">&quot;python app.py&quot;</span>   ...   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">32768</span>-&gt;<span class="number">5000</span>/tcp   grave_hopper</span><br><span class="line"><span class="comment">#另外，我们可以指定容器绑定的网络地址，比如绑定 127.0.0.1。</span></span><br><span class="line">runoob@runoob:~$ docker run -d -p <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5001</span>:<span class="number">5000</span> training/webapp python app.py</span><br><span class="line">95c6ceef88ca3e71eaf303c2833fd6701d8d1b2572b5613b5a932dfdfe8a857c</span><br><span class="line">runoob@runoob:~$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND           ...     PORTS                                NAMES</span><br><span class="line">95c6ceef88ca        training/webapp     <span class="string">&quot;python app.py&quot;</span>   ...  <span class="number">5000</span>/tcp, <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5001</span>-&gt;<span class="number">5000</span>/tcp   adoring_stonebraker</span><br><span class="line">33e4523d30aa        training/webapp     <span class="string">&quot;python app.py&quot;</span>   ...  <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">5000</span>-&gt;<span class="number">5000</span>/tcp               berserk_bartik</span><br><span class="line">fce072cc88ce        training/webapp     <span class="string">&quot;python app.py&quot;</span>   ...    <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">32768</span>-&gt;<span class="number">5000</span>/tcp              grave_hopper</span><br><span class="line"><span class="comment">#这样我们就可以通过访问 127.0.0.1:5001 来访问容器的 5000 端口。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#docker port 命令可以让我们快捷地查看端口的绑定情况</span></span><br><span class="line">runoob@runoob:~$ docker port adoring_stonebraker <span class="number">5000</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5001</span></span><br></pre></td></tr></table></figure>

<p>上面的例子中，默认都是绑定 tcp 端口，如果要绑定 UDP 端口，可以在端口后面加上 <strong>&#x2F;udp</strong></p>
<p>Question: udp?</p>
<p>容器的<strong>链接(Linking</strong>)系统是除了端口映射外的另一种可以与容器中应用进行交换的方式;它会在源和接收容器之间创建一个隧道,接收容器可以看到源容器指定的信息</p>
<p>Docker两种方式为容器公开连接信息: </p>
<ul>
<li>环境变量</li>
<li>更新&#x2F;etc&#x2F;hosts</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先创建一个新的数据库容器,启动db容器的时候并没有使用-p与-P标记，避免了暴露数据库端口到外部网络上</span></span><br><span class="line">$sudo docker run -d --name db tranining/postgres</span><br><span class="line"></span><br><span class="line"><span class="comment">#使db容器与web容器建立互联关系;</span></span><br><span class="line"><span class="comment">#--link name:alias  其中namd是链接的容器的名称,alias是这个链接的别名.</span></span><br><span class="line">$ sudo docker run -d -P --name web --link db:db training/webapp python app.py</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用 docker ps 来查看容器的连接</span></span><br><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID IMAGE COMMAND CREATED STAT</span><br><span class="line">US PORTS NAMES</span><br><span class="line"><span class="number">349169744e49</span> training/postgres:latest su postgres -c <span class="string">&#x27;/usr About a minute ago Up About a minute 5432/tcp db, web/db&#x27;</span></span><br><span class="line"><span class="comment">#web/db这表示web 容器链接到 db 容器，web 容器将被允许访问 db 容器的信息。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用env命令来查看web容器的环境变量</span></span><br><span class="line">$sudo docker run --rm --name web1 --link db:db training/webapp env</span><br><span class="line"><span class="comment">#起点汇总DB_开头的环境变量是提供web容器连接到db使用,前缀采用大写的链接别名</span></span><br><span class="line">DB_NAME=/web2/db</span><br><span class="line">DB_PORT=tcp://<span class="number">172.17</span><span class="number">.0</span><span class="number">.5</span>:<span class="number">5432</span></span><br><span class="line">DB_PORT_5000_TCP=tcp://<span class="number">172.17</span><span class="number">.0</span><span class="number">.5</span>:<span class="number">5432</span></span><br><span class="line">DB_PORT_5000_TCP_PROTO=tcp</span><br><span class="line">DB_PORT_5000_TCP_PORT=<span class="number">5432</span></span><br><span class="line">DB_PORT_5000_TCP_ADDR=<span class="number">172.17</span><span class="number">.0</span><span class="number">.5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#同时Docker还添加host信息到父容器的/etc/hosts文件</span></span><br><span class="line">$sudo docker run -it --rm --link db:db training/webapp /<span class="built_in">bin</span>/bash</span><br><span class="line">cat /etc/hosts </span><br></pre></td></tr></table></figure>

<h4 id="跨主机实现互通"><a href="#跨主机实现互通" class="headerlink" title="跨主机实现互通"></a>跨主机实现互通</h4><p>还可以通过通过添加路由route的方式进行跨主机实现互通，但是通常情况下我们不会如此操作，只在特殊环境中使用测试。</p>
<p>比如：<code>Docker1: 172.18.0.1/24 &lt;--&gt; Gateways &lt;--&gt; 192.168.1.99 </code></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>用户可以链接多个子容器到父容器中比如连接多个web到db容器上;</p>
<p>学习额外的机制比如SDN(软件定义网络)或者NFV(网络功能虚拟化)的相关技术 </p>
<h2 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h2><p>端口映射并不是唯一把 docker 连接到另一个容器的方法。</p>
<p>docker 有一个连接系统允许将多个容器连接在一起，共享连接信息。</p>
<p>docker 连接会创建一个父子关系，其中父容器可以看到子容器的信息。</p>
<p>随着 Docker 网络的完善，强烈建议大家将容器加入自定义的 Docker 网络来连接多个容器，而不是使用 <code>--link</code> 参数。</p>
<p><a href="https://www.bilibili.com/read/cv15185166?spm_id_from=333.999.0.0">https://www.bilibili.com/read/cv15185166?spm_id_from=333.999.0.0</a></p>
<p>Question： bridge 和 overlay</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个新的Docker网络</span></span><br><span class="line">$ docker network create -d bridge my-net</span><br><span class="line"><span class="comment">#-d 参数指定 Docker 网络类型，有 bridge overlay。其中 overlay 网络类型用于 Swarm mode</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#连接容器</span></span><br><span class="line"><span class="comment">#运行一个容器并连接到新建的my—net网络</span></span><br><span class="line">$ docker run -it --rm --name busybox1 --network my-net busybox sh</span><br><span class="line"><span class="comment">#打开新的终端，再运行一个容器并加入到my-net网络</span></span><br><span class="line">$ docker run -it --rm --name busybox2 --network my-net busybox sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以再打开一个终端查看容器信息</span></span><br><span class="line">$ docker container ls</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">b47060aca56b        busybox             <span class="string">&quot;sh&quot;</span>                <span class="number">11</span> minutes ago      Up <span class="number">11</span> minutes                           busybox2</span><br><span class="line">8720575823ec        busybox             <span class="string">&quot;sh&quot;</span>                <span class="number">16</span> minutes ago      Up <span class="number">16</span> minutes                           busybox1</span><br><span class="line"></span><br><span class="line"><span class="comment">#接下来通过ping来证明busybox1容器和busybox2容器建立了互联关系</span></span><br><span class="line"><span class="comment">#在busybox1容器输入以下命令</span></span><br><span class="line">/ <span class="comment"># ping busybox2</span></span><br><span class="line">PING busybox2 (<span class="number">172.19</span><span class="number">.0</span><span class="number">.3</span>): <span class="number">56</span> data <span class="built_in">bytes</span></span><br><span class="line"><span class="number">64</span> <span class="built_in">bytes</span> <span class="keyword">from</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.3</span>: seq=<span class="number">0</span> ttl=<span class="number">64</span> time=<span class="number">0.072</span> ms</span><br><span class="line"><span class="number">64</span> <span class="built_in">bytes</span> <span class="keyword">from</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.3</span>: seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.118</span> ms</span><br><span class="line"><span class="comment">#用ping来测试链接 busybox2 容器，他就会解析成172.19.0.3</span></span><br><span class="line"><span class="comment">#同理在 busybox2 容器执行 ping busybox1，也会成功连接到。</span></span><br><span class="line">/ <span class="comment"># ping busybox1</span></span><br><span class="line">PING busybox1 (<span class="number">172.19</span><span class="number">.0</span><span class="number">.2</span>): <span class="number">56</span> data <span class="built_in">bytes</span></span><br><span class="line"><span class="number">64</span> <span class="built_in">bytes</span> <span class="keyword">from</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.2</span>: seq=<span class="number">0</span> ttl=<span class="number">64</span> time=<span class="number">0.064</span> ms</span><br><span class="line"><span class="number">64</span> <span class="built_in">bytes</span> <span class="keyword">from</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.2</span>: seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.143</span> ms</span><br><span class="line"><span class="comment">#这样，busybox1 容器和 busybox2 容器建立了互联关系</span></span><br></pre></td></tr></table></figure>

<h1 id="Question："><a href="#Question：" class="headerlink" title="Question："></a>Question：</h1><p>Question: swarm集群要不要讲</p>
<p>Question:存储驱动</p>
<p>Question:engine</p>
<p>Question: 容器格式</p>
<hr>
<h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>kerbernets</p>
<p>docker网络</p>
<p>挂载</p>
<hr>
<h1 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h1><p>最大区别：</p>
<p>进程&#x2F;程序</p>
<p>​	轻量，简单</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker实操</title>
    <url>/2022/03/05/Docker%E5%AE%9E%E6%93%8D/</url>
    <content><![CDATA[<p>基于Docker Tutorial的Docker 实操</p>
<p><a href="https://www.youtube.com/watch?v=3c-iBn73dDE&amp;t=4967s">https://www.youtube.com/watch?v=3c-iBn73dDE&amp;t=4967s</a></p>
<span id="more"></span>

<h4 id="Workflow-with-Docker"><a href="#Workflow-with-Docker" class="headerlink" title="Workflow with Docker"></a>Workflow with Docker</h4><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305025005217.png" alt="image-20220305025005217"></p>
<h4 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h4><h5 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h5><p>抓取镜像（默认最新）</p>
<h5 id="docker-run-postgres-9-6"><a href="#docker-run-postgres-9-6" class="headerlink" title="docker run postgres:9.6"></a>docker run postgres:9.6</h5><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305013150795-20220305013453274-20220305013458647.png" alt="image-20220305013150795"></p>
<p>如果本地没有镜像，则自动下载最新版</p>
<h5 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h5><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305013748490-20220305013756727-20220305013810836.png" alt="image-20220305013748490"></p>
<h5 id="docker-run-redis"><a href="#docker-run-redis" class="headerlink" title="docker run redis"></a>docker run redis</h5><p>docker run &#x3D; starts <strong><u>new container</u></strong> with a command</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305014302107-20220305014311000-20220305014315947.png" alt="image-20220305014302107"></p>
<h5 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a>docker ps</h5><p>ps 相当于 list running containers</p>
<p><u><strong>列举出运行中的容器</strong></u></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305014419761-20220305014425526-20220305014432852.png" alt="image-20220305014419761"></p>
<h5 id="ctrl-c"><a href="#ctrl-c" class="headerlink" title="ctrl + c"></a>ctrl + c</h5><p>用于终止容器</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305014629139-20220305014641821.png" alt="image-20220305014629139"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305014740934.png" alt="image-20220305014740934"></p>
<h5 id="docker-run-d"><a href="#docker-run-d" class="headerlink" title="docker run -d"></a>docker run -d</h5><p>-d : in a detached mode</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305015032043.png" alt="image-20220305015032043"></p>
<h5 id="docker-stop-ID"><a href="#docker-stop-ID" class="headerlink" title="docker stop + ID"></a>docker stop + ID</h5><p>docker stop &#x3D; stops the container</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305015154120.png" alt="image-20220305015154120"></p>
<h5 id="docker-start-ID"><a href="#docker-start-ID" class="headerlink" title="docker start + ID"></a>docker start + ID</h5><p>docker start &#x3D; starts <strong><u>stopped</u></strong> container</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305015259641.png" alt="image-20220305015259641"></p>
<h5 id="docker-ps-a"><a href="#docker-ps-a" class="headerlink" title="docker ps -a"></a>docker ps -a</h5><p>Docker ps -a &#x3D; <strong><u>lists running and stopped container</u></strong></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305015547588.png" alt="image-20220305015547588"></p>
<h5 id="docker-run-redis-4-0"><a href="#docker-run-redis-4-0" class="headerlink" title="docker run redis:4.0"></a>docker run redis:4.0</h5><p>和pull的小区别：</p>
<p>​	docker run &#x3D; pulls images <strong><u>and starts containers</u></strong></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305020133021.png" alt="image-20220305020133021"></p>
<p>同一景象不同版本，</p>
<p>ports </p>
<p><strong>CIONTAINER Port vs HOST Port</strong></p>
<ul>
<li>multiple container can run on host machine</li>
<li>laptop has only certain ports available</li>
<li>Conflict when same port on host machine</li>
</ul>
<p>具体ports信息在logs里面可以看到</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305020438704.png" alt="image-20220305020438704"></p>
<p><strong>占用相同端口之后需要人为修改绑定的端口</strong></p>
<h5 id="docker-run-p6000-6379-redis"><a href="#docker-run-p6000-6379-redis" class="headerlink" title="docker run -p6000:6379 redis"></a>docker run -p6000:6379 redis</h5><p><strong><u>主机端口绑定容器端口</u></strong></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305021250249.png" alt="image-20220305021250249"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305021307536.png" alt="image-20220305021307536"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305021717734.png" alt="image-20220305021717734"></p>
<p><strong><u>当绑定新端口，就会创造新容器</u></strong></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305021814569.png" alt="image-20220305021814569"></p>
<h5 id="docker-run-p6001-6379-redis4-0"><a href="#docker-run-p6001-6379-redis4-0" class="headerlink" title="docker run -p6001:6379 redis4.0"></a>docker run -p6001:6379 redis4.0</h5><p>不能使用同一端口了</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305021923857.png" alt="image-20220305021923857"></p>
<h5 id="docker-logs-ID-x2F-Name"><a href="#docker-logs-ID-x2F-Name" class="headerlink" title="docker logs + ID&#x2F;Name"></a>docker logs + ID&#x2F;<strong><u>Name</u></strong></h5><p>搭配docker ps（查看docker ID）就可以查看logs</p>
<h5 id="docker-run-d-p-6001-6379-–name-redis-older-redis-4-0"><a href="#docker-run-d-p-6001-6379-–name-redis-older-redis-4-0" class="headerlink" title="docker run -d -p 6001:6379 –name redis-older redis:4.0"></a>docker run -d -p 6001:6379 –name redis-older redis:4.0</h5><p>–name 重命名</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305022928557.png" alt="image-20220305022928557"></p>
<p>重命名之后查看logs会简单很多</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305023106728.png" alt="image-20220305023106728"></p>
<h5 id="docker-exec-it-ID或者name-x2F-bin-x2F-bash"><a href="#docker-exec-it-ID或者name-x2F-bin-x2F-bash" class="headerlink" title="docker exec -it ID或者name &#x2F;bin&#x2F;bash"></a>docker exec -it ID或者name &#x2F;bin&#x2F;bash</h5><p>*: bash后面没有&#x2F;</p>
<p>docker exec 命令用于在运行容器中运行命令。 该命令开始使用 docker exec 只在容器的主进程(PID 1)运行时运行，并且如果容器重新启动，则不重新启动该命令。</p>
<p>如果从这个容器退出，容器不会停止，这就是为什么推荐大家使用 <strong>docker exec</strong> 的原因。</p>
<ul>
<li>-i : 交互式操作。</li>
<li>-t : 终端</li>
<li>&#x2F;bin&#x2F;bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 &#x2F;bin&#x2F;bash</li>
</ul>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305023755035.png" alt="image-20220305023755035"></p>
<p>退出exec</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305023900771.png" alt="image-20220305023900771"></p>
<h5 id="docker-run-vs-start"><a href="#docker-run-vs-start" class="headerlink" title="docker run vs start"></a>docker run vs start</h5><ul>
<li>docker run will take an image with a specific version(attributes)</li>
</ul>
<p>​		<strong><u>is used to create a new container</u></strong></p>
<p>​	docker run -d -p –name </p>
<ul>
<li>docker start is working with container</li>
</ul>
<p>​		<strong><u>is used to restart a stopped container</u></strong></p>
<h5 id="docker-rm-f-ID"><a href="#docker-rm-f-ID" class="headerlink" title="docker rm -f ID"></a>docker rm -f ID</h5><p>删除container</p>
<p>*： </p>
<p>docker container prune</p>
<p>清理掉所有处于终止状态的容器。</p>
<h5 id="docker-network-ls"><a href="#docker-network-ls" class="headerlink" title="docker network ls"></a>docker network ls</h5><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305045344896.png" alt="image-20220305045344896"></p>
<h5 id="docker-network-create-Name"><a href="#docker-network-create-Name" class="headerlink" title="docker network create Name"></a>docker network create Name</h5><p>创建docker网络</p>
<p>-e: 设置环境变量</p>
<p>可以在docker hub上找到<a href="https://hub.docker.com/_/mongo">https://hub.docker.com/_/mongo</a></p>
<h5 id="start-mongodb"><a href="#start-mongodb" class="headerlink" title="start mongodb"></a>start mongodb</h5><p>docker run -d \</p>
<p>-p 27017:27017 \</p>
<p>-e MONGO_INITDB_ROOT_USERNAME&#x3D;admin \</p>
<p>-e MONGO_INITDB_ROOT_PASSWORD&#x3D;password \</p>
<p>–net mongo-network \</p>
<p>–name mongodb \</p>
<p>mongo</p>
<h5 id="start-mongo-express"><a href="#start-mongo-express" class="headerlink" title="start mongo-express"></a>start mongo-express</h5><p>docker run -d \</p>
<p>-p 8081:8081 \</p>
<p>-e ME_CONFIG_MONGODB_ADMINUSERNAME&#x3D;admin \</p>
<p>-e ME_CONFIG_MONGODB_ADMINPASSWORD&#x3D;password \</p>
<p>-e ME_CONFIG_MONGODB_SERVER&#x3D;mongodb \</p>
<p>–net mongo-network \</p>
<p>–name mongo-express\</p>
<p>mongo-express</p>
<p>docker run -d  -p 8081:8081  -e ME_CONFIG_MONGODB_ADMINUSERNAME&#x3D;admin  -e ME_CONFIG_MONGODB_ADMINPASSWORD&#x3D;password -e ME_CONFIG_MONGODB_SERVER&#x3D;mongodb –net mongo-network –name mongo-express mongo-express</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305051359394.png" alt="image-20220305051359394"></p>
<p><strong><u>用\换行</u></strong></p>
<h5 id="mongodb报错"><a href="#mongodb报错" class="headerlink" title="mongodb报错"></a>mongodb报错</h5><p>(base) caochao  ~   &gt; docker logs mongodb<br>about to fork child process, waiting until server is ready for connections.<br>forked process: 31</p>
<p>如何进入？docker desktop</p>
<h4 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h4><h5 id="mongo-docker-compose-yaml"><a href="#mongo-docker-compose-yaml" class="headerlink" title="mongo-docker-compose.yaml"></a>mongo-docker-compose.yaml</h5><p>version:’3’</p>
<p>services:</p>
<p>​	mongoldb:</p>
<p>​		image: mongo</p>
<p>​		ports:</p>
<p>​			- 27017:27017</p>
<p>​		environment:</p>
<p>​			- MONGO_INITDB_ROOT_USERNAME&#x3D;admin</p>
<p>​			&#96;&#96;&#96;	</p>
<p>mongo-express:</p>
<p>​		image: mongo-express</p>
<p>​		ports:</p>
<p>​			- 8080:8080</p>
<p>​		environment:</p>
<p>​			- ME_CONFIG_MONGODB_ADMINUSERNAME&#x3D;admin</p>
<p>​			&#96;&#96;&#96;</p>
<p>*: <strong><u>the network configuration is not in the docker compose</u></strong></p>
<h5 id="mongo-yaml"><a href="#mongo-yaml" class="headerlink" title="mongo.yaml"></a>mongo.yaml</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">version:&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">	<span class="attr">mongoldb:</span></span><br><span class="line"></span><br><span class="line">		<span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line"></span><br><span class="line">		<span class="attr">ports:</span></span><br><span class="line"></span><br><span class="line">			<span class="bullet">-</span> <span class="number">27017</span><span class="string">:27017</span></span><br><span class="line"></span><br><span class="line">		<span class="attr">environment:</span></span><br><span class="line"></span><br><span class="line">			<span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_USERNAME=admin</span></span><br><span class="line">			<span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_PASSWORD=password</span></span><br><span class="line"></span><br><span class="line">	<span class="attr">mongo-express:</span></span><br><span class="line"></span><br><span class="line">		<span class="attr">image:</span> <span class="string">mongo-express</span></span><br><span class="line"></span><br><span class="line">		<span class="attr">ports:</span></span><br><span class="line"></span><br><span class="line">			<span class="bullet">-</span> <span class="number">8080</span><span class="string">:8081</span></span><br><span class="line"></span><br><span class="line"> 		<span class="attr">environment:</span></span><br><span class="line"></span><br><span class="line">			<span class="bullet">-</span> <span class="string">ME_CONFIG_MONGODB_ADMINUSERNAME=admin</span></span><br><span class="line">			<span class="bullet">-</span> <span class="string">ME_CONFIG_MONGODB_ADMINPASSWORD=password</span></span><br><span class="line">			<span class="bullet">-</span> <span class="string">ME_CONFIG_MONGODB_SERVER=mongodb</span></span><br></pre></td></tr></table></figure>



<h5 id="docker-compose-f-mongo-yaml-up"><a href="#docker-compose-f-mongo-yaml-up" class="headerlink" title="docker-compose -f mongo.yaml up"></a>docker-compose -f mongo.yaml up</h5><p>up: start all the containers</p>
<h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><h5 id="Image-Environment-Blueprint"><a href="#Image-Environment-Blueprint" class="headerlink" title="Image Environment Blueprint"></a>Image Environment Blueprint</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">install node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set MONGO_DB_USERNAME=admin</span><br><span class="line"></span><br><span class="line">set MONGO_DB_PWD=password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create /home/app folder</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">copy</span> curent folder files to /home/app</span><br><span class="line"></span><br><span class="line">start the app with: <span class="string">&quot;node server.js&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="Dockerfile-1"><a href="#Dockerfile-1" class="headerlink" title="Dockerfile"></a>Dockerfile</h5><p><strong><u>COPY - executes on the HOST machine!</u></strong></p>
<p><u><strong>CMD - entrypoint command</strong></u></p>
<p>​		<u><strong>We can have multiple RUN commands</strong></u></p>
<p><strong><u>Every image is always based on another image.</u></strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">FROM node</span><br><span class="line"></span><br><span class="line">ENV MONGO_DB_USERNAME=admin \</span><br><span class="line">		MONGO_DB_PWD=password</span><br><span class="line"></span><br><span class="line">RUN mkdir -p /home/app</span><br><span class="line"></span><br><span class="line">COPY ./home/app</span><br><span class="line"></span><br><span class="line">CMD[<span class="string">&quot;node&quot;</span>,<span class="string">&quot;server.js&quot;</span>]</span><br></pre></td></tr></table></figure>

<h5 id="docker-node-x2F-17-x2F-alpine3-15-x2F-Dockerfile"><a href="#docker-node-x2F-17-x2F-alpine3-15-x2F-Dockerfile" class="headerlink" title="docker-node&#x2F;17&#x2F;alpine3.15&#x2F;Dockerfile"></a>docker-node&#x2F;<a href="https://github.com/nodejs/docker-node/tree/6256caf2c507e7aafdeb8e7f837bab51f46f99e0/17">17</a>&#x2F;<a href="https://github.com/nodejs/docker-node/tree/6256caf2c507e7aafdeb8e7f837bab51f46f99e0/17/alpine3.15">alpine3.15</a>&#x2F;Dockerfile</h5><p><a href="https://github.com/nodejs/docker-node/blob/6256caf2c507e7aafdeb8e7f837bab51f46f99e0/17/alpine3.15/Dockerfile">https://github.com/nodejs/docker-node/blob/6256caf2c507e7aafdeb8e7f837bab51f46f99e0/17/alpine3.15/Dockerfile</a></p>
<h5 id="Create-a-dockerfile-old"><a href="#Create-a-dockerfile-old" class="headerlink" title="Create a dockerfile (old)"></a>Create a dockerfile (old)</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">FROM node:<span class="number">13</span>-alpine</span><br><span class="line"></span><br><span class="line">ENV MONGO_DB_USERNAME=admin \</span><br><span class="line">		MONGO_DB_PWD=password</span><br><span class="line"></span><br><span class="line">RUN mkdir -p /home/app</span><br><span class="line"></span><br><span class="line"><span class="comment">% . /home/app 有间隔</span></span><br><span class="line">COPY . /home/app</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;node&quot;</span>,<span class="string">&quot;server.js&quot;</span>]</span><br></pre></td></tr></table></figure>

<p><em>:**<u>Name must be “Dockerfile”!</u>*</em></p>
<p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p>
<p>上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</p>
<p><strong>解析</strong>：由于 docker 的运行模式是 C&#x2F;S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p>
<p>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。</p>
<h4 id="Build-docker-image-based-on-dockerfile"><a href="#Build-docker-image-based-on-dockerfile" class="headerlink" title="Build docker image based on dockerfile"></a>Build docker image based on dockerfile</h4><h5 id="docker-build-t-my-app-1-0"><a href="#docker-build-t-my-app-1-0" class="headerlink" title="docker build -t  my-app:1.0 ."></a>docker build -t  my-app:1.0 .</h5><p><strong><u>-t: tag</u></strong></p>
<p>Q: <strong>.</strong> 代表本次执行的上下文路径</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305062139173.png" alt="image-20220305062139173"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305062234611.png" alt="image-20220305062234611"></p>
<p>App including Dockerfile is comitted to Git</p>
<p>Jenkins builds image from Dockerfile(like what we did)</p>
<h5 id="docker-run-my-app-1-0"><a href="#docker-run-my-app-1-0" class="headerlink" title="docker run my-app:1.0"></a>docker run my-app:1.0</h5><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305062604551.png" alt="image-20220305062604551"></p>
<h5 id="docker-rmi-ID"><a href="#docker-rmi-ID" class="headerlink" title="docker rmi ID"></a>docker rmi ID</h5><ul>
<li><p><u><strong>rmi删容器</strong></u></p>
</li>
<li><p><u><strong>rm删镜像</strong></u></p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305062917171.png" alt="image-20220305062917171"></p>
<p><strong><u>When you adjust the Dockerfile, you MUSt rebuild the Image</u></strong></p>
<h5 id="docker-build-t-my-app-1-0-1"><a href="#docker-build-t-my-app-1-0-1" class="headerlink" title="docker build -t my-app:1.0 ."></a>docker build -t my-app:1.0 .</h5><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305064916518.png" alt="image-20220305064916518"></p>
<h4 id="Docker-Registry"><a href="#Docker-Registry" class="headerlink" title="Docker Registry"></a>Docker Registry</h4><p><a href="https://docs.aws.amazon.com/ecr/?id=docs_gatewayaws">https://docs.aws.amazon.com/ecr/?id=docs_gatewayaws</a></p>
<h5 id="AWS-—-gt-ECR-Fully-managed-Docker-container-registry"><a href="#AWS-—-gt-ECR-Fully-managed-Docker-container-registry" class="headerlink" title="AWS —&gt; ECR (Fully-managed Docker container registry)"></a>AWS —&gt; ECR (Fully-managed Docker container registry)</h5><p>Amazon Elastic Container Registry<br>Share and deploy container software, publicly or privately   </p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305070458043.png" alt="image-20220305070458043"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305070542683.png" alt="image-20220305070542683"></p>
<p>Save different tags (versions) of the sane image</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305070707952.png" alt="image-20220305070707952"></p>
<h5 id="how-to-push"><a href="#how-to-push" class="headerlink" title="how to push"></a>how to push</h5><p>view push command </p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305070832743.png" alt="image-20220305070832743"></p>
<h5 id="push-command"><a href="#push-command" class="headerlink" title="push command"></a>push command</h5><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305070901902.png" alt="image-20220305070901902"></p>
<p> <strong><u>You always have to login to private repo! &#x3D; docker login</u></strong></p>
<p>Q: jenkin’s server?</p>
<h5 id="Pre-Requisites"><a href="#Pre-Requisites" class="headerlink" title="Pre-Requisites"></a>Pre-Requisites</h5><ol>
<li><p>AWS Cli needs to be installed</p>
<p><a href="https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html">https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html</a></p>
</li>
<li><p>Credentials configured</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305071337433.png" alt="image-20220305071337433"></p>
<p><a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth">https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth</a></p>
<p><a href="https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html">Set up AWS Credentials and Region for Development</a></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305074140673.png" alt="image-20220305074140673"></p>
<p>Solution:</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305081827581.png" alt="image-20220305081827581"></p>
<p>两个权限加上：</p>
<ul>
<li><a href="https://console.aws.amazon.com/iam/home#/policies/arn%3Aaws%3Aiam%3A%3Aaws%3Apolicy%2FAdministratorAccess">AdministratorAccess</a></li>
<li><a href="https://console.aws.amazon.com/iam/home#/policies/arn%3Aaws%3Aiam%3A%3Aaws%3Apolicy%2FAmazonEC2FullAccess">AmazonEC2FullAccess</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305081917401.png" alt="image-20220305081917401"></p>
<h5 id="push"><a href="#push" class="headerlink" title="push"></a>push</h5><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305082321830.png" alt="image-20220305082321830"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220305082338677.png" alt="image-20220305082338677"></p>
<p>push一个更新的版本</p>
<ol>
<li>docker tag my-app:1.1 429996114549.dkr.ecr.us-east-1.amazonaws.com&#x2F;my-app:1.1</li>
<li>docker push 429996114549.dkr.ecr.us-east-1.amazonaws.com&#x2F;my-app:1.1</li>
</ol>
<h5 id="如何从私人库pull一个image"><a href="#如何从私人库pull一个image" class="headerlink" title="如何从私人库pull一个image"></a>如何从私人库pull一个image</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">version:&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">	<span class="attr">my-app:</span></span><br><span class="line">		<span class="attr">image:</span> <span class="number">429996114549.</span><span class="string">dkr.ecr.us-east-1.amazonaws.com/my-app:1.0</span></span><br><span class="line">		<span class="string">ports</span></span><br><span class="line">	<span class="attr">mongoldb:</span></span><br><span class="line"></span><br><span class="line">		<span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line"></span><br><span class="line">		<span class="attr">ports:</span></span><br><span class="line"></span><br><span class="line">			<span class="bullet">-</span> <span class="number">27017</span><span class="string">:27017</span></span><br><span class="line"></span><br><span class="line">		<span class="attr">environment:</span></span><br><span class="line"></span><br><span class="line">			<span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_USERNAME=admin</span></span><br><span class="line">			<span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_PASSWORD=password</span></span><br><span class="line"></span><br><span class="line">	<span class="attr">mongo-express:</span></span><br><span class="line"></span><br><span class="line">		<span class="attr">image:</span> <span class="string">mongo-express</span></span><br><span class="line"></span><br><span class="line">		<span class="attr">ports:</span></span><br><span class="line"></span><br><span class="line">			<span class="bullet">-</span> <span class="number">8080</span><span class="string">:8081</span></span><br><span class="line"></span><br><span class="line"> 		<span class="attr">environment:</span></span><br><span class="line"></span><br><span class="line">			<span class="bullet">-</span> <span class="string">ME_CONFIG_MONGODB_ADMINUSERNAME=admin</span></span><br><span class="line">			<span class="bullet">-</span> <span class="string">ME_CONFIG_MONGODB_ADMINPASSWORD=password</span></span><br><span class="line">			<span class="bullet">-</span> <span class="string">ME_CONFIG_MONGODB_SERVER=mongodb</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Driving License</title>
    <url>/2022/01/26/Driving-License/</url>
    <content><![CDATA[<p>如何获得驾照（国内驾照+无ssn）</p>
<span id="more"></span>

<h4 id="网上资料"><a href="#网上资料" class="headerlink" title="网上资料"></a>网上资料</h4><hr>
<p><a href="https://zhuanlan.zhihu.com/p/79116559">https://zhuanlan.zhihu.com/p/79116559</a></p>
<p><a href="https://posts.careerengine.us/p/5b633a2db77a012bb38ac882">https://posts.careerengine.us/p/5b633a2db77a012bb38ac882</a></p>
<p>获取马里兰驾照所需文件：<strong>护照、I20 表格、I94 表、SSN（或无 SSN 证明）、中国驾照原件、中国驾照的认证翻译件、三小时酒精课程证书、两份 resident 证明材料。</strong></p>
<p>练习题：</p>
<p><a href="https://dmv.ny.gov/driver-license/drivers-manual-practice-tests">https://dmv.ny.gov/driver-license/drivers-manual-practice-tests</a></p>
<h4 id="贾小雪"><a href="#贾小雪" class="headerlink" title="贾小雪"></a>贾小雪</h4><hr>
<h5 id="没有学车："><a href="#没有学车：" class="headerlink" title="没有学车："></a>没有学车：</h5><p>有国内驾照，直接考</p>
<p>会开车 不需要练</p>
<h5 id="一般开销"><a href="#一般开销" class="headerlink" title="一般开销"></a>一般开销</h5><ul>
<li><p>弄个酒精测试证书和驾照翻译花了20刀</p>
</li>
<li><p>然后过了路考拿驾照 花了9刀工本费</p>
</li>
<li><p>过不了不收费 再约一次路考 只有过了才交钱</p>
</li>
</ul>
<h5 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h5><p>没有路考; 只是场地 考停车</p>
<h5 id="教学视频"><a href="#教学视频" class="headerlink" title="教学视频"></a>教学视频</h5><p>场地都一样 都是往右手倒车</p>
<p>先车头进 再车尾进 然后一个三点的项目</p>
<p><a href="https://www.youtube.com/watch?v=YjPwMx_jiWo">https://www.youtube.com/watch?v=YjPwMx_jiWo</a></p>
<p><a href="https://www.youtube.com/watch?v=Zbf3-lctqX8">https://www.youtube.com/watch?v=Zbf3-lctqX8</a></p>
<p><a href="https://www.youtube.com/watch?v=lEeek9AivZQ">https://www.youtube.com/watch?v=lEeek9AivZQ</a></p>
<p><a href="https://www.youtube.com/watch?v=S1ePz7Rlm9A">https://www.youtube.com/watch?v=S1ePz7Rlm9A</a></p>
<h4 id="CSSA"><a href="#CSSA" class="headerlink" title="CSSA"></a>CSSA</h4><hr>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202201261013242.png" alt="image-20220126101305186"></p>
]]></content>
      <categories>
        <category>UMD</category>
      </categories>
      <tags>
        <tag>UMD</tag>
      </tags>
  </entry>
  <entry>
    <title>Email writing</title>
    <url>/2022/01/22/Email-writing/</url>
    <content><![CDATA[<p><em>Recommended by Professor Duquette</em></p>
<span id="more"></span>

<blockquote>
<p>Try Purdue’s Online Writing Lab (OWL) - for all your writing needs.</p>
<p><a href="https://owl.purdue.edu/search.html">Search &#x2F;&#x2F; Purdue College of Liberal Arts</a>.</p>
<p>A search for “email-etiquette” (pops up as a search term as soon as you type in ‘email’) will return a number of relevant pages.</p>
</blockquote>
]]></content>
      <categories>
        <category>专业相关知识</category>
      </categories>
      <tags>
        <tag>专业相关知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Example</title>
    <url>/2020/04/09/Example/</url>
    <content><![CDATA[<h1 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h1><span id="more"></span>
<p>Introduction</p>
<h1 id="Part2"><a href="#Part2" class="headerlink" title="Part2"></a>Part2</h1><p>context</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>HanGong Bill</title>
    <url>/2022/01/18/HanGong-Bill/</url>
    <content><![CDATA[<p>1.17 Bill</p>
<span id="more"></span>

<p><img src="https://raw.githubusercontent.com/HenryVarro666/henryvarro666.github.io/master/images/202201182234826.png" alt="image-20220118223455776"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/henryvarro666.github.io/master/images/202201182234689.png" alt="FB28B99419BDA04F3B40051198AC40FD"></p>
]]></content>
  </entry>
  <entry>
    <title>Helm Slides Example</title>
    <url>/2022/04/02/Helm-Slides-Example/</url>
    <content><![CDATA[<p>Helm ppt</p>
<span id="more"></span>

<h2 id="三大概念"><a href="#三大概念" class="headerlink" title="三大概念"></a>三大概念</h2><p>•<strong>Chart</strong> 代表着 Helm 包。它包含在 Kubernetes 集群内部运行应用程序，工具或服务所需的所有资源定义。</p>
<p>•<strong>Repository</strong>（仓库） 是用来存放和共享 charts 的地方。</p>
<p>•<strong>Release</strong> 是运行在 Kubernetes 集群中的 chart 的实例。一个 chart 通常可以在同一个集群中安装多次。每一次安装都会创建一个新的 release。</p>
<p>•Helm 安装 charts 到 Kubernetes 集群中，每次安装都会创建一个新的 release。你可以在 Helm 的 chart repositories 中寻找新的 chart。</p>
<h2 id="Helm-架构"><a href="#Helm-架构" class="headerlink" title="Helm 架构"></a>Helm 架构</h2><p>Helm管理名为chart的Kubernetes包的工具。Helm可以做以下的事情：</p>
<p>​	•从头开始创建新的chart</p>
<p>​	•将chart打包成归档(tgz)文件</p>
<p>​	•与存储chart的仓库进行交互</p>
<p>​	•在现有的Kubernetes集群中安装和卸载chart</p>
<p>​	•管理与Helm一起安装的chart的发布周期</p>
<p>Helm重要概念：</p>
<p>​	•chart 创建Kubernetes应用程序所必需的一组信息。</p>
<p>​	•config 包含了可以合并到打包的chart中的配置信息，用于创建一个可发布的对象。</p>
<p>​	•release 是一个与特定配置相结合的chart的运行实例。</p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p><strong>Helm是一个可执行文件，执行时分成两个不同的部分</strong>：</p>
<p><strong><u>Helm客户端</u></strong> 是终端用户的命令行客户端。负责以下内容：</p>
<p>​	•本地chart开发</p>
<p>​	•管理仓库</p>
<p>​	•管理发布</p>
<p>​	•与Helm库建立接口</p>
<p>​	•发送安装的chart</p>
<p>​	•发送升级或卸载现有发布的请求</p>
<p><strong><u>Helm库</u></strong> 提供执行所有Helm操作的逻辑。与Kubernetes API服务交互并提供以下功能：</p>
<p>​	•结合chart和配置来构建版本</p>
<p>​	•将chart安装到Kubernetes中，并提供后续发布对象</p>
<p>​	•与Kubernetes交互升级和卸载chart</p>
<p>独立的Helm库封装了Helm逻辑以便不同的客户端可以使用它。</p>
<h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>•Helm客户端和库是使用Go编程语言编写的</p>
<p>•这个库使用Kubernetes客户端库与Kubernetes通信。现在，这个库使用REST+JSON。它将信息存储在Kubernetes的密钥中。 不需要自己的数据库。</p>
<p>•如果可能，配置文件是用YAML编写的。</p>
<h3 id="Helm-3变化概述"><a href="#Helm-3变化概述" class="headerlink" title="Helm 3变化概述"></a>Helm 3变化概述</h3><p>移除了Tiller:</p>
<p>​	•用client&#x2F;library结构（仅仅helm）替换了 client&#x2F;server</p>
<p>​	•安全性现在是每个用户的基础（委托给了Kubernetes用户集群安全）</p>
<p>​	•发布版本现在作为集群内的密钥存储且改变了发布对象的元数据</p>
<p>​	•发布版本是在版本命名空间的基础上持久化的并且不再是Tiller的命名空间</p>
<p>升级了Chart仓库：</p>
<p>​	•helm search 现在支持本地仓库搜索和Artifact Hub查询</p>
<p>对于以下更新的规范，Chart的apiVersion升级到了”v2”：</p>
<p>​	•动态依赖的chart依赖移动到了Chart.yaml (删除了requirements.yaml 且 requirements –&gt; dependencies)</p>
<p>​	•库chart (辅助&#x2F;公共库) 现在可以添加为动态链接的chart依赖</p>
<p>​	•Chart有个type元数据字段将chart定义为application或library的chart。默认是可渲染和安装的应用</p>
<p>​	•Helm 2 的chart (apiVersion&#x3D;v1) 依然可用</p>
<p>添加了XDG目录规范：</p>
<p>​	•Helm根目录针对存储配置文件删除和替换了XDG目录规范</p>
<p>​	•不再需要初始化Helm</p>
<p>​	•移除了helm init 和 helm home</p>
<p>其他更改：</p>
<p>​	•简化了Helm的安装和设置：</p>
<p>​		•仅针对Helm客户端 (二进制)</p>
<p>​		•按照已有范式运行</p>
<p>​	•不再默认设置local或stable仓库</p>
<p>​	•删除了crd-install钩子并用chart中的crds目录替换了，在渲染chart之前会安装所有的crd</p>
<p>​	•删除了test-failure钩子注释值，且弃用了test-success。使用test代替</p>
<p>删除&#x2F;替换&#x2F;添加的命令：</p>
<p>​	•delete –&gt; uninstall : 默认删除所有的发布记录（之前需要–purge）</p>
<p>​	•fetch –&gt; pull</p>
<p>​	•home (已删除)</p>
<p>​	•init (已删除)</p>
<p>​	•install: 需要发布名称或者–generate-name 参数</p>
<p>​	•inspect –&gt; show</p>
<p>​	•reset (已删除)</p>
<p>​	•serve (已删除)</p>
<p>​	•template: -x&#x2F;–execute 参数重命名为 -s&#x2F;–show-only</p>
<p>​	•upgrade: 添加了参数 –history-max，限制每个版本保存的最大记录数量（0表示不限制）</p>
<p>Helm 3 Go库经历了很多变化，不再兼容Helm 2库</p>
<p>发行版二进制包现在托管在 get.helm.sh</p>
<h2 id="Helm-一般惯例"><a href="#Helm-一般惯例" class="headerlink" title="Helm 一般惯例"></a>Helm 一般惯例</h2><p>Chart名称</p>
<p>​	•chart名称必须是小写字母和数字。单词之间 可以 使用横杠分隔(-)：</p>
<p>​		aws-cluster-autoscaler</p>
<p>​	•不能用大写字母也不能用下划线。点 . 符号也不行。</p>
<p>版本号</p>
<p>​	•Helm尽可能使用 SemVer 2来表示版本号。</p>
<p>格式化YAML</p>
<p>​	•YAML 文件应该按照双空格缩进(绝不要使用tab键)。</p>
<p>Helm 和 Chart的用法</p>
<p>​	•Helm 是指整个项目</p>
<p>​	•helm 是指客户端命令</p>
<p>​	•chart 不是专有名词，不需要首字母大写</p>
<p>​	•但Chart.yaml需要首字母大写，因为文件名大小写敏感</p>
<h2 id="Chart"><a href="#Chart" class="headerlink" title="Chart"></a>Chart</h2><p>•Helm使用的包格式称为 chart。 chart就是一个描述Kubernetes相关资源的文件集合。</p>
<p>•Chart是作为特定目录布局的文件被创建的。它们可以打包到要部署的版本存档中。</p>
<p>•helm pull chartrepo&#x2F;chartname</p>
<p>​		下载和查看一个发布的chart，但不安装</p>
<h2 id="‘helm-search’：查找-Charts"><a href="#‘helm-search’：查找-Charts" class="headerlink" title="‘helm search’：查找 Charts"></a>‘helm search’：查找 Charts</h2><p>•helm search hub 从 Artifact Hub 中查找并列出 helm charts。 </p>
<p>•helm search repo 从你添加（使用 helm repo add）到本地 helm 客户端中的仓库中进行查找。</p>
<h2 id="‘helm-install’：安装一个-helm-包"><a href="#‘helm-install’：安装一个-helm-包" class="headerlink" title="‘helm install’：安装一个 helm 包"></a>‘helm install’：安装一个 helm 包</h2><p>•$ helm install happy-panda bitnami&#x2F;wordpress     –generate-name</p>
<p>•NAME: happy-panda</p>
<p>•LAST DEPLOYED: Tue Jan 26 10:27:17 2021</p>
<p>•NAMESPACE: default</p>
<p>•STATUS: deployed</p>
<p>•REVISION: 1</p>
<p>•NOTES: …</p>
<p>•$ helm status <release-name> </p>
<p>​		追踪 release 的状态，或是重新读取配置信息</p>
<p>helm install 命令可以从多个来源进行安装：</p>
<p>​	•chart 的仓库</p>
<p>​	•本地 chart 压缩包</p>
<p>​		helm install foo foo-0.1.1.tgz</p>
<p>​	•解压后的 chart 目录</p>
<p>​		helm install foo path&#x2F;to&#x2F;foo</p>
<p>•完整的 URL</p>
<p>​		helm install foo <a href="https://example.com/charts/foo-1.2.3.tgz">https://example.com/charts/foo-1.2.3.tgz</a></p>
<p>•$ helm show values bitnami&#x2F;wordpress </p>
<p>​		查看 chart 中的可配置选项</p>
<p><code>$ echo &#39;&#123;mariadb.auth.database: user0db, mariadb.auth.username: user0&#125;&#39; &gt; values.yaml</code></p>
<p><code>$ helm install -f values.yaml bitnami/wordpress --generate-name</code></p>
<p>•安装过程中有两种方式传递配置数据：</p>
<p>​		–values (或 -f)：使用 YAML 文件覆盖配置。可以指定多次，优先使用最右边的文件。</p>
<p>​		–set：通过命令行的方式对指定项进行覆盖。(优先级更高)</p>
<p>•在–set 中覆盖的内容会被被保存在 ConfigMap 中</p>
<p>•helm get values <release-name> 查看指定 release 中 –set 设置的值</p>
<p>•helm upgrade –reset-values     清除 –set 中设置的值</p>
<h2 id="创建charts"><a href="#创建charts" class="headerlink" title="创建charts"></a>创建charts</h2><p>•$ helm create deis-workflow</p>
<p>•Creating deis-workflow</p>
<p>•helm lint </p>
<p>​		验证格式是否正确</p>
<p>•$ helm package deis-workflow</p>
<p>•deis-workflow-0.1.0.tgz</p>
<p>•$ helm install deis-workflow .&#x2F;deis-workflow-0.1.0.tgz</p>
<h2 id="‘helm-upgrade’：升级-release-amp-‘helm-rollback’：失败时恢复"><a href="#‘helm-upgrade’：升级-release-amp-‘helm-rollback’：失败时恢复" class="headerlink" title="‘helm upgrade’：升级 release  &amp;  ‘helm rollback’：失败时恢复"></a>‘helm upgrade’：升级 release  &amp;  ‘helm rollback’：失败时恢复</h2><p>$ helm upgrade -f panda.yaml happy-panda bitnami&#x2F;wordpress</p>
<p>•helm upgrade –install happy-panda bitnami&#x2F;wordpress</p>
<p>•查看是否已经安装版本， 如果没有，会执行安装；如果版本存在，会进行升级</p>
<p>•helm get values </p>
<p>​		查看配置值是否生效</p>
<p>•$ helm rollback happy-panda 1</p>
<p>•helm history happy-panda</p>
<p>​		查看一个特定 release 的修订版本号</p>
<h2 id="‘helm-uninstall’：卸载-release"><a href="#‘helm-uninstall’：卸载-release" class="headerlink" title="‘helm uninstall’：卸载 release"></a>‘helm uninstall’：卸载 release</h2><p>•$ helm uninstall happy-panda   –keep-history</p>
<p>•helm list  –uninstalled –all</p>
<p>​		查看当前部署的所有 release</p>
<h2 id="告诉Helm不要卸载资源"><a href="#告诉Helm不要卸载资源" class="headerlink" title="告诉Helm不要卸载资源"></a>告诉Helm不要卸载资源</h2><p>•有时在执行helm uninstall时有些资源不应该被卸载。Chart的开发者可以在资源中添加额外的说明避免被卸载。</p>
<p>•kind: Secret</p>
<p>•metadata:</p>
<p>• annotations:</p>
<p>​		“helm.sh&#x2F;resource-policy”: keep</p>
<p>•这个说明”helm.sh&#x2F;resource-policy”: keep指示Helm操作(比如helm uninstall，helm upgrade 或helm rollback)要删除时跳过删除这个资源，然而，这个资源会变成孤立的。</p>
<p>•Helm不再以任何方式管理它。 如果在已经卸载的但保留资源的版本上使用helm install –replace会出问题。</p>
<h2 id="‘helm-repo’：使用仓库"><a href="#‘helm-repo’：使用仓库" class="headerlink" title="‘helm repo’：使用仓库"></a>‘helm repo’：使用仓库</h2><p>•Helm 3 不再附带一个默认的 chart 仓库。</p>
<p>•helm repo 提供了一组命令用于添加、列出和移除仓库。</p>
<p>•helm repo list </p>
<p>​		查看配置的仓库</p>
<p>•helm repo add bitnami <a href="https://charts.bitnami.com/bitnami">https://charts.bitnami.com/bitnami</a></p>
<p>•helm repo update</p>
<p>•helm repo remove</p>
<h2 id="创建一个chart仓库"><a href="#创建一个chart仓库" class="headerlink" title="创建一个chart仓库"></a>创建一个chart仓库</h2><p>•chart仓库 是一个配置了index.yaml文件和一些已经打包chart的HTTP服务器。当你准备好分享chart时，最好的方法是将chart上传到chart仓库。</p>
<p>•注： 从Helm 2.2.0开始，客户端支持对仓库进行SSL身份认证。其他身份验证协议可以通过插件提供。</p>
<p>•由于chart仓库可以是任何服务于YAML和tar文件并响应GET请求的HTTP服务器，托管你自己的chart仓库时就有很多选择。比如可以使用Google Cloud Storage(GCS)， Amazon S3，GitHub页面，甚至创建自己的web服务器。</p>
<h2 id="chart仓库结构"><a href="#chart仓库结构" class="headerlink" title="chart仓库结构"></a>chart仓库结构</h2><p>•chart仓库由chart包和包含了仓库中所有chart索引的特殊文件index.yaml。</p>
<p>•通常描述chart的index.yaml也托管在同一个服务器上作为 来源文件(不是必须和chart包放在同一个服务器上，但是这样是最方便的)。</p>
<p>•比如，<a href="https://example.com/charts%E4%BB%93%E5%BA%93%E5%B8%83%E5%B1%80%E5%8F%AF%E8%83%BD%E7%9C%8B%E8%B5%B7%E6%9D%A5%E5%83%8F%E8%BF%99%E6%A0%B7%EF%BC%9A">https://example.com/charts仓库布局可能看起来像这样：</a></p>
<p>•charts&#x2F;</p>
<p>• |</p>
<p>• |- index.yaml</p>
<p>• |</p>
<p>• |- alpine-0.1.2.tgz</p>
<p>• |</p>
<p>• |- alpine-0.1.2.tgz.prov</p>
<p>•在这个案例中，index文件包含了Alpine这一个chart的信息，并提供了下载地址：<a href="https://example.com/charts/alpine-0.1.2.tgz%E3%80%82">https://example.com/charts/alpine-0.1.2.tgz。</a></p>
<h2 id="index文件"><a href="#index文件" class="headerlink" title="index文件"></a>index文件</h2><p>•yaml格式，包含了一些包的元信息，包括chart中Chart.yaml文件的内容。</p>
<p>•一个合法的chart仓库必须有一个index文件，包含了chart仓库中每一个chart的信息。</p>
<p>•helm repo index命令会基于给定的包含chart包的本地目录生成一个index文件。</p>
<h2 id="托管chart仓库"><a href="#托管chart仓库" class="headerlink" title="托管chart仓库"></a>托管chart仓库</h2><p>•Google Cloud存储</p>
<p>•Cloudsmith</p>
<p>•JFrog Artifactory</p>
<p>•GitHub页面</p>
<p>•普通web服务器</p>
<p>ChartMuseum 仓库服务器</p>
<h2 id="在chart仓库中存储chart"><a href="#在chart仓库中存储chart" class="headerlink" title="在chart仓库中存储chart"></a>在chart仓库中存储chart</h2><p>•$ helm package docs&#x2F;examples&#x2F;alpine&#x2F;</p>
<p>•$ mkdir fantastic-charts</p>
<p>•$ mv alpine-0.1.0.tgz fantastic-charts&#x2F;</p>
<p>•$ helm repo index fantastic-charts –url <a href="https://fantastic-charts.storage.googleapis.com/">https://fantastic-charts.storage.googleapis.com</a></p>
<p>​		(用刚才创建的本地路径和远程仓库url构建一个index.yaml文件放在给定的目录路径中)。</p>
<p>•现在你可以使用同步工具或手动上传chart和index文件到chart仓库中。如果使用的是Google Cloud Storage，使用gsutil客户端检查 示范工作流。针对于GitHub，你可以简单地将chart放在合适的目标分支中。</p>
<h2 id="添加一个新的chart到已有仓库中"><a href="#添加一个新的chart到已有仓库中" class="headerlink" title="添加一个新的chart到已有仓库中"></a>添加一个新的chart到已有仓库中</h2><p>每次你想在仓库中添加一个新的chart时，你必须重新生成index。helm repo index命令会完全无痕重建index.yaml文件。只包括在本地找到的chart。</p>
<p>不过你可以使用–merge参数增量添加新的chart到现有index.yaml文件中（使用类似GCS的远程仓库时很有用）。</p>
<p>确保订过的index.yaml文件和chart都上传了，如果生成了源文件，也要上传。</p>
<h2 id="与别人分享你的chart"><a href="#与别人分享你的chart" class="headerlink" title="与别人分享你的chart"></a>与别人分享你的chart</h2><p>准备好分享你的chart时，只需要告诉别人你的仓库地址就可以了。</p>
<p>他们会通过helm repo add [NAME] [URL]命令将仓库添加到他们的客户端，并使用想引用仓库的任何名称。</p>
<p>​	•$ helm repo add fantastic-charts <a href="https://fantastic-charts.storage.googleapis.com/">https://fantastic-charts.storage.googleapis.com</a></p>
<p>​	•$ helm repo list</p>
<p>​	•fantastic-charts  <a href="https://fantastic-charts.storage.googleapis.com/">https://fantastic-charts.storage.googleapis.com</a></p>
<p>​	•如果chart支持HTTP的基础验证，你也需要提供用户名和密码</p>
<h2 id="Chart-文件结构"><a href="#Chart-文件结构" class="headerlink" title="Chart 文件结构"></a>Chart 文件结构</h2><p>•mychart&#x2F;</p>
<p>​	•<strong>Chart.yaml</strong>      # 包含了chart信息的YAML文件</p>
<p>​	•LICENSE        # 可选: 包含chart许可证的纯文本文件</p>
<p>​	•README.md       # 可选: 可读的README文件</p>
<p>​	•<strong>values.yaml</strong>      # chart 默认的配置值</p>
<p>​	•values.schema.json  # 可选: 一个使用JSON结构的values.yaml文件</p>
<p>​	•<strong>charts&#x2F;</strong>        # 包含chart依赖的其他chart</p>
<p>​	•crds&#x2F;         # 自定义资源的定义</p>
<p>​	•<strong>templates&#x2F;</strong>       # 模板目录， 当和values 结合时，可生成有效的 Kubernetes manifest文件</p>
<p>​	•templates&#x2F;NOTES.txt  # 可选: 包含简要使用说明的纯文本文件</p>
<h2 id="Templating-Engine"><a href="#Templating-Engine" class="headerlink" title="Templating Engine"></a>Templating Engine</h2><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020836210.png" alt="image-20220402073635831"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020836126.png" alt="image-20220402073650913"></p>
<h2 id="–set-的格式和限制"><a href="#–set-的格式和限制" class="headerlink" title="–set 的格式和限制"></a>–set 的格式和限制</h2><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020837460.png" alt="image-20220402073713303"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020837411.png" alt="image-20220402073724073"></p>
<h2 id="Chart-yaml"><a href="#Chart-yaml" class="headerlink" title="Chart.yaml"></a>Chart.yaml</h2><h3 id="必需"><a href="#必需" class="headerlink" title="必需"></a>必需</h3><p>•apiVersion name version </p>
<h3 id="可选"><a href="#可选" class="headerlink" title="可选"></a>可选</h3><p>•kubeVersion description type keywords home sources </p>
<p>•dependencies maintainers（name, email, url）</p>
<p>•icon appVersion deprecated annotations</p>
<h2 id="Templates-and-Values"><a href="#Templates-and-Values" class="headerlink" title="Templates and Values"></a>Templates and Values</h2><p>Helm Chart 模板是按照 Go模板语言书写， 增加了50个左右的附加模板函数 来自 Sprig库 和一些其他 指定的函数。</p>
<p>所有模板文件存储在chart的 templates&#x2F; 文件夹。 当Helm渲染chart时，它会通过模板引擎遍历目录中的每个文件。</p>
<p>​	•NOTES.txt: chart的”帮助文本”。这会在你的用户执行helm install时展示给他们。</p>
<p>​	•deployment.yaml: 创建Kubernetes 工作负载的基本清单</p>
<p>​	•service.yaml: 为你的工作负载创建一个 service终端基本清单。</p>
<p>​	•_helpers.tpl: 放置可以通过chart复用的模板辅助对象</p>
<p>模板的Value通过两种方式提供：</p>
<p>​	•Chart开发者可以在chart中提供一个命名为 values.yaml 的文件。这个文件包含了默认值。</p>
<p>​	•Chart用户可以提供一个包含了value的YAML文件。可以在命令行使用 helm install命令时提供。</p>
<p>•$ helm install –generate-name <strong>–values&#x3D;myvals.yaml</strong> wordpress</p>
<p>•当用户提供自定义value时，这些value会覆盖chart的values.yaml文件中value。</p>
<h2 id="helm-get-manifest"><a href="#helm-get-manifest" class="headerlink" title="helm get manifest"></a>helm get manifest</h2><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020837291.png" alt="image-20220402073740679"></p>
<p>$ helm install full-coral .&#x2F;mychart</p>
<p>$ helm get manifest full-coral</p>
<p>•—</p>
<p>•# Source: mychart&#x2F;templates&#x2F;configmap.yaml</p>
<p>•apiVersion: v1</p>
<p>•kind: ConfigMap</p>
<p>•metadata:</p>
<p>• name: mychart-configmap</p>
<p>•data:</p>
<p> myvalue: “Hello World”</p>
<h2 id="添加一个简单的模板调用"><a href="#添加一个简单的模板调用" class="headerlink" title="添加一个简单的模板调用"></a>添加一个简单的模板调用</h2><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020837437.png" alt="image-20220402073752050"></p>
<p>Release前面的点表示从作用域最顶层的命名空间开始。</p>
<p>这样.Release.Name就可解读为“通顶层命名空间开始查找 Release对象，然后在其中找Name对象”。</p>
<p>Release是一个Helm的内置对象。它可以显示从库中赋值的发布名称。</p>
<p>$ helm install –debug –dry-run goodly-guppy .&#x2F;mychart</p>
<p>让服务器渲染模板，然后返回生成的清单文件。</p>
<p>使用–dry-run会使测试代码变得很简单，但不能保证Kubernetes本身会接受生成模板。</p>
<h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><h3 id="Release："><a href="#Release：" class="headerlink" title="Release："></a>Release：</h3><p>该对象描述了版本发布本身。包含了以下对象：</p>
<p>​	•Release.Name： release名称</p>
<p>​	•Release.Namespace： 版本中包含的命名空间(如果manifest没有覆盖的话)</p>
<p>​	•Release.IsUpgrade： 如果当前操作是升级或回滚的话，需要将该值设置为true</p>
<p>​	•Release.IsInstall： 如果当前操作是安装的话，需要将该值设置为true</p>
<p>​	•Release.Revision： 此次修订的版本号。安装时是1，每次升级或回滚都会自增</p>
<p>​	•Release.Service： 该service用来渲染当前模板。Helm里一般是Helm</p>
<h3 id="Values："><a href="#Values：" class="headerlink" title="Values："></a>Values：</h3><p>Values是从values.yaml文件和用户提供的文件传进模板的。Values默认为空</p>
<p>Chart： Chart.yaml文件内容。 Chart.yaml里的任意数据在这里都可以可访问的。<br>比如 <code>&#123;&#123; .Chart.Name &#125;&#125;-&#123;&#123;.Chart.Version &#125;&#125; </code>会打印出 mychart-0.1.0</p>
<h3 id="Files："><a href="#Files：" class="headerlink" title="Files："></a>Files：</h3><p>在chart中提供访问所有的非特殊文件。当你不能使用它访问模板时，你可以访问其他文件。 </p>
<p>​	•Files.Get 通过文件名获取文件的方法。 （.Files.Getconfig.ini）</p>
<p>​	•Files.GetBytes 用字节数组代替字符串获取文件内容的方法。 对图片之类的文件很有用</p>
<p>​	•Files.Glob 用给定的shell glob模式匹配文件名返回文件列表的方法</p>
<p>​	•Files.Lines 逐行读取文件内容的方法。迭代文件中每一行时很有用</p>
<p>​	•Files.AsSecrets 使用Base 64编码字符串返回文件体的方法</p>
<p>​	•Files.AsConfig 使用YAML格式返回文件体的方法</p>
<h3 id="Capabilities："><a href="#Capabilities：" class="headerlink" title="Capabilities："></a>Capabilities：</h3><p>提供关于Kubernetes集群支持功能的信息</p>
<p>​	•Capabilities.APIVersions 是一个版本集合</p>
<p>​	•Capabilities.APIVersions.Has $version 说明集群中的版本 (e.g., batch&#x2F;v1) 或是资源 (e.g., apps&#x2F;v1&#x2F;Deployment) 是否可用</p>
<p>​	•Capabilities.KubeVersion 和 Capabilities.KubeVersion.Version 是Kubernetes的版本号</p>
<p>​	•Capabilities.KubeVersion.Major Kubernetes的主版本</p>
<p>​	•Capabilities.KubeVersion.Minor Kubernetes的次版本</p>
<h3 id="Template："><a href="#Template：" class="headerlink" title="Template："></a>Template：</h3><p>包含了已经被执行的当前模板信息</p>
<p>​	•Template.Name: 当前模板的命名空间文件路径 (e.g. mychart&#x2F;templates&#x2F;mytemplate.yaml)</p>
<p>​	•Template.BasePath: 当前chart模板目录的路径 (e.g. mychart&#x2F;templates)</p>
<h2 id="Values-文件"><a href="#Values-文件" class="headerlink" title="Values 文件"></a>Values 文件</h2><p>Values提供了对传递到chart的值的访问方法， 其内容源包括了多个位置：</p>
<p>​	•chart中的values.yaml文件</p>
<p>​	•如果是子chart，就是父chart中的values.yaml文件</p>
<p>​	•使用-f参数(helm install -f myvals.yaml .&#x2F;mychart)传递到 helm install 或 helm upgrade的values文件</p>
<p>​	•使用–set (比如helm install –set foo&#x3D;bar .&#x2F;mychart)传递的单个参数</p>
<p>顺序：默认使用values.yaml，可以被父chart的values.yaml覆盖，继而被用户提供values文件覆盖， 最后会被–set参数覆盖。</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020838501.png" alt="image-20220402073812106"></p>
<h2 id="模板函数和流水线"><a href="#模板函数和流水线" class="headerlink" title="模板函数和流水线"></a>模板函数和流水线</h2><p>•管道符</p>
<p><code>drink: &#123;&#123; quote .Values.favorite.drink &#125;&#125;</code></p>
<p><code>drink: &#123;&#123; .Values.favorite.drink | quote &#125;&#125;</code></p>
<p><code>&#123;&#123; .Values.favorite.food | upper | quote &#125;&#125;</code></p>
<h2 id="模板功能"><a href="#模板功能" class="headerlink" title="模板功能"></a>模板功能</h2><p><code>value: &#123;&#123; .Values.who | quote &#125;&#125;      (使用整型时 不quote)</code></p>
<p><code>value: &#123;&#123; .Values.who | repeat 5 | quoto&#125;&#125;</code></p>
<p><code>value: &#123;&#123; .Values.who | lower | upper &#125;&#125;</code></p>
<p><code>value: &#123;&#123; include "mytpl" . | lower | quote &#125;&#125;</code></p>
<p><code>value: &#123;&#123; required "A valid entry required!" .Values.who &#125;&#125;</code></p>
<p><code>value: &#123;&#123; .Values.who | default "my-default-value" &#125;&#125;</code></p>
<p><code>value: &#123;&#123; .Values.who | indent 6 &#125;&#125;</code></p>
<p><code>value: &#123;&#123; .Values.who | nindent 6 &#125;&#125;  (在字符串开头添加新行)</code></p>
<h2 id="流控制"><a href="#流控制" class="headerlink" title="流控制"></a>流控制</h2><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020838618.png" alt="image-20220402073846291"></p>
<p><code>&#123;&#123; if PIPELINE &#125;&#125;</code></p>
<p>• # Do something</p>
<p><code>&#123;&#123; else if OTHER PIPELINE &#125;&#125;</code></p>
<p>• # Do something else</p>
<p><code>&#123;&#123; else &#125;&#125;</code></p>
<p>• # Default case</p>
<p><code>&#123;&#123; end &#125;&#125;</code></p>
<p>管道会被设置为 false：</p>
<p>布尔false</p>
<p>数字0</p>
<p>空字符串</p>
<p>nil (空或null)</p>
<p>空集合(map, slice, tuple, dict, array)</p>
<hr>
<p><code>&#123;&#123; with PIPELINE &#125;&#125;</code></p>
<p>• # restricted scope</p>
<p><code>&#123;&#123; end &#125;&#125;</code></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020839030.png" alt="image-20220402073900874"></p>
<p>•.是对 当前作用域 的引用。因此 .Values就是告诉模板在当前作用域查找Values对象。</p>
<p>•with允许你为特定对象设定当前作用域(.)。</p>
<p>•在限定的作用域内，无法使用.访问父作用域的对象(Release.Name)。</p>
<p>•或者，我们可以使用**<u>$</u>**从父作用域中访问Release.Name对象。</p>
<p>•当模板开始执行后$会被映射到根作用域，且执行过程中不会更改。</p>
<p><code>&#123;&#123; $.Release.Name &#125;&#125;</code></p>
<p>values.yaml</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020839354.png" alt="image-20220402073914182"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020839900.png" alt="image-20220402073921739"></p>
<p>range操作符也设置了.的作用域。</p>
<p>每一次循环，.都会设置为当前的pizzaTopping。 </p>
<p>我们可以直接发送.的值给管道。</p>
<p>(|-    YAML中是指多行字符串）</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020839593.png" alt="image-20220402073931441"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020839148.png" alt="image-20220402073937976"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020839469.png" alt="image-20220402073943310"></p>
<h2 id="命名模板"><a href="#命名模板" class="headerlink" title="命名模板"></a>命名模板</h2><p>•此时需要越过模板，开始创建其他内容了。命名模板 (有时称作一个 部分 或一个 子模板)仅仅是在文件内部定义的模板，并使用了一个名字。有两种创建方式和几种不同的使用方法。</p>
<p>•模板名称是全局的。如果您想声明两个相同名称的模板，哪个最后加载就使用哪个。 因为在子chart中的模板和顶层模板一起编译，命名时要注意chart特定名称。</p>
<p>•一个常见的命名惯例是用chart名称作为模板前缀：</p>
<p><code>&#123;&#123; define "mychart.labels" &#125;&#125;</code></p>
<h2 id="用define和template声明和使用模板"><a href="#用define和template声明和使用模板" class="headerlink" title="用define和template声明和使用模板"></a>用define和template声明和使用模板</h2><p>按照惯例，Helm chart将这些模板放置在局部文件中，一般是_helpers.tpl</p>
<p>define方法会有个简单的文档块<code>(&#123;&#123;/* ... */&#125;&#125;)</code>来描述功能</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020839296.png" alt="image-20220402073955084"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020840249.png" alt="image-20220402074003093"></p>
<h2 id="局部的和-文件"><a href="#局部的和-文件" class="headerlink" title="局部的和_文件"></a>局部的和_文件</h2><p>Helm的模板语言允许你创建命名的嵌入式模板， 这样就可以在其他位置按名称访问。</p>
<p>文件的命名惯例：</p>
<p>​	•templates&#x2F;中的大多数文件被视为包含Kubernetes清单</p>
<p>​	•NOTES.txt是个例外</p>
<p>​	•命名以下划线(_)开始的文件则假定没有包含清单内容。这些文件不会渲染为Kubernetes对象定义，但在其他chart模板中都可用。</p>
<p>​	•这些文件用来存储局部和辅助对象，实际上当我们第一次创建mychart时，会看到一个名为_helpers.tpl的文	件，这个文件是模板局部的默认位置。</p>
<h2 id="设置模板范围"><a href="#设置模板范围" class="headerlink" title="设置模板范围"></a>设置模板范围</h2><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020840074.png" alt="image-20220402074015895"></p>
<p>helm install –dry-run –disable-openapi-validation moldy-jaguar .&#x2F;mychart</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020840071.png" alt="image-20220402074024856"></p>
<p><code>&#123;&#123;- template "mychart.labels" . &#125;&#125;</code></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020840992.png" alt="image-20220402074032839"></p>
<h2 id="include方法"><a href="#include方法" class="headerlink" title="include方法"></a>include方法</h2><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020841326.png" alt="image-20220402074105148"></p>
<p>由于template是一个行为，不是方法，无法将 template调用的输出传给其他方法，数据只是简单地按行插入。</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020841997.png" alt="image-20220402074112839"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020841991.png" alt="image-20220402074119814"></p>
<p>include方法：更好地处理YAML文档的输出格式</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020841491.png" alt="image-20220402074129310"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020841437.png" alt="image-20220402074137266"></p>
<h2 id="在模板内部访问文件"><a href="#在模板内部访问文件" class="headerlink" title="在模板内部访问文件"></a>在模板内部访问文件</h2><p>Helm 提供了通过**.Files**对象访问文件的方法。不过，在我们使用模板示例之前，有些事情需要注意：</p>
<p>​	•可以<strong>添加额外的文件到chart中</strong>。虽然这些文件会被绑定。但是由于Kubernetes对象的限制，Chart必须小于1M。</p>
<p>​	•通常处于安全考虑，一些文件无法通过.Files对象访问：</p>
<p>​		•无法访问templates&#x2F;中的文件</p>
<p>​		•无法访问使用.helmignore排除的文件</p>
<p>​	•Chart不能保留UNIX模式信息，因此当文件涉及到.Files对象时，<strong>文件级权限不会影响文件的可用性</strong>。</p>
<p>•mychart&#x2F;config1.toml: message &#x3D; Hello from config 1</p>
<p>•mychart&#x2F;config2.toml: message &#x3D; Hello from config 2</p>
<p>•mychart&#x2F;config3.toml: message &#x3D; Hello from config 3</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020842141.png" alt="image-20220402074205980"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020842468.png" alt="image-20220402074216305"></p>
<h2 id="子chart和全局值"><a href="#子chart和全局值" class="headerlink" title="子chart和全局值"></a>子chart和全局值</h2><p>chart可以使用依赖，称为 子chart，且有自己的值和模板。 </p>
<p>在深入研究代码之前，需要了解一些子chart的重要细节：</p>
<p>​	•子chart被认为是“独立的”，意味着子chart从来不会显示依赖它的父chart。</p>
<p>​	•父chart可以覆盖子chart的值。</p>
<p>​	•Helm有一个 全局值 的概念，所有的chart都可以访问。</p>
<h2 id="创建子chart"><a href="#创建子chart" class="headerlink" title="创建子chart"></a>创建子chart</h2><p>•$ cd mychart&#x2F;charts</p>
<p>•$ helm create mysubchart</p>
<p>•Creating mysubchart</p>
<p>•$ rm -rf mysubchart&#x2F;templates&#x2F;*</p>
<h2 id="用父chart的值来覆盖"><a href="#用父chart的值来覆盖" class="headerlink" title="用父chart的值来覆盖"></a>用父chart的值来覆盖</h2><p>•mychart&#x2F;charts&#x2F;mysubchart&#x2F;values.yaml</p>
<p>​	•dessert: cake</p>
<p>•mychart&#x2F;charts&#x2F;mysubchart&#x2F;templates&#x2F;configmap.yaml</p>
<p>​	•data:</p>
<p>​		<code>dessert: &#123;&#123; .Values.dessert &#125;&#125;</code></p>
<p>•mychart&#x2F;values.yaml</p>
<p>​	•dessert: ice cream</p>
<p>在mysubchart中的所有指令会被发送到mysubchart中。</p>
<p>运行helm install –dry-run –debug mychart，会看到一项mysubchart的配置：</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020842016.png" alt="image-20220402074231820"></p>
<p>现在，子chart的值已经被顶层的值覆盖了。</p>
<p>我们不会改变mychart&#x2F;charts&#x2F;mysubchart&#x2F;templates&#x2F;configmap.yaml模板到 .Values.mysubchart.dessert的指向。</p>
<p>从模板的角度来看，值依然是在.Values.dessert。</p>
<p>当模板引擎传递值时，会设置范围。 因此对于mysubchart模板，.Values中只提供专门用于mysubchart的值。</p>
<p>但是有时确实希望某些值对所有模板都可用。这是使用全局chart值完成的。</p>
<h2 id="全局Chart值"><a href="#全局Chart值" class="headerlink" title="全局Chart值"></a>全局Chart值</h2><p>•全局值是使用完全一样的名字在所有的chart及子chart中都能访问的值。</p>
<p>•全局变量需要显示声明。</p>
<p>•不能将现有的非全局值作为全局值使用。</p>
<p>•这些值数据类型有个保留部分叫Values.global，可以用来设置全局值。</p>
<p>•mychart&#x2F;values.yaml：</p>
<p>​	•global:</p>
<p>​		•salad: caesar</p>
<p>•mychart&#x2F;templates&#x2F;configmap.yaml和mysubchart&#x2F;templates&#x2F;configmap.yaml 应该都能以<code>&#123;&#123; .Values.global.salad &#125;&#125;</code>进行访问。</p>
<h2 id="与子chart共享模板"><a href="#与子chart共享模板" class="headerlink" title="与子chart共享模板"></a>与子chart共享模板</h2><p>父chart和子chart可以共享模板。在任意chart中定义的块在其他chart中也是可用的。</p>
<p>可以这样定义一个简单的模板：</p>
<p>​	<code>&#123;&#123;- define "labels" &#125;&#125;from: mychart&#123;&#123; end &#125;&#125;</code></p>
<p>模板标签全局共享。因此，<strong>标签chart</strong>可以包含在任何其他chart中。</p>
<h2 id="库类型Chart"><a href="#库类型Chart" class="headerlink" title="库类型Chart"></a>库类型Chart</h2><p>•库类型chart是一种 Helm chart，<strong>定义了可以由其他chart中Helm模板共享的chart原语或定义</strong>。这允许用户通过chart分享可复用得代码片段来避免重复并保持chart 干燥。</p>
<p>•在Helm 3中引用了库chart，从形式上区别于Helm 2中chart维护的通用或辅助chart。 作为一个chart类型引入，可以提供：</p>
<p>​	•一种明确区分通用和应用chart的方法</p>
<p>​	•逻辑上阻止安装通用chart</p>
<p>​	•通用chart中的未渲染模板可以包含版本组件</p>
<p>•chart维护者可以定义一个通用的chart作为库并且现在可以确信Helm将以标准一致的方式处理chart。 也意味着通过改变chart类型来分享应用chart中的定义。</p>
<h2 id="创建一个简单的库chart"><a href="#创建一个简单的库chart" class="headerlink" title="创建一个简单的库chart"></a>创建一个简单的库chart</h2><p>•$ helm create mylibchart</p>
<p>•Creating mylibchart</p>
<p>•$ rm -rf mylibchart&#x2F;templates&#x2F;*</p>
<p>•$ rm -f mylibchart&#x2F;values.yaml</p>
<p>•已命名的模板 (有时称为局部模板或子模板)是定义在一个文件中的简单模板，并分配了一个名称。</p>
<p>•在templates&#x2F;目录中， 所有以下划线开始的文件(<em>)不会输出到Kubernetes清单文件中。因此依照惯例，辅助模板和局部模板被放置在</em><em>.tpl或_</em>.yaml文件中。</p>
<p>这个示例中，我们要写一个通用的配置映射来创建一个空的配置映射源。在mylibchart&#x2F;templates&#x2F;_configmap.yaml文件中定义如下：</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020842004.png" alt="image-20220402074249699"></p>
<p>•这个配置映射结构被定义在名为mylibchart.configmap.tpl的模板文件中。</p>
<p>data是一个空源的配置映射， 这个文件中另一个命名的模板是mylibchart.configmap。</p>
<p>这个模板包含了另一个模板mylibchart.util.merge， 会使用两个命名的模板作为参数，称为mylibchart.configmap和mylibchart.configmap.tpl。</p>
<h2 id="mylibchart-x2F-templates-x2F-util-yaml"><a href="#mylibchart-x2F-templates-x2F-util-yaml" class="headerlink" title="mylibchart&#x2F;templates&#x2F;_util.yaml"></a>mylibchart&#x2F;templates&#x2F;_util.yaml</h2><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020843293.png" alt="image-20220402074304169"></p>
<p>复制方法mylibchart.util.merge是mylibchart&#x2F;templates&#x2F;_util.yaml文件中的一个命名模板。 是 通用Helm辅助Chart的实用工具。因为它合并了两个模板并覆盖了两个模板的公共部分。</p>
<h2 id="mylibchart-x2F-Chart-yaml"><a href="#mylibchart-x2F-Chart-yaml" class="headerlink" title="mylibchart&#x2F;Chart.yaml"></a>mylibchart&#x2F;Chart.yaml</h2><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020843405.png" alt="image-20220402074314207"></p>
<p>这个库chart现在可以分享了，并且配置映射定义可以复用了。</p>
<h2 id="使用简单的库chart"><a href="#使用简单的库chart" class="headerlink" title="使用简单的库chart"></a>使用简单的库chart</h2><p>•$ helm create mychart</p>
<p>•Creating mychart</p>
<p>•$ rm -rf mychart&#x2F;templates&#x2F;*</p>
<h2 id="mychart-x2F-templates-x2F-configmap-yaml"><a href="#mychart-x2F-templates-x2F-configmap-yaml" class="headerlink" title="mychart&#x2F;templates&#x2F;configmap.yaml"></a>mychart&#x2F;templates&#x2F;configmap.yaml</h2><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020843472.png" alt="image-20220402074325345"></p>
<p>可以看到这简化了我们通过继承为添加了标准属性的公共配置映射定义必须要做的事情。在模板中添加了配置，在这个示例中的数据key myvalue和值。这个配置会覆盖公共配置映射中的空源。因为我们在上一节中提到的辅助方法mylibchart.util.merge，这是可行的。</p>
<p>为了能使用通用代码，我们需要添加mylibchart作为依赖。将以下内容添加到mychart&#x2F;Chart.yaml文件的末尾：</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020843953.png" alt="image-20220402074331862"></p>
<h2 id="使用简单的库chart-1"><a href="#使用简单的库chart-1" class="headerlink" title="使用简单的库chart"></a>使用简单的库chart</h2><p>这包含了作为文件系统动态依赖的**<u>库chart</u><strong>，和我们的</strong><u>应用chart</u>**位于同一父路径下。由于将库chart作为动态依赖， 我们需要执行helm dependency update，它会拷贝库chart到你的charts&#x2F;目录。</p>
<p>•$ helm dependency update mychart&#x2F;</p>
<p>现在我们准备好部署chart了。<strong>安装之前，需要先检测渲染过的模板。</strong></p>
<p>•$ helm install mydemo mychart&#x2F; –debug –dry-run</p>
<p>现在安装：</p>
<p>•$ helm install mydemo mychart&#x2F;</p>
<p>•我们可以检索这个版本并看到实际的版本已经加载。</p>
<p>•$ helm get manifest mydemo</p>
<h2 id="The-Common-Helm-Helper-Chart"><a href="#The-Common-Helm-Helper-Chart" class="headerlink" title="The Common Helm Helper Chart"></a>The Common Helm Helper Chart</h2><p>•这个 chart是公共chart的初始模式。 它提供的应用程序反映了Kubernetes chart开发的最佳实践。开发chart时可以立即使用共享代码。</p>
<p>•$ helm create demo</p>
<p>•Creating demo</p>
<p>demo&#x2F;templates&#x2F;deployment.yaml</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020843324.png" alt="image-20220402074349162"></p>
<p>demo&#x2F;Chart.yaml</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020843871.png" alt="image-20220402074354759"></p>
<p>demo&#x2F;templates&#x2F;service.yaml</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020844707.png" alt="image-20220402074406568"></p>
<p>注意：需要添加incubator仓库到Helm仓库列表中(helm repo add)。</p>
<p>由于我们引用了一个chart作为动态依赖，需要执行<strong>helm dependency update</strong>。这样会将辅助chart拷贝到你的charts&#x2F;目录。</p>
<h2 id="Chart-Hook"><a href="#Chart-Hook" class="headerlink" title="Chart Hook"></a>Chart Hook</h2><p>Helm 提供了一个 hook 机制允许chart开发者在发布生命周期的某些点进行干预。比如你可以使用hook用于：</p>
<p>​	•安装时在加载其他chart之前加载配置映射或密钥</p>
<p>​	•安装新chart之前执行备份数据库的任务，然后在升级之后执行第二个任务用于存储数据。</p>
<p>​	•在删除发布之前执行一个任务以便在删除服务之前退出滚动。</p>
<p>钩子的工作方式与常规模板类似，但因为Helm对其不同的使用方式，会有一些特殊的注释。这部分会讲述钩子的基本使用模式。</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020844566.png" alt="image-20220402074434226"></p>
<h2 id="可用的钩子"><a href="#可用的钩子" class="headerlink" title="可用的钩子"></a>可用的钩子</h2><p>定义了以下钩子：</p>
<p>注释值 描述</p>
<p>​	•pre-install  在模板渲染之后，Kubernetes资源创建之前执行</p>
<p>​	•post-install 在所有资源加载到Kubernetes之后执行</p>
<p>​	•pre-delete  在Kubernetes删除之前，执行删除请求</p>
<p>​	•post-delete 在所有的版本资源删除之后执行删除请求</p>
<p>​	•pre-upgrade 在模板渲染之后，资源更新之前执行一个升级请求</p>
<p>​	•post-upgrade 所有资源升级之后执行一个升级请求</p>
<p>​	•pre-rollback 在模板渲染之后，资源回滚之前，执行一个回滚请求</p>
<p>​	•post-rollback 在所有资源被修改之后执行一个回滚请求</p>
<p>​	•test  调用Helm test子命令时执行 ( test文档)</p>
<h2 id="钩子和发布生命周期"><a href="#钩子和发布生命周期" class="headerlink" title="钩子和发布生命周期"></a>钩子和发布生命周期</h2><p>•钩子允许你在发布生命周期的关键节点上有机会执行操作。比如，考虑helm install的生命周期。默认生命周期看起来是这样：</p>
<p>​	1.用户执行helm install foo</p>
<p>​	2.Helm库调用安装API</p>
<p>​	3.在一些验证之后，库会渲染foo模板</p>
<p>​	4.库会加载结果资源到Kubernetes</p>
<p>​	5.库会返回发布对象（和其他数据）给客户端</p>
<p>​	6.客户端退出</p>
<h2 id="钩子和发布生命周期-1"><a href="#钩子和发布生命周期-1" class="headerlink" title="钩子和发布生命周期"></a>钩子和发布生命周期</h2><p>Helm 为install周期定义了两个钩子：pre-install和post-install。如果foo chart的开发者两个钩子都执行， 周期会被修改为这样：</p>
<p>​	1.用户返回 helm install foo</p>
<p>​	2.Helm库调用安装API</p>
<p>​	<strong>3.在 crds&#x2F;目录中的CRD会被安装</strong></p>
<p>​	4.在一些验证之后，库会渲染foo模板</p>
<p>​	<strong>5.库准备执行pre-install钩子(将hook资源加载到Kubernetes中)</strong></p>
<p>​	<strong>6.库按照权重对钩子排序(默认将权重指定为0)，然后在资源种类排序，最后按名称正序排列。</strong></p>
<p>​	<strong>7.库先加载最小权重的钩子(从负到正)</strong></p>
<p>​	<strong>8.库会等到钩子是 “Ready”状态(CRD除外)</strong></p>
<p>​	9.库将生成的资源加载到Kubernetes中。<strong>注意如果设置了–wait参数，库会等所有资源是ready状态， 且所有资源准备就绪后才会执行post-install钩子。</strong></p>
<p>​	<strong>10.库执行post-install钩子(加载钩子资源)。</strong></p>
<p>​	<strong>11.库会等到钩子是”Ready”状态</strong></p>
<p>​	12.库会返回发布对象(和其他数据)给客户端</p>
<p>​	13.客户端退出</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020844218.png" alt="image-20220402074448996"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020844027.png" alt="image-20220402074455812"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020845915.png" alt="image-20220402074503755"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020845987.png" alt="image-20220402074517831"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020845652.png" alt="image-20220402074529439"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020845990.png" alt="image-20220402074537838"></p>
<h2 id="等钩子准备好是什么意思？"><a href="#等钩子准备好是什么意思？" class="headerlink" title="等钩子准备好是什么意思？"></a>等钩子准备好是什么意思？</h2><p>• 这取决于钩子声明的资源。</p>
<p>•如果资源是 Job 或 Pod类型，<strong>Helm会等到直到他成功运行完成</strong>。 如果钩子失败，发布就会失败。这是一个<strong>阻塞操作</strong>,所以Helm客户端会在这个任务执行时<strong>暂停</strong>。</p>
<p>•针对其他种类，一旦Kubernetes将资源标记为已加载(已添加或已更新)，资源会被认为是”<strong>Ready</strong>“。 当一个钩子中声明了很多资源时， 资源会<strong>串行执行</strong>。如果有钩子权重，会<strong>按照权重顺序执行</strong>。从Helm 3.2.0开始，具有相同权重的钩子资源会和普通非钩子资源以相同的顺序安装。 否则，顺序就无法保证。（Helm 2.3.0及之后，它们按照字母排序。不过该行为并不会绑定，将来可能会改变。）增加钩子权重被认为是很好的做法， 如果权重不重要，可以设置为0。</p>
<h2 id="钩子资源不使用对应版本管理"><a href="#钩子资源不使用对应版本管理" class="headerlink" title="钩子资源不使用对应版本管理"></a>钩子资源不使用对应版本管理</h2><p>钩子创建的资源无法作为发布的一部分进行跟踪和管理。一旦Helm验证hook达到ready状态，将不使用钩子资源。 当对应发布删除后，钩子资源的垃圾回收会在将来添加到Helm 3中，因此<strong>不能被删除的钩子资源应该添加注释：</strong></p>
<p>​	<strong>helm.sh&#x2F;resource-policy: keep</strong></p>
<p>实际上，如果你在钩子中创建了资源，不能依靠helm uninstall去删除资源。要删除这些资源:</p>
<p>​	•要么在钩子模板文件中添加一个自定义的<strong>helm.sh&#x2F;hook-delete-policy</strong> 注释</p>
<p>​	•要么 设置任务资源的生存时间（<strong>TTL</strong>）字段</p>
<h2 id="编写一个钩子"><a href="#编写一个钩子" class="headerlink" title="编写一个钩子"></a>编写一个钩子</h2><p>钩子就是在metadata部分指定了特殊注释的Kubernetes清单文件。</p>
<p>因为是模板文件，你可以使用所有的普通模板特性，包括读取 .Values， .Release，和 .Template。</p>
<p>比如这个模板，存储在templates&#x2F;post-install-job.yaml，声明了一个要运行在post-install上的任务：</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020845754.png" alt="image-20220402074555584"></p>
<h2 id="一个资源可以实现多个钩子："><a href="#一个资源可以实现多个钩子：" class="headerlink" title="一个资源可以实现多个钩子："></a>一个资源可以实现多个钩子：</h2><p>​	annotations:</p>
<p>​		“helm.sh&#x2F;hook”: post-install,post-upgrade</p>
<h2 id="Chart-Test"><a href="#Chart-Test" class="headerlink" title="Chart Test"></a>Chart Test</h2><p>chart包含了很多一起工作的Kubernetes资源和组件。作为一个chart作者，你可能想写一些测试<strong>验证chart安装时是否按照预期工作</strong>。 这些测试同时可以<strong>帮助chart用户理解你的chart在做什么</strong>。</p>
<p>test 在helm chart中放在 <strong>templates&#x2F;<strong>目录，并且是一个指定了容器和给定命令的任务。如果测试通过，容器应该成功退出 (exit 0) 任务的定义必须包含helm测试钩子的注释：</strong>helm.sh&#x2F;hook: test</strong>。</p>
<p>示例测试以下内容：</p>
<p>​	•验证你values.yaml文件中的配置可以正确注入</p>
<p>​	•确保你的用户名和密码是对的</p>
<p>​	•确保不正确的用户名和密码不会工作</p>
<p>​	•判断你的服务只启动的并且正确地负载均衡</p>
<p>你可以在Helm的一个版本中运行预定义的测试，执行</p>
<p>​	helm test <RELEASE_NAME></p>
<p>对于chart用户来说， 这是验证chart发布（或应用）可以正常运行的很好的方式。</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020846204.png" alt="image-20220402074610070"></p>
<h2 id="运行一个发布版本测试套件的步骤"><a href="#运行一个发布版本测试套件的步骤" class="headerlink" title="运行一个发布版本测试套件的步骤"></a>运行一个发布版本测试套件的步骤</h2><p>首先，安装chart到你的集群中创建一个版本。需要等待所有的pod变成active的状态；如果安装之后立即执行test， 可能会出现相应的失败，你不得不再执行一次test。</p>
<p>•注:</p>
<p>​	•你可以在单个yaml文件中定义尽可能多的测试或者分布在templates&#x2F;目录中的多个yaml文件中。</p>
<p>​	•为了更好地隔离，欢迎你将测试套件嵌套放在tests&#x2F;目录中，类似<chart-name>&#x2F;templates&#x2F;tests&#x2F;。</p>
<p>​	•一个test就是一个 Helm 钩子，所以类似于 helm.sh&#x2F;hook-weight和helm.sh&#x2F;hook-delete-policy的注释可以用于测试资源。</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204020846913.png" alt="image-20220402074621812"></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>•<a href="https://helm.sh/docs/">https://helm.sh/docs/</a></p>
<p>•<a href="https://www.youtube.com/watch?v=-ykwb1d0DXU">https://www.youtube.com/watch?v=-ykwb1d0DXU</a></p>
<p>•<a href="https://www.youtube.com/watch?v=405uPOSwldU">https://www.youtube.com/watch?v=405uPOSwldU</a></p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>Helm</tag>
      </tags>
  </entry>
  <entry>
    <title>Helm学习</title>
    <url>/2022/03/09/Helm%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>Helm 3的学习</p>
<p>官网：<a href="https://helm.sh/">https://helm.sh</a></p>
<span id="more"></span>

<h1 id="什么是Helm？"><a href="#什么是Helm？" class="headerlink" title="什么是Helm？"></a>什么是Helm？</h1><p><u><strong>Helm is a tool for managing Kubernetes packages called <em>charts</em>.</strong></u> </p>
<p>Kubernetes包管理器，是查找、分享和使用软件构建Kubernetes的最优方式</p>
<blockquote>
<p>Helm 安装 <em>charts</em> 到 Kubernetes 集群中，每次安装都会创建一个新的 <em>release</em>。你可以在 Helm 的 chart <em>repositories</em> 中寻找新的 chart。</p>
</blockquote>
<p>The package manager for Kubernetes</p>
<p>Helm is the best way to find, share, and use software built for Kubernetes</p>
<p>(something like pip, wegt)</p>
<blockquote>
<p>Helm helps you manage Kubernetes applications — Helm Charts help you define, install, and upgrade even the most complex Kubernetes application.</p>
</blockquote>
<p>Charts are easy to create, version, share, and publish — so start using Helm and stop the copy-and-paste.</p>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><h2 id="Manage-Complexity"><a href="#Manage-Complexity" class="headerlink" title="Manage Complexity"></a>Manage Complexity</h2><p>Charts describe even the most complex apps, provide repeatable application installation, and serve as a single point of authority.</p>
<h2 id="Easy-Updates"><a href="#Easy-Updates" class="headerlink" title="Easy Updates"></a>Easy Updates</h2><p>Take the pain out of updates with in-place upgrades and custom hooks.</p>
<h2 id="Simple-Sharing"><a href="#Simple-Sharing" class="headerlink" title="Simple Sharing"></a>Simple Sharing</h2><p>Charts are easy to version, share, and host on public or private servers.</p>
<h2 id="Rollbacks"><a href="#Rollbacks" class="headerlink" title="Rollbacks"></a>Rollbacks</h2><p>Use <code>helm rollback</code> to roll back to an older version of a release with ease.</p>
<h1 id="Helm-Architecture"><a href="#Helm-Architecture" class="headerlink" title="Helm Architecture"></a><a href="https://helm.sh/zh/docs/topics/architecture/">Helm Architecture</a></h1><p>Helm管理名为chart的Kubernetes包的工具</p>
<h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><ul>
<li><p>Create new charts from scratch</p>
<p>从头开始创建新的chart</p>
</li>
<li><p>Package charts into chart archive (tgz) files</p>
<p>将chart打包成归档(tgz)文件</p>
</li>
<li><p>Interact with chart repositories where charts are stored</p>
<p>与存储chart的仓库进行交互</p>
</li>
<li><p>Install and uninstall charts into an existing Kubernetes cluster</p>
<p>在现有的Kubernetes集群中安装和卸载chart</p>
</li>
<li><p>Manage the release cycle of charts that have been installed with Helm</p>
<p>管理与Helm一起安装的chart的发布周期</p>
</li>
</ul>
<h2 id="Important-concepts"><a href="#Important-concepts" class="headerlink" title="Important concepts"></a>Important concepts</h2><h3 id="Chart"><a href="#Chart" class="headerlink" title="Chart"></a><a href="https://helm.sh/zh/docs/topics/charts/">Chart</a></h3><p>The <em>chart</em> is a bundle of information necessary to create an instance of a Kubernetes application.</p>
<p><em>chart</em> 创建Kubernetes应用程序所必需的一组信息</p>
<blockquote>
<p><em>Chart</em> 代表着 Helm 包。它包含在 Kubernetes 集群内部运行应用程序，工具或服务所需的所有资源定义。你可以把它看作是 Homebrew formula，Apt dpkg，或 Yum RPM 在Kubernetes 中的等价物。</p>
</blockquote>
<hr>
<p>Helm使用的包格式称为 <em>chart</em>。 **<u>chart就是一个描述Kubernetes相关资源的文件集合</u>**。单个chart可以用来部署一些简单的， 类似于memcache pod，或者某些复杂的HTTP服务器以及web全栈应用、数据库、缓存等等。</p>
<p>Chart是作为特定目录布局的文件被创建的。它们可以打包到要部署的版本存档中。</p>
<p>如果你想下载和查看一个发布的chart，但不安装它，你可以用这个命令： </p>
<p><code>helm pull chartrepo/chartname</code></p>
<h4 id="chart文件结构"><a href="#chart文件结构" class="headerlink" title="chart文件结构"></a>chart文件结构</h4><p>chart是一个组织在文件目录中的集合。目录名称就是chart名称（没有版本信息）。因而描述WordPress的chart可以存储在<code>wordpress/</code>目录中。</p>
<p>在这个目录中，Helm 期望可以匹配以下结构：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">wordpress/</span></span><br><span class="line">  <span class="string">Chart.yaml</span>          <span class="comment"># 包含了chart信息的YAML文件</span></span><br><span class="line">  <span class="string">LICENSE</span>             <span class="comment"># 可选: 包含chart许可证的纯文本文件</span></span><br><span class="line">  <span class="string">README.md</span>           <span class="comment"># 可选: 可读的README文件</span></span><br><span class="line">  <span class="string">values.yaml</span>         <span class="comment"># chart 默认的配置值</span></span><br><span class="line">  <span class="string">values.schema.json</span>  <span class="comment"># 可选: 一个使用JSON结构的values.yaml文件</span></span><br><span class="line">  <span class="string">charts/</span>             <span class="comment"># 包含chart依赖的其他chart</span></span><br><span class="line">  <span class="string">crds/</span>               <span class="comment"># 自定义资源的定义</span></span><br><span class="line">  <span class="string">templates/</span>          <span class="comment"># 模板目录， 当和values 结合时，可生成有效的Kubernetes manifest文件</span></span><br><span class="line">  <span class="string">templates/NOTES.txt</span> <span class="comment"># 可选: 包含简要使用说明的纯文本文件</span></span><br></pre></td></tr></table></figure>

<p>Helm保留使用 <code>charts/</code>，<code>crds/</code>， <code>templates/</code>目录，以及列举出的文件名。其他文件保持原样。</p>
<h4 id="chart-yaml"><a href="#chart-yaml" class="headerlink" title="chart.yaml"></a>chart.yaml</h4><p><code>Chart.yaml</code>文件是chart必需的。包含了以下字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">chart</span> <span class="string">API</span> <span class="string">版本</span> <span class="string">（必需）</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">chart名称</span> <span class="string">（必需）</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">语义化2</span> <span class="string">版本（必需）</span></span><br><span class="line"><span class="attr">kubeVersion:</span> <span class="string">兼容Kubernetes版本的语义化版本（可选）</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">一句话对这个项目的描述（可选）</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">chart类型</span> <span class="string">（可选）</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">关于项目的一组关键字（可选）</span></span><br><span class="line"><span class="attr">home:</span> <span class="string">项目home页面的URL</span> <span class="string">（可选）</span></span><br><span class="line"><span class="attr">sources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">项目源码的URL列表（可选）</span></span><br><span class="line"><span class="attr">dependencies:</span> <span class="comment"># chart 必要条件列表 （可选）</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">chart名称</span> <span class="string">(nginx)</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">chart版本</span> <span class="string">(&quot;1.2.3&quot;)</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">（可选）仓库URL</span> <span class="string">(&quot;https://example.com/charts&quot;)</span> <span class="string">或别名</span> <span class="string">(&quot;@repo-name&quot;)</span></span><br><span class="line">    <span class="attr">condition:</span> <span class="string">（可选）</span> <span class="string">解析为布尔值的yaml路径，用于启用/禁用chart</span> <span class="string">(e.g.</span> <span class="string">subchart1.enabled</span> <span class="string">)</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="comment"># （可选）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">用于一次启用/禁用</span> <span class="string">一组chart的tag</span></span><br><span class="line">    <span class="attr">import-values:</span> <span class="comment"># （可选）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ImportValue</span> <span class="string">保存源值到导入父键的映射。每项可以是字符串或者一对子/父列表项</span></span><br><span class="line">    <span class="attr">alias:</span> <span class="string">（可选）</span> <span class="string">chart中使用的别名。当你要多次添加相同的chart时会很有用</span></span><br><span class="line"><span class="attr">maintainers:</span> <span class="comment"># （可选）</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">维护者名字</span> <span class="string">（每个维护者都需要）</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">维护者邮箱</span> <span class="string">（每个维护者可选）</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">维护者URL</span> <span class="string">（每个维护者可选）</span></span><br><span class="line"><span class="attr">icon:</span> <span class="string">用做icon的SVG或PNG图片URL</span> <span class="string">（可选）</span></span><br><span class="line"><span class="attr">appVersion:</span> <span class="string">包含的应用版本（可选）。不需要是语义化，建议使用引号</span></span><br><span class="line"><span class="attr">deprecated:</span> <span class="string">不被推荐的chart</span> <span class="string">（可选，布尔值）</span></span><br><span class="line"><span class="attr">annotations:</span></span><br><span class="line">  <span class="attr">example:</span> <span class="string">按名称输入的批注列表</span> <span class="string">（可选）.</span></span><br></pre></td></tr></table></figure>

<p>从 <a href="https://github.com/helm/helm/releases/tag/v3.3.2">v3.3.2</a>，不再允许额外的字段。推荐的方法是在 <code>annotations</code> 中添加自定义元数据</p>
<h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><p>The <em>config</em> contains configuration information that can be merged into a packaged chart to create a releasable object.</p>
<p><em>config</em> 包含了可以合并到打包的chart中的配置信息，用于创建一个可发布的对象。</p>
<h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><blockquote>
<p><em>Repository（仓库）</em> 是用来存放和共享 charts 的地方。它就像 Perl 的 <a href="https://www.cpan.org/">CPAN 档案库网络</a> 或是 Fedora 的 <a href="https://src.fedoraproject.org/">软件包仓库</a>，只不过它是供 Kubernetes 包所使用的。</p>
</blockquote>
<h3 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h3><p>A <em>release</em> is <u>a running instanc</u>e of a <em>chart</em>, combined with a specific<em>config</em>.</p>
<p><em>release</em> 是一个与特定配置相结合的chart的<u>运行实例</u></p>
<blockquote>
<p><em>Release</em> 是运行在 Kubernetes 集群中的 chart 的实例。一个 chart 通常可以在同一个集群中安装多次。每一次安装都会创建一个新的 <em>release</em>。以 MySQL chart为例，如果你想在你的集群中运行两个数据库，你可以安装该chart两次。每一个数据库都会拥有它自己的 <em>release</em> 和 <em>release name</em>。</p>
</blockquote>
<h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><p>Helm是一个可执行文件</p>
<p>Helm is an executable which is implemented into two distinct parts:</p>
<h3 id="Helm-Client"><a href="#Helm-Client" class="headerlink" title="Helm Client"></a>Helm Client</h3><p><strong>Helm客户端</strong> 是终端用户的命令行客户端</p>
<p>The Helm Client is a command-line client for end users. The client is responsible for the following:</p>
<ul>
<li>Local chart development 本地chart开发</li>
<li>Managing repositories 管理仓库</li>
<li>Managing releases 管理发布</li>
<li>Interfacing with the Helm library 与Helm库建立接口<ol>
<li>Sending charts to be installed 发送安装的chart</li>
<li>Requesting upgrading or uninstalling of existing releases 发送升级或卸载现有发布的请求</li>
</ol>
</li>
</ul>
<h3 id="Helm-Library"><a href="#Helm-Library" class="headerlink" title="Helm Library"></a>Helm Library</h3><p><strong>Helm库</strong> 提供执行所有Helm操作的逻辑。</p>
<p>The Helm Library provides the logic for executing all Helm operations. It interfaces with the Kubernetes API server and provides the following capability:</p>
<ul>
<li>Combining a chart and configuration to build a release 结合chart和配置来构建版本</li>
<li>Installing charts into Kubernetes, and providing the subsequent release object 将chart安装到Kubernetes中，并提供后续发布对象</li>
<li>Upgrading and uninstalling charts by interacting with Kubernetes 与Kubernetes交互升级和卸载chart</li>
</ul>
<p>The standalone Helm library encapsulates the Helm logic so that it can be leveraged by different clients.</p>
<p>独立的Helm库封装了Helm逻辑以便不同的客户端可以使用它</p>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>The Helm client and library is written in the <strong>Go</strong> programming language.</p>
<p>The library uses the Kubernetes client library to communicate with Kubernetes. Currently, that library uses REST+JSON. It stores information in Secrets located inside of Kubernetes. It does not need its own database.</p>
<p>Configuration files are, when possible, written in YAML.</p>
<p>Helm客户端和库是使用Go编程语言编写的</p>
<p>这个库使用Kubernetes客户端库与Kubernetes通信。现在，这个库使用REST+JSON。它将信息存储在Kubernetes的密钥中。 不需要自己的数据库。</p>
<p>如果可能，配置文件是用YAML编写的。</p>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p><a href="https://helm.sh/zh/docs/intro/quickstart/">快速入门</a></p>
<h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p>想成功和正确地使用Helm，需要以下前置条件。</p>
<ol>
<li>一个 Kubernetes 集群</li>
<li>确定你安装版本的安全配置</li>
<li>安装和配置Helm。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220311145650121.png" alt="image-20220311145650121"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>脚本、源码、包管理器等</p>
<p>mac：</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220309233820458.png" alt="image-20220309233820458"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">brew</span> <span class="string">install</span> <span class="string">helm</span></span><br></pre></td></tr></table></figure>



<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220309233753099.png" alt="image-20220309233753099"></p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>安装好helm后，可以添加一个chart库。（可以从Artifact Hub中查找）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">helm</span> <span class="string">repo</span> <span class="string">add</span> <span class="string">bitnami</span> <span class="string">https://charts.bitnami.com/bitnami</span></span><br><span class="line"><span class="string">helm</span> <span class="string">search</span> <span class="string">repo</span> <span class="string">bitnami</span></span><br><span class="line"><span class="string">helm</span> <span class="string">repo</span> <span class="string">update</span> <span class="comment">#拿到最新的charts列表</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220311142518343.png" alt="image-20220311142518343"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220311143842518.png" alt="image-20220311143842518"></p>
<h2 id="安装chart"><a href="#安装chart" class="headerlink" title="安装chart"></a>安装chart</h2><p>您可以通过<code>helm install</code> 命令安装chart。 Helm可以通过多种途径查找和安装chart， 但最简单的是安装官方的<code>bitnami</code>chart</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220311144048799.png" alt="image-20220311144048799"></p>
<h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202203121810581.png" alt="image-20220312181042463"></p>
<h2 id="常用指令："><a href="#常用指令：" class="headerlink" title="常用指令："></a>常用指令：</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">helm search:</span>   <span class="string">搜索chart</span></span><br><span class="line"><span class="attr">helm pull:</span>    <span class="string">下载chart到本地目录查看</span></span><br><span class="line"><span class="attr">helm install:</span>   <span class="string">上传chart到Kubernetes</span></span><br><span class="line"><span class="attr">helm list:</span>     <span class="string">列出已发布的chart</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">helm</span> <span class="string">completion</span> <span class="bullet">-</span> <span class="string">为指定的shell生成自动补全脚本</span></span><br><span class="line"><span class="string">helm</span> <span class="string">create</span> <span class="bullet">-</span> <span class="string">使用给定的名称创建chart</span></span><br><span class="line"><span class="string">helm</span> <span class="string">dependency</span> <span class="bullet">-</span> <span class="string">管理chart依赖</span></span><br><span class="line"><span class="string">helm</span> <span class="string">env</span> <span class="bullet">-</span> <span class="string">helm客户端环境信息</span></span><br><span class="line"><span class="string">helm</span> <span class="string">get</span> <span class="bullet">-</span> <span class="string">下载命名版本的扩展信息</span></span><br><span class="line"><span class="string">helm</span> <span class="string">history</span> <span class="bullet">-</span> <span class="string">检索发布历史</span></span><br><span class="line"><span class="string">helm</span> <span class="string">install</span> <span class="bullet">-</span> <span class="string">安装chart</span></span><br><span class="line"><span class="string">helm</span> <span class="string">lint</span> <span class="bullet">-</span> <span class="string">验证chart是否存在问题</span></span><br><span class="line"><span class="string">helm</span> <span class="string">list</span> <span class="bullet">-</span> <span class="string">列举发布版本</span></span><br><span class="line"><span class="string">helm</span> <span class="string">package</span> <span class="bullet">-</span> <span class="string">将chart目录打包</span></span><br><span class="line"><span class="string">helm</span> <span class="string">plugin</span> <span class="bullet">-</span> <span class="string">安装、列举或卸载Helm插件</span></span><br><span class="line"><span class="string">helm</span> <span class="string">pull</span> <span class="bullet">-</span> <span class="string">从仓库下载chart并（可选）在本地目录中打开</span></span><br><span class="line"><span class="string">helm</span> <span class="string">push</span> <span class="bullet">-</span> <span class="string">推送chart到远程</span></span><br><span class="line"><span class="string">helm</span> <span class="string">registry</span> <span class="bullet">-</span> <span class="string">从注册表登录或登出</span></span><br><span class="line"><span class="string">helm</span> <span class="string">repo</span> <span class="bullet">-</span> <span class="string">添加、列出、删除、更新和索引chart仓库</span></span><br><span class="line"><span class="string">helm</span> <span class="string">rollback</span> <span class="bullet">-</span> <span class="string">回滚发布到上一个版本</span></span><br><span class="line"><span class="string">helm</span> <span class="string">search</span> <span class="bullet">-</span> <span class="string">helm中搜索关键字</span></span><br><span class="line"><span class="string">helm</span> <span class="string">show</span> <span class="bullet">-</span> <span class="string">显示chart信息</span></span><br><span class="line"><span class="string">helm</span> <span class="string">status</span> <span class="bullet">-</span> <span class="string">显示命名版本的状态</span></span><br><span class="line"><span class="string">helm</span> <span class="string">template</span> <span class="bullet">-</span> <span class="string">本地渲染模板</span></span><br><span class="line"><span class="string">helm</span> <span class="string">test</span> <span class="bullet">-</span> <span class="string">执行发布的测试</span></span><br><span class="line"><span class="string">helm</span> <span class="string">uninstall</span> <span class="bullet">-</span> <span class="string">卸载版本</span></span><br><span class="line"><span class="string">helm</span> <span class="string">upgrade</span> <span class="bullet">-</span> <span class="string">升级版本</span></span><br><span class="line"><span class="string">helm</span> <span class="string">verify</span> <span class="bullet">-</span> <span class="string">验证给定路径的chart已经被签名且是合法的</span></span><br><span class="line"><span class="string">helm</span> <span class="string">version</span> <span class="bullet">-</span> <span class="string">打印客户端版本信息</span></span><br></pre></td></tr></table></figure>

<h2 id="操作示范"><a href="#操作示范" class="headerlink" title="操作示范"></a>操作示范</h2><p>Helm 搜索使用模糊字符串匹配算法，可以只输入名字的一部分</p>
<p>用–keep-history甚至可以回滚版本</p>
<p>helm install <u>你命名的release名字</u>&#x2F;<u>你想安装的chart的名称</u></p>
<p>安装chart时创建了一个新的 <em>release</em> 对象。上述发布被命名为 <code>happy-panda</code>。 （如果想让Helm生成一个名称，删除发布名称并使用<code>--generate-name</code>。）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">helm</span> <span class="string">version</span> <span class="comment"># 检查版本</span></span><br><span class="line"><span class="string">helm</span> <span class="string">search</span> <span class="string">hub</span> <span class="comment">#从 Artifact Hub 中查找并列出 helm charts</span></span><br><span class="line"><span class="string">helm</span> <span class="string">repo</span> <span class="string">add</span> <span class="string">bitnami</span> <span class="string">https://charts.bitnami.com/bitnami</span> <span class="comment">#添加chart仓库，可以从Artifact Hub中查找（Artifact Hub中会列出说明）</span></span><br><span class="line"><span class="string">helm</span> <span class="string">repo</span> <span class="string">list</span> <span class="comment">#查看配置的仓库</span></span><br><span class="line"><span class="string">helm</span> <span class="string">search</span> <span class="string">repo</span> <span class="string">bitnami</span> <span class="comment">#查看安装的charts列表</span></span><br><span class="line"><span class="string">helm</span> <span class="string">search</span> <span class="string">repo</span> <span class="comment">#从所添加的仓库中查找chart·</span></span><br><span class="line"><span class="string">helm</span> <span class="string">repo</span> <span class="string">update</span> <span class="comment">#拿到最新的charts列表</span></span><br><span class="line"><span class="string">helm</span> <span class="string">install</span> <span class="string">bitnami/mysql</span> <span class="string">--generate-name</span> <span class="comment">#安装chart,生成名字</span></span><br><span class="line"><span class="string">helm</span> <span class="string">show</span> <span class="string">chart</span> <span class="string">bitnami/mysql</span> <span class="comment">#显示基本信息</span></span><br><span class="line"><span class="string">helm</span> <span class="string">show</span> <span class="string">all</span> <span class="string">bitnami/mysql</span> <span class="comment">#显示全部信息</span></span><br><span class="line"><span class="string">helm</span> <span class="string">list</span> <span class="comment">#查看被发布的chart</span></span><br><span class="line"><span class="string">helm</span> <span class="string">ls</span> <span class="comment">#同上</span></span><br><span class="line"><span class="string">helm</span> <span class="string">uninstall</span> <span class="string">mysql-1612624192</span> <span class="comment">#卸载chart版本（上一条列出来的）</span></span><br><span class="line"><span class="string">helm</span> <span class="string">uninstall</span> <span class="string">mysql-1612624192</span> <span class="string">--keep-history</span> <span class="comment">#也是卸载但是会保存版本历史，甚至可以用helm roll把车开回滚历史</span></span><br><span class="line"><span class="string">helm</span> <span class="string">show</span> <span class="string">values</span> <span class="string">mysql-1612624192</span> <span class="comment">#查看chart中的可配置选项</span></span><br><span class="line"><span class="string">helm</span> <span class="string">rollback</span> <span class="string">happy-panda</span> <span class="number">1</span> <span class="comment">#第一次 revision 的值永远是1</span></span><br><span class="line"><span class="string">helm</span> <span class="string">history</span> <span class="comment">#查看特定release 的修订版本号</span></span><br><span class="line"><span class="string">helm</span> <span class="string">list</span> <span class="string">--all</span> <span class="comment">#展示 Helm 保留的所有 release 记录，包括失败或删除的条目（指定了 --keep-history）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">helm</span> <span class="string">create</span> <span class="comment">#开发chart</span></span><br><span class="line"><span class="string">helm</span> <span class="string">lint</span> <span class="comment">#验证格式是否正确</span></span><br><span class="line"><span class="string">helm</span> <span class="string">package</span> <span class="comment">#将 chart 打包分发</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>Helm</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes学习</title>
    <url>/2022/03/11/Kubernetes%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><a href="https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/">Kubernetes</a>, also known as K8s, is an open-source system for automating deployment, scaling, and management of containerized applications.</p>
<p><a href="https://kubernetes.io/docs/tutorials/">Tutorials</a></p>
<span id="more"></span>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="Node-x2F-节点"><a href="#Node-x2F-节点" class="headerlink" title="Node&#x2F;节点"></a>Node&#x2F;节点</h2><p>kubernetes是用于大规模部署分布式应用的平台，管理着一系列主机或者服服务器 [被称之为**<u>Node&#x2F;节点</u>**]</p>
<h2 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h2><p>每个节点运行若干相互独立的pod[**<u>pod是Kubernetes中可以部署的最小执行单元 &#x3D; 一个或者多个容器的集合</u>**，其中运行了应用的某一部分核心的组件]</p>
<h2 id="Control-Plane"><a href="#Control-Plane" class="headerlink" title="Control Plane"></a>Control Plane</h2><p>需要一个中心计算机来协调均衡多个pod，被称之为**<u>Control Plane&#x2F;控制平面</u>**。控制平面通过专有API与各个节点进行通信，实时检测节点的网络状态来平衡服务器的负载或临时下发指令来应对突发的状况。</p>
<h2 id="Replica-Set"><a href="#Replica-Set" class="headerlink" title="Replica Set"></a>Replica Set</h2><p>备用容器被称之为**<u>Replica Set&#x2F;副本集合</u>**</p>
<h2 id="Cluster-x2F-集群"><a href="#Cluster-x2F-集群" class="headerlink" title="Cluster&#x2F;集群"></a>Cluster&#x2F;集群</h2><p>以上所有节点连同control plane被称之为**<u>Cluster&#x2F;集群</u>**</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220312135630781.png" alt="image-20220312135630781"></p>
<h2 id="Services-x2F-服务"><a href="#Services-x2F-服务" class="headerlink" title="Services&#x2F;服务"></a>Services&#x2F;服务</h2><h3 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h3><p>最基本的将应用端口暴露给外网的方式（还有诸如LoadBalancer， Ingress等）</p>
<h1 id="Download-Kubernetes"><a href="#Download-Kubernetes" class="headerlink" title="Download Kubernetes"></a>Download Kubernetes</h1><ol>
<li><p>Core Kubernetes components</p>
</li>
<li><p>kubectl</p>
<p>The Kubernetes command-line tool, <a href="https://kubernetes.io/docs/reference/kubectl/kubectl/">kubectl</a>, allows you to run commands against Kubernetes clusters.</p>
<p>You can use kubectl to deploy applications, inspect and manage cluster resources, and view logs. For more information including a complete list of kubectl operations, see the <a href="https://kubernetes.io/docs/reference/kubectl/"><code>kubectl</code> reference documentation</a>.</p>
</li>
</ol>
<p><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/">https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">brew</span> <span class="string">install</span> <span class="string">kubectl</span> </span><br><span class="line"><span class="comment"># ensure the version is up-to-date</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">version</span> <span class="string">--client</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220311150643812.png" alt="image-20220311150643812"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220311150717705.png" alt="image-20220311150717705"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220312125715498.png" alt="image-20220312125715498"></p>
<h2 id="Minikube"><a href="#Minikube" class="headerlink" title="Minikube"></a>Minikube</h2><p><a href="https://minikube.sigs.k8s.io/docs/">Minikube</a></p>
<p><a href="https://minikube.sigs.k8s.io/docs/start/">https://minikube.sigs.k8s.io/docs/start/</a></p>
<p><a href="https://github.com/kubernetes/minikube">https://github.com/kubernetes/minikube</a></p>
<blockquote>
<p>brew install minikube</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220311212622084.png" alt="image-20220311212622084"></p>
<p>We need <strong>a container runtime</strong> or <strong>virtual machine manager</strong> on laptop</p>
<p>Minikube has <strong>Docker pre-installed</strong> to run the containers in the cluster</p>
<p>​	Driver means we are hosting Minikube as a container on our local machine</p>
<h3 id="2-Layers-of-Docker"><a href="#2-Layers-of-Docker" class="headerlink" title="2 Layers of Docker"></a>2 Layers of Docker</h3><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220311213805871.png" alt="image-20220311213805871"></p>
<h3 id="minikube启动"><a href="#minikube启动" class="headerlink" title="minikube启动"></a>minikube启动</h3><p>如果纯粹是为了学习和测试，使用Minikube**<u>在本地模拟一个Kubernetes集群</u>**（可以使用 全部功能，但不是真实的生产环境）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">minikube</span> <span class="string">start</span> <span class="comment">#启用本地模拟的集群</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220312125510277.png" alt="image-20220312125510277"></p>
<h2 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h2><p>command line tool for k8s cluster</p>
<p> 命令行工具kubectl来**<u>与kubernetes集群进行交互</u>**</p>
<p>全平台通用（类似docker命令行），可以操纵任何集群，包括minikube</p>
<p>（docker桌面版本一般自带kubectl命令）</p>
<blockquote>
<p>CLI &#x3D; command -line interface</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">version</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220312131635588.png" alt="image-20220312131635588"></p>
<h1 id="应用的部署"><a href="#应用的部署" class="headerlink" title="应用的部署"></a>应用的部署</h1><p>app deployment</p>
<hr>
<p>首先需要创建一个yaml文件，在其中定义应用的基本信息，描述应用部署的整个过程</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/uPic/image-20220312130020333.png" alt="image-20220312130020333"></p>
<p>比如由哪些pods组成，其中运行了哪些容器，什么网络配置</p>
<p>[类似dockerfile，当作一个自动化脚本]</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Letter of inquirying RA/Internship position</title>
    <url>/2022/01/24/Letter-of-inqurying-RA-Internship-position/</url>
    <content><![CDATA[<p>Two versions:</p>
<ol>
<li>Ning Zhang</li>
<li>Samarth</li>
</ol>
<span id="more"></span>

<p> ps:</p>
<p>精简，不用每个项目都写，主要是突出自己的亮点就可以了，尤其是他实验室可能需要的技能。</p>
<h3 id="Ning-Zhang"><a href="#Ning-Zhang" class="headerlink" title="Ning Zhang"></a>Ning Zhang</h3><p>Dear Professor XXX:</p>
<p>Hi, this is Chao Cao, whose UID is 118451091. I am a first year master’s student from Data Science and Analytics program, CMNS department of UMD.</p>
<p>I have always been interested in data science and wish to continue my education in this area. I am wondering if you will recruit new research assistants  this semester? I don’t need funding and just want to be a volunteer to do some research about data science or machine learning. </p>
<p>I studied computer science and technology when I was an undergraduate student at Nanjing University of Telecommunication and Post and currently study data science and analytics. I can use python and jupyter notebook. I also have knowledge about Java, C++, and database. </p>
<p>I have participated in some projects during my undergraduate study. I studied data mining and designed a movie recommendation system. In Summer 2021, I was an internship in NETCIA and I helped improve the accuracy of the remote sensing images recognition with KNN algorithm. Last semester, I contributed to a project <a href="https://github.com/tigboatnc/umd-ds-covid-policy">Covid-Policy-Effectiveness</a>  in DATA602 and I am responsible for data gathering, data scraping, and applying kmeans algorithm to prove a hypothesis that states with similar demographic features have similar covid experiences.</p>
<p>And I think your current research topics about distributed computing and machine learning attract me.</p>
<p>I attached my CV to this email. Please let me know if you have openings. Thanks, and hope you have a wonderful day!</p>
<h3 id="Samarth"><a href="#Samarth" class="headerlink" title="Samarth"></a>Samarth</h3><p>Dear Professor Catherine, </p>
<p>My name is Samarth Negi and I am a Graduate Student at the Science Academy of UMD, pursuing a degree in Machine Learning. </p>
<p>I am currently working on a state wise covid policy effectiveness metric where I correlate various features of each US state like traffic, covid cases, 911 calls etc. with covid policies being implemented, for my project for my Data Science class. While working on this project, I believe I have developed great interest in the field of public policy and statistical analysis (specifically quantitative effects of public policy). </p>
<p>I feel that covid is one of the first massively documented global phenomena and we have extensive datasets that have been recorded and leveraging machine learning and statistical models can bring up great insights and I would really like to work on this field extensively. </p>
<p>I found your research on the effects of travel measures on covid rates to be really insightful and inline with my research aspirations. If you have any ongoing work or projects in this area, I would love to be involved in its research. </p>
<p>Thanks and Regards </p>
]]></content>
      <categories>
        <category>专业相关知识</category>
      </categories>
      <tags>
        <tag>专业相关知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Letter of thanks &amp; TA requrest</title>
    <url>/2022/01/24/Letter-of-thanks-TA-requrest/</url>
    <content><![CDATA[<p>表达感谢，然后询问是否有TA岗位</p>
<span id="more"></span>

<p>Dear Professor XXX:</p>
<p>I hope this email finds you well. </p>
<p>My name is Chao Cao, a first year master student in Data Science and Analytics. I took your course DATA60X during the past semester and I just want to say thank you for being such a great instructor!</p>
<p>I really enjoyed your class and was excited to come to the class. Without your wonderful instruction, I wouldn’t be able to master the knowledge and skills about probability and statistics&#x2F; realize our final project. Thank you for facilitating such a positive learning environment.</p>
<p>I have always been interested in XXXXX and your class enabled me to gain more confidence to continue my education in this area. I am wondering if you will recruit new research assistants next semester? I don’t need funding and just want to be a volunteer to do some research about data science&#x2F;XXX.</p>
<p>I have participated in some projects during undergraduate study.简单的讲一下自己的优势能力和背景。I attached me CV to this email. Please let me know if you have openings. Thanks and hope you have a wonderful holiday!</p>
<p>Best wishes.</p>
]]></content>
      <categories>
        <category>专业相关知识</category>
      </categories>
      <tags>
        <tag>专业相关知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Some menus 1</title>
    <url>/2022/04/09/Some-menus-1/</url>
    <content><![CDATA[<p>一些遇到了但分不清的菜单词条</p>
<span id="more"></span>

<h1 id="Lidl"><a href="#Lidl" class="headerlink" title="Lidl"></a>Lidl</h1><p>法棍面包区</p>
<ol>
<li><p>Rustic Baguette</p>
<p>乡村面包</p>
<p>The baguette classique may be more easily recognizable, but this “traditional baguette” is quite assuredly a favorite among French people. It is <u>made from flour without additives and has a longer resting time</u>. Its crunchy crust and spaced-out crumb makes it a great choice to go with your meals.</p>
</li>
<li><p>French Baguette</p>
<p>长法棍, 法式长棍面包, 法国面包</p>
<p>In the U.S., the term “French bread” refers to a loaf of a certain shape, i.e., long and thin. The recipe is not defined and ‘French bread’ can be <u>made with sourdough or even wholemeal or granary</u>. American-style French bread also tends to be longer and wider than a traditional baguette and has rounded ends.</p>
</li>
<li><p>Baguette</p>
<p>（法国）脆皮白面包棒</p>
<p>​	Every French person has tasted it, and every French person has loved it: it is the one baguette to rule them all. Weighing up at roughly 250 grams, this one will consistently be found in any bakery, and even abroad. Whether you prefer it well-baked or not so, everyone will always like it. No wonder it is now a well-known national symbol.</p>
</li>
</ol>
<p>dinner roll</p>
<p>​	A roll is a small, often round loaf of bread served as a meal accompaniment (eaten plain or with butter). A roll can be served and eaten whole or cut transversely and dressed with filling between the two halves. Rolls are also commonly used to make sandwiches similar to those produced using slices of bread.</p>
<p>pretzel roll</p>
<p>​	椒盐脆饼卷</p>
<p>tenderloin steak</p>
<p>​	里脊牛排；嫩牛排</p>
<p>breast fillet   </p>
<p>​	chicken breast fillet 鸡胸肉</p>
<p>beef stew</p>
<p>​	（炖的）牛肉</p>
<p>Filet mignon </p>
<p>​	免翁牛柳; 菲力牛排; 菲列牛排; 腓力牛排；牛排片</p>
<p>beef stir fry</p>
<p>​	牛肉炒【Sliced Beef Stir Fry Noodle: 牛肉炒面】</p>
<h1 id="Domino’s"><a href="#Domino’s" class="headerlink" title="Domino’s"></a>Domino’s</h1><p>饼底</p>
<p>1. </p>
]]></content>
      <categories>
        <category>尘世间</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark安装</title>
    <url>/2022/04/07/Spark%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>Apache Spark™ is a multi-language engine for executing data engineering, data science, and machine learning on single-node machines or clusters.</p>
<p><a href="https://spark.apache.org/">https://spark.apache.org/</a></p>
<span id="more"></span>

<h1 id="How-to-install-Spark-on-Windows"><a href="#How-to-install-Spark-on-Windows" class="headerlink" title="How to install Spark on Windows"></a>How to install Spark on Windows</h1><p><a href="https://spark.apache.org/downloads.html">https://spark.apache.org/downloads.html</a></p>
<p>Spark is a unified analytics engine for large-scale data processing. It provides high-level APIs in Scala, Java, Python, and R, and an optimized engine that supports general computation graphs for data analysis. It also supports a rich set of higher-level tools including Spark SQL for SQL and DataFrames, MLlib for machine learning, GraphX for graph processing, and Structured Streaming for stream processing.</p>
<p><a href="https://phoenixnap.com/kb/install-spark-on-windows-10">https://phoenixnap.com/kb/install-spark-on-windows-10</a></p>
<h2 id="Installing-with-PyPi"><a href="#Installing-with-PyPi" class="headerlink" title="Installing with PyPi"></a>Installing with PyPi</h2><p><a href="https://pypi.org/project/pyspark/">PySpark</a> is now available in pypi. To install just run <code>pip install pyspark</code>.</p>
]]></content>
      <categories>
        <category>课程学习</category>
      </categories>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Break Pictures</title>
    <url>/2022/04/05/Spring-Break-Pictures/</url>
    <content><![CDATA[<p>LA之旅</p>
<span id="more"></span>

<h1 id="03172022"><a href="#03172022" class="headerlink" title="03172022"></a>03172022</h1><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052151375.JPG" alt="IMG_2170"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052152798.jpg" alt="IMG_2171"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052152699.jpg" alt="IMG_2172"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052152190.jpg" alt="IMG_2173"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052152180.jpg" alt="IMG_2174"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052154863.PNG" alt="IMG_2175"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052155052.jpg" alt="IMG_2176"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052155463.jpg" alt="IMG_2177"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052155943.jpg" alt="IMG_2178"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052156258.jpg" alt="IMG_2180"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052156354.jpg" alt="IMG_2181"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052156075.jpg" alt="IMG_2182"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052156864.jpg" alt="IMG_2183"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052157462.jpg" alt="IMG_2184"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052157305.jpg" alt="IMG_2185"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052157071.jpg" alt="IMG_2186"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052157714.jpg" alt="IMG_2187"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052157257.jpg" alt="IMG_2188"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052158506.jpg" alt="IMG_2189"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052158485.jpg" alt="IMG_2190"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052159312.jpg" alt="IMG_2191"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052200428.jpg" alt="IMG_2192"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052200073.jpg" alt="IMG_2193"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052200613.jpg" alt="IMG_2194"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052200781.jpg" alt="IMG_2195"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052201946.jpg" alt="IMG_2196"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052202605.jpg" alt="IMG_2199"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052202911.jpg" alt="IMG_2201"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052202889.jpg" alt="IMG_2202"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052202927.jpg" alt="IMG_2203"></p>
<img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204052202623.JPG" alt="IMG_2204"  />

<h1 id="03182022"><a href="#03182022" class="headerlink" title="03182022"></a>03182022</h1><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080204099.jpg" alt="IMG_2207"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080204773.jpg" alt="IMG_2208"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080204378.JPG" alt="IMG_2209"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080204837.jpg" alt="IMG_2210"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080204142.jpg" alt="IMG_2211"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080205115.jpg" alt="IMG_2212"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080205662.jpg" alt="IMG_2213"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080205565.jpg" alt="IMG_2215"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080205174.jpg" alt="IMG_2216"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080206972.jpg" alt="IMG_2217"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080206453.jpg" alt="IMG_2218"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080206996.jpg" alt="IMG_2219"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080206969.jpg" alt="IMG_2220"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080207653.jpg" alt="IMG_2222"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080206383.jpg" alt="IMG_2221"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080207434.jpg" alt="IMG_2223"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080208212.jpg" alt="IMG_2224"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080208419.jpg" alt="IMG_2225"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080209513.jpg" alt="IMG_2226"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080209507.jpg" alt="IMG_2227"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080209647.jpg" alt="IMG_2229"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080209219.jpg" alt="IMG_2230"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080209873.jpg" alt="IMG_2231"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080210286.jpg" alt="IMG_2232"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080210389.jpg" alt="IMG_2233"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080210786.jpg" alt="IMG_2234"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080210516.jpg" alt="IMG_2235"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080210474.jpg" alt="IMG_2236"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080211486.jpg" alt="IMG_2237"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080211434.jpg" alt="IMG_2238"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080211798.jpg" alt="IMG_2239"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080211711.jpg" alt="IMG_2240"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080211777.jpg" alt="IMG_2241"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080211849.jpg" alt="IMG_2242"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080212584.jpg" alt="IMG_2243"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080212334.jpg" alt="IMG_2244"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080212083.jpg" alt="IMG_2245"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080212354.jpg" alt="IMG_2246"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080212321.jpg" alt="IMG_2247"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080212164.jpg" alt="IMG_2249"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080213002.jpg" alt="IMG_2250"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080213164.jpg" alt="IMG_2252"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080213974.jpg" alt="IMG_2253"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080213406.jpg" alt="IMG_2254"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080213821.jpg" alt="IMG_2255"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080213361.jpg" alt="IMG_2256"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080213331.jpg" alt="IMG_2257"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080214887.jpg" alt="IMG_2258"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080214187.jpg" alt="IMG_2259"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080214160.jpg" alt="IMG_2260"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080214509.jpg" alt="IMG_2261"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080214704.jpg" alt="IMG_2262"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080215696.jpg" alt="IMG_2263"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080215396.jpg" alt="IMG_2264"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080215172.jpg" alt="IMG_2265"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080215319.jpg" alt="IMG_2266"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080215178.jpg" alt="IMG_2267"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080215272.jpg" alt="IMG_2268"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080216674.jpg" alt="IMG_2269"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080216148.jpg" alt="IMG_2270"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080216258.jpg" alt="IMG_2271"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080216032.jpg" alt="IMG_2272"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080216178.jpg" alt="IMG_2273"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080216066.jpg" alt="IMG_2274"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080217460.jpg" alt="IMG_2275"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080217358.jpg" alt="IMG_2276"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080217448.jpg" alt="IMG_2277"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080217820.jpg" alt="IMG_2278"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080217656.jpg" alt="IMG_2279"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080217180.jpg" alt="IMG_2280"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080218934.jpg" alt="IMG_2281"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080218956.jpg" alt="IMG_2282"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080218377.jpg" alt="IMG_2283"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080218538.jpg" alt="IMG_2284"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080218961.jpg" alt="IMG_2285"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080218930.jpg" alt="IMG_2286"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080219397.jpg" alt="IMG_2287"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080219316.jpg" alt="IMG_2288"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080219896.jpg" alt="IMG_2289"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080219586.jpg" alt="IMG_2290"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080219992.jpg" alt="IMG_2291"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080219755.jpg" alt="IMG_2292"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080220984.jpg" alt="IMG_2293"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080220034.jpg" alt="IMG_2294"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080220183.jpg" alt="IMG_2295"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080221708.jpg" alt="IMG_2296"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080221074.jpg" alt="IMG_2297"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080222053.jpg" alt="IMG_2298"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080222719.jpg" alt="IMG_2299"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080222191.jpg" alt="IMG_2300"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080222496.jpg" alt="IMG_2301"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080223007.jpg" alt="IMG_2302"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080223390.jpg" alt="IMG_2303"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080223934.jpg" alt="IMG_2304"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080223967.jpg" alt="IMG_2305"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080223545.jpg" alt="IMG_2306"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080224461.jpg" alt="IMG_2307"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080224199.jpg" alt="IMG_2308"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080224780.jpg" alt="IMG_2309"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080224477.jpg" alt="IMG_2310"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080224425.jpg" alt="IMG_2311"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080224568.jpg" alt="IMG_2312"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080225878.jpg" alt="IMG_2313"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080225168.jpg" alt="IMG_2314"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080225444.jpg" alt="IMG_2315"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080229724.JPG" alt="IMG_2321"><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080229434.JPG" alt="IMG_2320"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080229771.jpg" alt="IMG_2322"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080229153.jpg" alt="IMG_2323"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080229356.jpg" alt="IMG_2324"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080229770.jpg" alt="IMG_2325"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080230146.jpg" alt="IMG_2326"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080230357.jpg" alt="IMG_2327"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080230466.jpg" alt="IMG_2328"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080230251.jpg" alt="IMG_2329"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080230421.JPG" alt="IMG_2330"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080231805.JPG" alt="IMG_2331"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080231814.jpg" alt="IMG_9180"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080231317.jpg" alt="IMG_9181"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080231952.jpg" alt="IMG_9182"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080231577.jpg" alt="IMG_9183"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080232351.jpg" alt="IMG_9227"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080232947.jpg" alt="IMG_9229"></p>
<h1 id="03192022"><a href="#03192022" class="headerlink" title="03192022"></a>03192022</h1><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080249774.jpg" alt="IMG_2343"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080249156.jpg" alt="IMG_2344"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080249773.jpg" alt="IMG_2345"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080249900.jpg" alt="IMG_2346"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080250451.jpg" alt="IMG_2347"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080250679.jpg" alt="IMG_2348"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080250121.jpg" alt="IMG_2349"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080250405.PNG" alt="IMG_2350"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080250469.PNG" alt="IMG_2351"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080251062.jpg" alt="IMG_2352"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080251123.jpg" alt="IMG_2353"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080251447.jpg" alt="IMG_2354"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080251686.jpg" alt="IMG_2355"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080251194.jpg" alt="IMG_2356"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080252075.jpg" alt="IMG_2357"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080252303.jpg" alt="IMG_2358"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080252633.jpg" alt="IMG_2359"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080252752.jpg" alt="IMG_2360"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080252912.jpg" alt="IMG_2361"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080253116.jpg" alt="IMG_2362"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080253202.jpg" alt="IMG_2363"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080253018.jpg" alt="IMG_2364"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080253036.jpg" alt="IMG_2365"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080253271.jpg" alt="IMG_2366"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080253466.jpg" alt="IMG_2367"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080254667.jpg" alt="IMG_2368"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080254725.jpg" alt="IMG_2369"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080254547.jpg" alt="IMG_2370"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080254590.jpg" alt="IMG_2371"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080254806.jpg" alt="IMG_2372"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080255902.jpg" alt="IMG_2373"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080255838.jpg" alt="IMG_2374"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080255571.jpg" alt="IMG_2375"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080255437.jpg" alt="IMG_2376"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080255729.jpg" alt="IMG_2377"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080255822.jpg" alt="IMG_2378"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080256374.jpg" alt="IMG_2379"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080256915.jpg" alt="IMG_2380"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080256839.jpg" alt="IMG_2381"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080256942.jpg" alt="IMG_2382"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080257560.jpg" alt="IMG_2383"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080257616.jpg" alt="IMG_2384"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080257393.jpg" alt="IMG_2385"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080257787.jpg" alt="IMG_2386"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080257871.jpg" alt="IMG_2387"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080257917.jpg" alt="IMG_2388"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080258969.jpg" alt="IMG_2389"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080258405.jpg" alt="IMG_2391"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080258221.jpg" alt="IMG_2395"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080258870.jpg" alt="IMG_2396"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080258144.jpg" alt="IMG_2397"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080258931.jpg" alt="IMG_2398"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080258191.jpg" alt="IMG_2399"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080259119.jpg" alt="IMG_2400"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080259911.jpg" alt="IMG_2401"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080259900.jpg" alt="IMG_2402"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080259745.jpg" alt="IMG_2403"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080259420.jpg" alt="IMG_2404"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080259451.jpg" alt="IMG_2405"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080300550.jpg" alt="IMG_2406"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080300373.jpg" alt="IMG_2407"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080300970.jpg" alt="IMG_2408"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080301124.jpg" alt="IMG_2409"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080301165.jpg" alt="IMG_2410"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080301316.jpg" alt="IMG_2411"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080301132.jpg" alt="IMG_2412"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080301087.jpg" alt="IMG_2413"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080302817.jpg" alt="IMG_2414"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080302553.jpg" alt="IMG_2415"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080302103.jpg" alt="IMG_2416"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080302880.jpg" alt="IMG_2417"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080302076.jpg" alt="IMG_2418"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080302780.jpg" alt="IMG_2419"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080303407.jpg" alt="IMG_2420"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080303655.jpg" alt="IMG_2421"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080303010.jpg" alt="IMG_2422"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080303706.jpg" alt="IMG_2423"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080303956.jpg" alt="IMG_2424"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080304410.jpg" alt="IMG_2425"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080304394.jpg" alt="IMG_2426"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204080304601.jpg" alt="IMG_2427"></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Break Plan</title>
    <url>/2022/03/09/Spring-Break-Plan/</url>
    <content><![CDATA[<p>可以有LA和Puerto Rico两个目的地，多种方案，可调整空间较多</p>
<p>0311更新：LA</p>
<p>0313更新：大致行程.pdf</p>
<span id="more"></span>

<h1 id="人员"><a href="#人员" class="headerlink" title="人员"></a>人员</h1><p>4-6为佳</p>
<p>暂定人员：</p>
<ol>
<li>jinhua</li>
<li>chao</li>
<li>taihang</li>
<li>Samarth</li>
<li>Samarth‘s friend</li>
<li>Samarth‘s friend’s friend</li>
</ol>
<h1 id="行程"><a href="#行程" class="headerlink" title="行程"></a>行程</h1><h2 id="待定"><a href="#待定" class="headerlink" title="待定"></a>待定</h2><p>Universal 环球影城</p>
<h2 id="18"><a href="#18" class="headerlink" title="18"></a>18</h2><p>早6点飞机</p>
<p>（到洛杉矶白天大概9点）</p>
<p>museum: getty center</p>
<p>the last bookstore</p>
<p>bradbury building</p>
<p>broad museum</p>
<p>（晚餐——）</p>
<h2 id="19"><a href="#19" class="headerlink" title="19"></a>19</h2><p>walk of fame 星光大道</p>
<p>Hollywood招牌</p>
<p>beverly hill</p>
<p>(餐厅：晚餐好一点)</p>
<p>买食物和水第二天准备</p>
<h2 id="20"><a href="#20" class="headerlink" title="20"></a>20</h2><p>乔舒亚国家公园</p>
<h2 id="21"><a href="#21" class="headerlink" title="21"></a>21</h2><p>海滩：威尼斯海滩&#x2F;曼哈顿海滩&#x2F;Santa Monica Beach</p>
<p>（晚餐——）</p>
<h2 id="22"><a href="#22" class="headerlink" title="22"></a>22</h2><p>Griffith Obsercatory 格里菲斯天文台——LA夜景</p>
<p>lalalanor：爱乐之城拍摄地</p>
<h2 id="23"><a href="#23" class="headerlink" title="23"></a>23</h2><p>白天没事</p>
<p>晚上七点半开始：NBA: Laker ($300 23号 主场）</p>
<h2 id="剩下时间"><a href="#剩下时间" class="headerlink" title="剩下时间"></a>剩下时间</h2><p>24&#x2F;25</p>
<h2 id="26"><a href="#26" class="headerlink" title="26"></a>26</h2><p>回</p>
<h1 id="费用"><a href="#费用" class="headerlink" title="费用"></a>费用</h1><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202203111047324.jpg" alt="59576beb136f193091531f30a242227"></p>
<p>total: $ 480 + 450 + 700 + 960 + 600 &#x3D; $3190</p>
<p>油费+停车费：$60*8 &#x3D; $480 - </p>
<p>球赛：$450 + </p>
<p>机票：$700 -</p>
<p>住宿费：$120*8 &#x3D; $960</p>
<p>伙食费：$600</p>
<hr>
<p>Spring LA Travel Plan-draft</p>
<embed id="pdfPlayer" src="E:\My Drive\henryvarro666.github.io\source\_posts\Spring-Break-Plan" type="application/pdf" width="100%" height="600" >

<embed id="pdfPlayer" src="C:\Users\question.pdf" type="application/pdf" width="100%" height="600" >
]]></content>
      <categories>
        <category>尘世间</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring2022 课程安排</title>
    <url>/2022/01/29/Spring2022-%E8%AF%BE%E7%A8%8B%E5%AE%89%E6%8E%92/</url>
    <content><![CDATA[<p>Spring2022 Courses Name &amp; Schedule</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th>Monday</th>
<th>Tuesday</th>
<th>Wednesday</th>
<th>Thursday</th>
</tr>
</thead>
<tbody><tr>
<td>DATA 606</td>
<td>DATA 641</td>
<td>DATA 604</td>
<td>DATA 605</td>
</tr>
<tr>
<td><strong>Algorithms for Data Science</strong></td>
<td><strong>Natural Language Processing</strong></td>
<td><strong>Data Representation and Modeling</strong></td>
<td><strong>Big Data Systems</strong></td>
</tr>
<tr>
<td>Abdirisak Mohamed</td>
<td>Shabnam Tafreshi</td>
<td>Wojciech Czaja</td>
<td>Prem Saggar</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>UMD</category>
      </categories>
      <tags>
        <tag>UMD</tag>
      </tags>
  </entry>
  <entry>
    <title>Statistical Simulation in Python</title>
    <url>/2022/01/25/Statistical-Simulation-in-Python/</url>
    <content><![CDATA[<h3 id="Python中的统计模拟"><a href="#Python中的统计模拟" class="headerlink" title="Python中的统计模拟"></a>Python中的统计模拟</h3><p>Python’s numpy random module is a robust and flexible tool that lets us work with random variables.</p>
<span id="more"></span>

<p><a href="https://datascience103579984.wordpress.com/2019/09/26/statistical-simulation-in-python-from-datacamp/">https://datascience103579984.wordpress.com/2019/09/26/statistical-simulation-in-python-from-datacamp/</a></p>
<hr>
<h5 id="1-Introduction-to-random-variables"><a href="#1-Introduction-to-random-variables" class="headerlink" title="1. Introduction to random variables"></a>1. Introduction to random variables</h5><ol>
<li>随机变量导论</li>
</ol>
<p>A random variable is a quantity that can take on multiple values based on random chance. When the variable can take on infinitely many values, it’s called a continuous random variable. Think about the height of a person. Although the height lies within some reasonable limits on average, the actual value could have infinite possibilities in that interval. That is why we term it as a continuous random variable.</p>
<p>随机变量是一个可以基于随机机会取多个值的量。当变量可以取无穷多个值时，称之为连续随机变量。想想一个人的身高。虽然平均高度位于某些合理的限度之内，但实际值在该区间内可能具有无限的可能性。这就是为什么我们称它为连续随机变量。</p>
<h5 id="2-Introduction-to-random-variables"><a href="#2-Introduction-to-random-variables" class="headerlink" title="2. Introduction to random variables"></a>2. Introduction to random variables</h5><ol start="2">
<li>随机变量导论</li>
</ol>
<p>Similarly, if the variable can only take a finite set of values, it is called a discrete random variable. The roll of a six-sided die can have only one of six possible outcomes and is thus, considered a discrete random variable. Next, let’s look at probability distributions.</p>
<p>类似地，如果变量只能取一组有限的值，则称之为离散随机变量。六面骰子的滚动只能有六种可能的结果之一，因此，被认为是一个离散的随机变量。接下来，让我们看看概率分布。</p>
<h5 id="3-Probability-distributions"><a href="#3-Probability-distributions" class="headerlink" title="3. Probability distributions"></a>3. Probability distributions</h5><ol start="3">
<li>概率分布</li>
</ol>
<p>A probability distribution is a mapping from the set of possible outcomes of a random variable to the probability of observing that outcome. It tells you how likely you are to observe a given outcome or a set of outcomes. Just like random variables, probability distributions are either discrete or continuous depending on the type of random variable they represent. For continuous random variables, the distribution is represented by a probability density function and probability is typically defined over an interval. The normal distribution is an example of a continuous distribution.</p>
<p>概率分布是从一个随机变量的可能结果集到观察该结果的概率的映射。它告诉你你观察一个给定结果或一系列结果的可能性有多大。就像随机变量一样，概率分布是离散的或连续的，这取决于它们所代表的随机变量的类型。对于连续的随机变量，分布用概率密度函数表示，概率通常定义在一个区间内。正态分布是连续分布的一个例子。</p>
<h5 id="4-Probability-distributions"><a href="#4-Probability-distributions" class="headerlink" title="4. Probability distributions"></a>4. Probability distributions</h5><ol start="4">
<li>概率分布</li>
</ol>
<p>For discrete random variables, the distribution is represented by a probability mass function and probability can be defined at a single point or over an interval. Among discrete distributions, binomial and Poisson distributions are widely used. Python’s numpy random module is a robust and flexible tool that lets us work with random variables.</p>
<p>对于离散的随机变量，分布用概率质量函数表示，概率可以定义在一个点上或者在一个区间上。在离散分布中，二项分布和泊松分布得到了广泛的应用。的 numpy random 模块是一个健壮而灵活的工具，可以让我们处理随机变量。</p>
<h5 id="np-random-choice"><a href="#np-random-choice" class="headerlink" title="np.random.choice()"></a>np.random.choice()</h5><p>a remarkably useful function for simulations</p>
<p><a href="https://numpy.org/doc/stable/reference/random/generated/numpy.random.choice.html">https://numpy.org/doc/stable/reference/random/generated/numpy.random.choice.html</a></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202201270002941.png" alt="image-20220127000226886"></p>
<p>*：<br>replace后面的True和False首字母一定大写</p>
<h5 id="numpy-random-poisson"><a href="#numpy-random-poisson" class="headerlink" title="numpy.random.poisson"></a>numpy.random.poisson</h5><p><a href="https://numpy.org/doc/stable/reference/random/generated/numpy.random.poisson.html">numpy.random.poisson</a></p>
<hr>
<p>01302022</p>
<h3 id="Simulation-basics"><a href="#Simulation-basics" class="headerlink" title="Simulation  basics"></a>Simulation  basics</h3><p>仿真</p>
<h5 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h5><p>Simulations typically involves the following steps. </p>
<pre><code> 1) Define the set of outcomes associated with a random variable. 
 2) Assign a probability to each of these outcomes - the probability distribution. 
 3) Define the relationship between multiple random variables. These three steps essentially describe our statistical model.
 4) Draw samples from the probability distributions. 
 5) Analyze the sample outcomes. 
</code></pre>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202201300944523.png" alt="image-20220130094402454"></p>
<p>Simulation involves repeated random sampling. The first step then is to get <strong>one</strong> random sample. Once we have that, all we do is repeat the process multiple times.</p>
<p> The first two steps of running a simulation - defining a random variable and assigning probabilities.</p>
<p><a href="https://medium.com/@manilwagle/probability-and-simulation-6a28fc1f1cb0">https://medium.com/@manilwagle/probability-and-simulation-6a28fc1f1cb0</a></p>
<p>Conditional Probability</p>
<p>Bayes Rule</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202201301057851.png" alt="image-20220130105728817"></p>
<p>Independent Events</p>
<p>P(AB)&#x3D;P(A)P(B)</p>
<p>边际概率？</p>
]]></content>
      <categories>
        <category>课程学习</category>
      </categories>
      <tags>
        <tag>DATA606</tag>
      </tags>
  </entry>
  <entry>
    <title>assignment0</title>
    <url>/2022/02/01/assignment0/</url>
    <content><![CDATA[<p>641 NLP assignment 4</p>
<span id="more"></span>

<p>Q4:</p>
<p>如果我们选取较大的k值，就相当于用较大邻域中的训练数据进行预测，这时与输入实例较远的（不相似）训练实例也会对预测起作用，使预测发生错误，k值的增大意味着整体模型变得简单。</p>
]]></content>
      <categories>
        <category>课程学习</category>
      </categories>
      <tags>
        <tag>DATA641</tag>
      </tags>
  </entry>
  <entry>
    <title>b站学习资源1</title>
    <url>/2022/02/08/b%E7%AB%99%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%901/</url>
    <content><![CDATA[<p><a href="https://space.bilibili.com/97139894/"><strong>逆风微笑的代码狗</strong></a>群里找到的B站指南.doc</p>
<p>​	费曼学习法：能把一个知识点讲出所以然来，讲到别人懂，说明是真的懂</p>
<hr>
<p><a href="https://www.bilibili.com/video/BV1pW411A7a5">【尚硅谷】Git与GitHub基础全套完整版教程（快速上手，一套搞定）</a></p>
<p><a href="https://www.bilibili.com/video/BV1Sv411r7vd">【小白入门 通俗易懂】2021韩顺平 一周学会Linux</a></p>
<span id="more"></span>

<h4 id="一、计算机网络"><a href="#一、计算机网络" class="headerlink" title="一、计算机网络"></a>一、计算机网络</h4><h5 id="1-计算机网络微课堂"><a href="#1-计算机网络微课堂" class="headerlink" title="1.  计算机网络微课堂"></a>1.  计算机网络微课堂</h5><p><a href="https://www.bilibili.com/video/BV1c4411d7jb?p=1">https://www.bilibili.com/video/BV1c4411d7jb?p=1</a></p>
<p>讲师：湖科大教书匠</p>
<p>评价：通俗易懂，重点知识十分细致，配合实验，而且有考研408 的难题的讲解，也是非常适合考研党，除了课程内容外还有很多习题讲解视频。因此就业党和考研党都可以食用</p>
<h5 id="2-王道计算机考研-计算机网络"><a href="#2-王道计算机考研-计算机网络" class="headerlink" title="2.  王道计算机考研 计算机网络"></a>2.  王道计算机考研 计算机网络</h5><p><a href="https://www.bilibili.com/video/BV19E411D78Q?p=1">https://www.bilibili.com/video/BV19E411D78Q?p=1</a></p>
<p>UP：王道论坛</p>
<p>评价：小姐姐声音非常好听，百听不厌，内容与考研高度贴合，非常适合考研党和声音控</p>
<h4 id="二、数据结构与算法"><a href="#二、数据结构与算法" class="headerlink" title="二、数据结构与算法"></a>二、数据结构与算法</h4><h5 id="1-【郝斌】数据结构入门"><a href="#1-【郝斌】数据结构入门" class="headerlink" title="1.【郝斌】数据结构入门"></a>1.【郝斌】数据结构入门</h5><p>   <a href="https://www.bilibili.com/video/BV11s41167h6?p=1">https://www.bilibili.com/video/BV11s41167h6?p=1</a></p>
<p>   老师：郝斌</p>
<p>   评价：思路是以初学者的思路来思考的，非常适合小白</p>
<h5 id="2-【C语言描述】《数据结构和算法》（小甲鱼）"><a href="#2-【C语言描述】《数据结构和算法》（小甲鱼）" class="headerlink" title="2. 【C语言描述】《数据结构和算法》（小甲鱼）"></a>2. 【C语言描述】《数据结构和算法》（小甲鱼）</h5><pre><code>https://www.bilibili.com/video/BV1jW411K7yg?p=1
</code></pre>
<p>   UP：鱼C-小甲鱼</p>
<p>   评价：良心 up ，授课风格相比大学教授，语言风趣幽默，不死板，用例子带知识点，容易听得进去，亲和力拉满</p>
<h5 id="3-尚硅谷-Java-数据结构与-Java-算法（Java数据结构与算法）"><a href="#3-尚硅谷-Java-数据结构与-Java-算法（Java数据结构与算法）" class="headerlink" title="3. 尚硅谷 Java 数据结构与 Java 算法（Java数据结构与算法）"></a>3. 尚硅谷 Java 数据结构与 Java 算法（Java数据结构与算法）</h5><p>​		<a href="https://www.bilibili.com/video/BV1E4411H73v?p=1">https://www.bilibili.com/video/BV1E4411H73v?p=1</a></p>
<p>​		UP：尚硅谷</p>
<p>​		讲师：韩顺平</p>
<p>​		评价：用JAVA语言讲数据结构和算法，韩老师视频内容全，并且每次课都会带着你写代码，把每一个例子都会实现，韩老师口碑也不必多言了 </p>
<h4 id="三、操作系统"><a href="#三、操作系统" class="headerlink" title="三、操作系统"></a>三、操作系统</h4><h5 id="1-完结-2020-南京大学-操作系统：设计与实现-蒋炎岩"><a href="#1-完结-2020-南京大学-操作系统：设计与实现-蒋炎岩" class="headerlink" title="1. [完结] 2020 南京大学 操作系统：设计与实现 (蒋炎岩)"></a>1. [完结] 2020 南京大学 操作系统：设计与实现 (蒋炎岩)</h5><p>   <a href="https://www.bilibili.com/video/BV1N741177F5?p=1">https://www.bilibili.com/video/BV1N741177F5?p=1</a></p>
<p>   评价：南大的课质量真的硬，老师讲课时用的课本是 Remzi 的 Operating Systems: Three Easy Pieces ，老师的每一节视频都比较长，一次肝完贼爽，老师把晦涩的东西讲的也非常的通俗易懂，豁然开朗</p>
<h5 id="2-清华-操作系统原理-向勇、陈渝"><a href="#2-清华-操作系统原理-向勇、陈渝" class="headerlink" title="2. 清华 操作系统原理(向勇、陈渝)"></a>2. 清华 操作系统原理(向勇、陈渝)</h5><p>​		<a href="https://www.bilibili.com/video/BV1uW411f72n">https://www.bilibili.com/video/BV1uW411f72n</a></p>
<p>​		评价：讲解非常细致，但是稍微需要有一定的基础（毕竟老师平时是给清华大学讲课的）对于我这种考不上清华的人来说，能给我个听清华老师讲课的机会，还有什么可说的呢？</p>
<h4 id="四、计算机组成原理"><a href="#四、计算机组成原理" class="headerlink" title="四、计算机组成原理"></a>四、计算机组成原理</h4><h5 id="1-计算机组成原理（哈工大刘宏伟）"><a href="#1-计算机组成原理（哈工大刘宏伟）" class="headerlink" title="1. 计算机组成原理（哈工大刘宏伟）"></a>1. 计算机组成原理（哈工大刘宏伟）</h5><p>​	<a href="https://www.bilibili.com/video/BV1t4411e7LH?p=1">https://www.bilibili.com/video/BV1t4411e7LH?p=1</a></p>
<p>​	评价：他的课课不仅适合考研人，也非常适合初学者，初学者也听得懂。建议 1.5 倍速食用。</p>
<h4 id="五、编译原理"><a href="#五、编译原理" class="headerlink" title="五、编译原理"></a>五、编译原理</h4><h5 id="1-编译原理（哈工大）"><a href="#1-编译原理（哈工大）" class="headerlink" title="1. 编译原理（哈工大）"></a>1. 编译原理（哈工大）</h5><p>​	<a href="https://www.bilibili.com/video/BV1zW411t7YE?p=1">https://www.bilibili.com/video/BV1zW411t7YE?p=1</a></p>
<p>​	评价：PPT 做的非常认真，讲得也很通俗易懂，思路清晰。直观简洁的，全程没有一句废话。</p>
<hr>
<p>上面五块内容很多选用了大学教授的课程视频，因为这几门课原本就是科班生的必修课，加上近来针对新人和应届生的面试逐渐“八股化”，因此很多概念性的课本知识不得不补。</p>
<hr>
<h4 id="六、编程语言学习"><a href="#六、编程语言学习" class="headerlink" title="六、编程语言学习"></a>六、编程语言学习</h4><p>以JAVA为例，目前B站上从JAVA基础一路讲到分布式的比较知名的组织有：</p>
<p><u>尚硅谷</u></p>
<p><u>黑马程序员</u></p>
<p><u>动力节点</u></p>
<p>这部分编程语言学习，不建议分块左右横跳，跟着哪套教程学，就一路学到底，因为每个老师授课习惯不同，顺序也略有差异，而且经常用一个例子由浅入深改造讲解，中途换课程容易断档，不过你可以放心，这三家的虽然各有特点，但是都足够给你讲明白！</p>
<h4 id="七、设计模式"><a href="#七、设计模式" class="headerlink" title="七、设计模式"></a>七、设计模式</h4><h5 id="1-尚硅谷设计模式（图解-框架源码剖析）"><a href="#1-尚硅谷设计模式（图解-框架源码剖析）" class="headerlink" title="1. 尚硅谷设计模式（图解 + 框架源码剖析）"></a>1. 尚硅谷设计模式（图解 + 框架源码剖析）</h5><p>   <a href="https://www.bilibili.com/video/BV1G4411c7N4">https://www.bilibili.com/video/BV1G4411c7N4</a></p>
<p>   评价：有图有源码，良心黑马程序员 </p>
<h5 id="2-Java-设计模式详解"><a href="#2-Java-设计模式详解" class="headerlink" title="2. Java 设计模式详解"></a>2. Java 设计模式详解</h5><p>​		<a href="https://www.bilibili.com/video/BV1Np4y1z7BU">https://www.bilibili.com/video/BV1Np4y1z7BU</a></p>
<p>​		评价：从设计原则讲起，知其然知其所以然</p>
<h4 id="八、MYSQL"><a href="#八、MYSQL" class="headerlink" title="八、MYSQL"></a>八、MYSQL</h4><h5 id="1-MySQL基础教程丨mysql数据库实战（sql数据库优化）"><a href="#1-MySQL基础教程丨mysql数据库实战（sql数据库优化）" class="headerlink" title="1. MySQL基础教程丨mysql数据库实战（sql数据库优化）"></a>1. MySQL基础教程丨mysql数据库实战（sql数据库优化）</h5><p>   <a href="https://www.bilibili.com/video/BV1xW411u7ax">https://www.bilibili.com/video/BV1xW411u7ax</a></p>
<p>   课程来自尚硅谷，有基础有实战。</p>
<h5 id="2-尚硅谷MySQL数据库高级，mysql优化，数据库优化"><a href="#2-尚硅谷MySQL数据库高级，mysql优化，数据库优化" class="headerlink" title="2. 尚硅谷MySQL数据库高级，mysql优化，数据库优化"></a>2. 尚硅谷MySQL数据库高级，mysql优化，数据库优化</h5><p>​		<a href="https://www.bilibili.com/video/BV1KW411u7vy">https://www.bilibili.com/video/BV1KW411u7vy</a></p>
<p>​		尚硅谷的课程特点就是分好多好多好多P，每一集都好短，集数超多，如果第一天没有被这种设定劝退的话，讲的还是不错的</p>
<h4 id="九、Maven、Git"><a href="#九、Maven、Git" class="headerlink" title="九、Maven、Git"></a>九、Maven、Git</h4><h5 id="1-2020最新Maven教程-Maven基础篇之Maven实战入门"><a href="#1-2020最新Maven教程-Maven基础篇之Maven实战入门" class="headerlink" title="1. 2020最新Maven教程-Maven基础篇之Maven实战入门"></a>1. 2020最新Maven教程-Maven基础篇之Maven实战入门</h5><p>   <a href="https://www.bilibili.com/video/BV1dp4y1Q7Hf">https://www.bilibili.com/video/BV1dp4y1Q7Hf</a></p>
<p>   课程来自动力节点，从是什么，做什么，为什么到怎么用，分步清晰</p>
<h5 id="2-Git与GitHub基础全套完整版教程（快速上手，一套搞定）"><a href="#2-Git与GitHub基础全套完整版教程（快速上手，一套搞定）" class="headerlink" title="2. Git与GitHub基础全套完整版教程（快速上手，一套搞定）"></a>2. Git与GitHub基础全套完整版教程（快速上手，一套搞定）</h5><p>​		<a href="https://www.bilibili.com/video/BV1pW411A7a5">https://www.bilibili.com/video/BV1pW411A7a5</a></p>
<p>​		尚硅谷的课程，评价如题，Git和GitHub快速上手一套搞定</p>
<h4 id="十、JAVA并发与JVM"><a href="#十、JAVA并发与JVM" class="headerlink" title="十、JAVA并发与JVM"></a>十、JAVA并发与JVM</h4><h5 id="1-【狂神说Java】JUC并发编程最新版通俗易懂"><a href="#1-【狂神说Java】JUC并发编程最新版通俗易懂" class="headerlink" title="1. 【狂神说Java】JUC并发编程最新版通俗易懂"></a>1. 【狂神说Java】JUC并发编程最新版通俗易懂</h5><pre><code>https://www.bilibili.com/video/BV1B7411L7tE
</code></pre>
<h5 id="2-尚硅谷JVM全套教程，百万播放，全网巅峰（宋红康详解java虚拟机）"><a href="#2-尚硅谷JVM全套教程，百万播放，全网巅峰（宋红康详解java虚拟机）" class="headerlink" title="2. 尚硅谷JVM全套教程，百万播放，全网巅峰（宋红康详解java虚拟机）"></a>2. 尚硅谷JVM全套教程，百万播放，全网巅峰（宋红康详解java虚拟机）</h5><p>​		<a href="https://www.bilibili.com/video/BV1PJ411n7xZ">https://www.bilibili.com/video/BV1PJ411n7xZ</a></p>
<p>​		评价：太TM细致了</p>
<h4 id="十一、Redis"><a href="#十一、Redis" class="headerlink" title="十一、Redis"></a>十一、Redis</h4><h5 id="1-【狂神说Java】Redis最新超详细版教程通俗易懂"><a href="#1-【狂神说Java】Redis最新超详细版教程通俗易懂" class="headerlink" title="1. 【狂神说Java】Redis最新超详细版教程通俗易懂"></a>1. 【狂神说Java】Redis最新超详细版教程通俗易懂</h5><pre><code> https://www.bilibili.com/video/BV1S54y1R7SB
</code></pre>
<h5 id="2-【尚硅谷】2021-最新-Redis-6-入门到精通-超详细-教程"><a href="#2-【尚硅谷】2021-最新-Redis-6-入门到精通-超详细-教程" class="headerlink" title="2. 【尚硅谷】2021 最新 Redis 6 入门到精通 超详细 教程"></a>2. 【尚硅谷】2021 最新 Redis 6 入门到精通 超详细 教程</h5><p>​		  <a href="https://www.bilibili.com/video/BV1Rv41177Af">https://www.bilibili.com/video/BV1Rv41177Af</a></p>
<h4 id="十二、Linux"><a href="#十二、Linux" class="headerlink" title="十二、Linux"></a>十二、Linux</h4><h5 id="1-【小白入门-通俗易懂】2021韩顺平-一周学会Linux"><a href="#1-【小白入门-通俗易懂】2021韩顺平-一周学会Linux" class="headerlink" title="1. 【小白入门 通俗易懂】2021韩顺平 一周学会Linux"></a>1. 【小白入门 通俗易懂】2021韩顺平 一周学会Linux</h5><p>   <a href="https://www.bilibili.com/video/BV1Sv411r7vd">https://www.bilibili.com/video/BV1Sv411r7vd</a></p>
<p>​		通俗易懂，从0开始，够肝的话，一周真的可以</p>
<h4 id="十三、面试、简历、职场、学习法、技巧、心理、单口相声-脱口秀"><a href="#十三、面试、简历、职场、学习法、技巧、心理、单口相声-脱口秀" class="headerlink" title="十三、面试、简历、职场、学习法、技巧、心理、单口相声+脱口秀"></a>十三、面试、简历、职场、学习法、技巧、心理、单口相声+脱口秀</h4><ol>
<li>不高兴就喝水  水哥yyds！</li>
</ol>
<p>​		<a href="https://space.bilibili.com/412704776">https://space.bilibili.com/412704776</a></p>
<hr>
<p>本文档下载方法</p>
<ol>
<li>公众号-程序员cxuan &#x2F; 公众号-不高兴就喝水</li>
</ol>
<p>回复：B站资源</p>
]]></content>
      <categories>
        <category>专业相关知识</category>
      </categories>
      <tags>
        <tag>专业相关知识</tag>
      </tags>
  </entry>
  <entry>
    <title>final project ideas</title>
    <url>/2022/04/11/final-project-ideas/</url>
    <content><![CDATA[<p>在GitHub上找到一些不错的项目。需要按照课程要求实现自己的项目。</p>
<span id="more"></span>

<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ol>
<li>Big Data</li>
<li>Spark</li>
</ol>
<h1 id="已有项目"><a href="#已有项目" class="headerlink" title="已有项目"></a>已有项目</h1><h1 id="基于Spark的电影推荐系统"><a href="#基于Spark的电影推荐系统" class="headerlink" title="基于Spark的电影推荐系统"></a><a href="https://github.com/LuckyZXL2016/Movie_Recommend">基于Spark的电影推荐系统</a></h1><p>基于大数据过滤引擎的电影推荐系统–“懂你”电影网站，包含了爬虫、电影网站（前端和后端）、后台管理系统以及推荐系统（Spark）</p>
<h1 id="News-recommend"><a href="#News-recommend" class="headerlink" title="News_recommend"></a><a href="https://github.com/luochana/News_recommend">News_recommend</a></h1><p>基于大数据计算引擎的新闻推荐系统–”今日小站”，包含了爬虫，新闻网站（前端和后端），推荐系统（Spark）</p>
<h1 id="深圳地铁大数据客流分析系统"><a href="#深圳地铁大数据客流分析系统" class="headerlink" title="深圳地铁大数据客流分析系统"></a><a href="https://github.com/geekyouth/SZT-bigdata">深圳地铁大数据客流分析系统</a></h1><p><strong><u><em>！： This one is FUCKING HARD</em></u></strong></p>
<p>主要分析深圳通刷卡数据，通过大数据技术角度来研究深圳地铁客运能力，探索深圳地铁优化服务的方向</p>
<h1 id="基于Spark2-x新闻网大数据实时分析可视化系统项目"><a href="#基于Spark2-x新闻网大数据实时分析可视化系统项目" class="headerlink" title="基于Spark2.x新闻网大数据实时分析可视化系统项目"></a><a href="https://github.com/LuckyZXL2016/News_Spark">基于Spark2.x新闻网大数据实时分析可视化系统项目</a></h1><h1 id="改变"><a href="#改变" class="headerlink" title="改变"></a>改变</h1><p>根据之前的proposal，我们需要将有spark技术的大数据系统，结合AWS，应用到COVID或者别的什么疾病上面。</p>
<ol>
<li>人流 + 疫情peak</li>
<li>scrap policy + peak, 根据疫情和不同的政治要求选择最佳的policy</li>
<li>scrap twitter &#x2F; reddit or some media, predict the new version of virus</li>
<li>scrap on-time twitter &#x2F; reddit or some media data, visualization the covid graph</li>
</ol>
]]></content>
      <categories>
        <category>课程学习</category>
      </categories>
      <tags>
        <tag>DATA605</tag>
      </tags>
  </entry>
  <entry>
    <title>c写简易计算器（Mac）</title>
    <url>/2022/02/08/c%E5%86%99%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8%EF%BC%88Mac%EF%BC%89/</url>
    <content><![CDATA[<p>c写完编译成exe，运行环境直接用Mac的terminal，反正是unix环境，工具用的vim和gcc（Clang和xcode不熟悉）</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看文件列表</span><br><span class="line">#移动位置</span><br><span class="line">#创建文件夹</span><br><span class="line">ls</span><br><span class="line">cd</span><br><span class="line">mkdir</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装gcc</span><br><span class="line">xcode-select --install</span><br><span class="line">#查看gcc版本</span><br><span class="line">gcc -version</span><br><span class="line">或者</span><br><span class="line">gcc -dumpversion</span><br><span class="line">#查看vim版本</span><br><span class="line">vim -version</span><br></pre></td></tr></table></figure>

<p>ps：在从App Store上下载Xcode后，默认是不会安装Command Line Tools的，Command Line Tools是在Xcode中的一款工具，可以在命令行中运行C程序</p>
<p>但是vim一般都自带</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建c程序并用vim编辑</span><br><span class="line">vim test.c</span><br><span class="line"></span><br><span class="line">#写完之后保存退出</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure>



<p><a href="https://www.runoob.com/cprogramming/c-examples-calculator-switch-case.html">C 语言实例 - 实现简单的计算器</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="type">char</span> operator;</span><br><span class="line">    <span class="type">double</span> firstNumber,secondNumber;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入操作符 (+, -, *,): &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;operator);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入两个数字: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>,&amp;firstNumber, &amp;secondNumber);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">switch</span>(operator)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.1lf + %.1lf = %.1lf&quot;</span>,firstNumber, secondNumber, firstNumber + secondNumber);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.1lf - %.1lf = %.1lf&quot;</span>,firstNumber, secondNumber, firstNumber - secondNumber);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.1lf * %.1lf = %.1lf&quot;</span>,firstNumber, secondNumber, firstNumber * secondNumber);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.1lf / %.1lf = %.1lf&quot;</span>,firstNumber, secondNumber, firstNumber / secondNumber);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// operator doesn&#x27;t match any case constant (+, -, *, /)</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error! operator is not correct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>i：输入模式</p>
<p>esc：退出编辑</p>
<p>w: save</p>
<p>q: quit</p>
<p>q!: quit w&#x2F;o saving</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202080910924.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#编译</span><br><span class="line">cc test.c</span><br><span class="line">#运行</span><br><span class="line">./a.out</span><br><span class="line">#编译成exe</span><br><span class="line">gcc test.c -o test.exe</span><br></pre></td></tr></table></figure>

<p>test.c 是文件名</p>
<p>-o 表示输出</p>
<p>test.exe是输出的执行文件名</p>
<p><a href="https://www.runoob.com/w3cnote/gcc-parameter-detail.html">GCC 参数详解</a></p>
<hr>
<p>参考</p>
<p><a href="https://www.zhihu.com/question/304541222/answer/549543003">如何在 mac 电脑上写 C？</a></p>
]]></content>
      <categories>
        <category>专业相关知识</category>
      </categories>
      <tags>
        <tag>专业相关知识</tag>
      </tags>
  </entry>
  <entry>
    <title>fork of Github</title>
    <url>/2022/04/11/fork-of-Github/</url>
    <content><![CDATA[<p>对Github中fork功能使用的误解</p>
<p><a href="https://docs.github.com/cn/get-started/quickstart/hello-world">Github快速入门</a></p>
<span id="more"></span>

<h1 id="什么是Clone"><a href="#什么是Clone" class="headerlink" title="什么是Clone"></a>什么是Clone</h1><p>比较常使用的指令是 git clone</p>
<p>类似于Download，可以理解为<u>将云端代码下载到我们自己电脑的本地</u></p>
<p><code>git clone + 地址</code></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204110945398.png" alt="image-20220411084554356"></p>
<h1 id="什么是Watch"><a href="#什么是Watch" class="headerlink" title="什么是Watch"></a>什么是Watch</h1><p>类似于关注。后续项目有任何更新都会通知你，如果设置了邮件还会邮件通知</p>
<h1 id="什么是Star"><a href="#什么是Star" class="headerlink" title="什么是Star"></a>什么是Star</h1><p>类似于收藏。收藏了就是starred，也会点一个赞。star越多项目越厉害</p>
<h1 id="什么是Fork"><a href="#什么是Fork" class="headerlink" title="什么是Fork"></a>什么是Fork</h1><p>当选择 fork，相当于你自己有了一份原项目的拷贝，当然这个拷贝只是针对当时的项目文件，如果后续原项目文件发生改变，你必须通过其他的方式去同步。</p>
<p>fork 就是<u>将开源项目存储到我们自己的云端作为一个分支，我们可以进行一些bug修复或功能修改然后git pull 到开源项目，如果开源项目认可，可以将你的修改合并到他们的分支</u>。</p>
<p>如果我们想要修改他人github项目的话，我们直接git clone代码到本地是不能pull的，所以我们使用fork，先把代码复制到自己的github仓库，然后git clone到本地修改，然后在提交pull（这里的pull是pull到自己github仓库了，我们自己的github仓库中的代码是fork源的一个分支），这时候我们想要把修改的代码提交给他人的话，就可以在自己github上pull，等其他人看到后就可以把代码做一个合并</p>
<p><strong><u>一般来说，我们不需要使用 fork 这个功能</u></strong></p>
<p><u>除非有一些项目，可能存在 bug 或者可以继续优化的地方，你想帮助原项目作者去完善这个项目或者单纯的想在原来项目基础上己维护一个属于自己项目</u> </p>
<h2 id="如何更新fork的仓库"><a href="#如何更新fork的仓库" class="headerlink" title="如何更新fork的仓库"></a>如何更新fork的仓库</h2><p>merge功能</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202204110954395.png" alt="image-20220411085447346"></p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="clone和fork的区别"><a href="#clone和fork的区别" class="headerlink" title="clone和fork的区别"></a>clone和fork的区别</h1><p>fork：将别人的仓库复制到自己的仓库</p>
<p>clone：将github的仓库复制到自己本地的电脑</p>
<h3 id="fetch和pull有啥区别"><a href="#fetch和pull有啥区别" class="headerlink" title="fetch和pull有啥区别"></a>fetch和pull有啥区别</h3><p>pull &#x3D; fetch + merge</p>
<p>虽然pull直接包含了两步操作，还是建议多用fetch + merge，这样可以检查fetch下来的更新是否合适（虽然直接pull也是可以的）</p>
<h1 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h1><p>很多人错误的在使用 fork。很多人把 fork 当成了收藏一样的功能，包括一开始使用 github 的我，每次看到一个好的项目就先 fork，因为这样，就可以我的 repository(仓库)列表下查看 fork 的项目了。</p>
<p>其实你完全可以使用 star 来达到这个目的。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol>
<li>对于一些可能会经常发生变化的会不定期更新的好项目 多使用 watch.</li>
<li>喜欢一个项目就 star </li>
<li>修改开源项目就使用 fork，这样你就可以在原项目的基础上，对项目进行修改</li>
</ol>
<hr>
<p>Git可以多人协作完成项目，或者我写完一个项目可以开源到GitHub上，看到的小伙伴fork我的代码之后发现有BUG或者有一个地方有更好的算法可以解决，他可以在他自己的仓库里面修改源码，修改好之后他可以pull request，这样我就可以看到什么地方修改了，如果我觉得他的算法可行就可以把他的代码Merge到我的项目里面，简单说就帮我修复bug了，不用我自己动手。</p>
<p>git clone 就是他们clone到本地进行修改，然后他可以提交到clone的源码中。</p>
]]></content>
      <categories>
        <category>专业相关知识</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用：draft</title>
    <url>/2022/02/27/hexo%E4%BD%BF%E7%94%A8%EF%BC%9Adraft/</url>
    <content><![CDATA[<p>draft发表转变成post</p>
<span id="more"></span>

<p>草稿 &#x2F; 私密博客</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new draft <span class="string">&quot;new draft&quot;</span></span><br></pre></td></tr></table></figure>



<p>想要强行预览的话，更改配置文件<code>render_drafts: true</code></p>
<p>想要发表，草稿变文章（draft——&gt;post)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>



<h1 id="代码–help"><a href="#代码–help" class="headerlink" title="代码–help"></a>代码–help</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: hexo &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  clean     Remove generated files and cache.</span><br><span class="line">  config    Get or <span class="built_in">set</span> configurations.</span><br><span class="line">  deploy    Deploy your website.</span><br><span class="line">  generate  Generate static files.</span><br><span class="line">  <span class="built_in">help</span>      Get <span class="built_in">help</span> on a <span class="built_in">command</span>.</span><br><span class="line">  init      Create a new Hexo folder.</span><br><span class="line">  list      List the information of the site</span><br><span class="line">  migrate   Migrate your site from other system to Hexo.</span><br><span class="line">  new       Create a new post.</span><br><span class="line">  publish   Moves a draft post from _drafts to _posts folder.</span><br><span class="line">  render    Render files with renderer plugins.</span><br><span class="line">  server    Start the server.</span><br><span class="line">  version   Display version information.</span><br><span class="line"></span><br><span class="line">Global Options:</span><br><span class="line">  --config  Specify config file instead of using _config.yml</span><br><span class="line">  --cwd     Specify the CWD</span><br><span class="line">  --debug   Display all verbose messages <span class="keyword">in</span> the terminal</span><br><span class="line">  --draft   Display draft posts</span><br><span class="line">  --safe    Disable all plugins and scripts</span><br><span class="line">  --silent  Hide output on console</span><br><span class="line"></span><br><span class="line">For more <span class="built_in">help</span>, you can use <span class="string">&#x27;hexo help [command]&#x27;</span> <span class="keyword">for</span> the detailed information</span><br><span class="line">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s</title>
    <url>/2022/04/10/k8s/</url>
    <content><![CDATA[<p>Kubernetes的学习</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>pdftest</title>
    <url>/2022/01/27/pdftest/</url>
    <content><![CDATA[<p>图书上传测试</p>
<span id="more"></span>

<div class="pdfobject-container" data-target="https://drive.google.com/drive/folders/1gMa8uz5kXSBjtbqoiZo8OCDgtscOmLvw" data-height="500px"></div>
]]></content>
      <categories>
        <category>books</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>pdftest2(Stoner)</title>
    <url>/2022/01/29/pdftest2(Stoner)/</url>
    <content><![CDATA[<p>基本语句：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% pdf ./Stoner.pdf %&#125;</span><br></pre></td></tr></table></figure>

<p>Google Drive里的pdf无法访问，试验一下本地文件</p>
<span id="more"></span>

<p>链接：</p>
<p><a href="https://developer.aliyun.com/article/659021">hexo 博客添加pdf 插件</a></p>
<p><a href="https://www.zhihu.com/question/33324071">https://www.zhihu.com/question/33324071</a></p>
<div class="pdfobject-container" data-target="./Stoner.pdf" data-height="500px"></div>



<h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion:"></a>Conclusion:</h4><p>本地是可行的。但是只能阅读，不能选择章节</p>
<p>*：</p>
<p>名字要是英文的！</p>
<hr>
<h4 id="02212022"><a href="#02212022" class="headerlink" title="02212022"></a>02212022</h4><p>补充：</p>
<p>名字全英文字符串，中间没有空格没有符号</p>
]]></content>
      <categories>
        <category>books</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>test1</title>
    <url>/2022/01/16/test1/</url>
    <content><![CDATA[<p>图像上传测试</p>
<span id="more"></span>

<p><img src="https://raw.githubusercontent.com/HenryVarro666/henryvarro666.github.io/master/tree/images/202201252041960.JPG" alt="头像1"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202201260204725.JPG" alt="IMG_1692"></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>test2</title>
    <url>/2022/01/17/test2/</url>
    <content><![CDATA[<p>Attempt  to write a blog on Mac with a sharing file folder</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>wsl安装</title>
    <url>/2022/02/13/wsl%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>Windows Subsystem for Linux（简称WSL）</p>
<ol>
<li>提供一个完全支持<a href="https://baike.baidu.com/item/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/10986747">Linux文件系统</a>的环境</li>
<li>能够与Windows上的设备和文件互通</li>
</ol>
<span id="more"></span>

<p>是一个在Windows 10上能够运行原生Linux二进制<a href="https://baike.baidu.com/item/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/2885816">可执行文件</a>（ELF格式）的兼容层。它是由<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AF/124767">微软</a>与Canonical公司合作开发，其目标是使纯正的Ubuntu、Debian等映像能下载和解压到用户的本地计算机，并且映像内的工具和实用工具能在此子系统上原生运行。 </p>
<p>如果使用Windows 10 2004以上，可以通过WSL 2来窗口化运行桌面应用，也不需要另外安装其他的X 服务器</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.jianshu.com/p/3e627ff45ccb">Windows 安装和配置 WSL</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><a href="https://docs.microsoft.com/en-us/windows/wsl/install">Install WSL</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装wsl</span><br><span class="line">wsl --install</span><br><span class="line">#安装Ubuntu</span><br><span class="line">wsl.exe --install Ubuntu</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202131226500.png" alt="image-20220213122621451"></p>
<p>*：</p>
<p>其实Microsoft Store里面也有wsl发行版</p>
<h4 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h4><ul>
<li><p>&lt;适用于Linux的Windows子系统&gt;需要打开</p>
<p>位置在于</p>
<p>​	Control Panel –&gt; Programs –&gt; Programs and Features(Turn Windows features on or off) –&gt; 打开Windows Subsystem for Linux</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202131210224.png" alt="image-20220213121041135"></p>
<p>*： Hyper-V记不得干啥用的，反正也打开了</p>
</li>
<li><p>WslRegisterDistribution failed with error: 0x80370114 Error: 0x80370114 The operation could not be started because a required feature is not installed.</p>
<p>不知道啥错,微软官网和GitHub上有解决方法可以尝试</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202131215253.png" alt="image-20220213121527198"></p>
<p>*： </p>
<p>我的vmcompute.exe在C:\Windows\WinSxS\amd64_hyperv-compute-host-service_31bf3856ad364e35_10.0.22543.1000_none_31babe78981f4b0c\vmcompute.exe</p>
<p><a href="https://answers.microsoft.com/en-us/insider/forum/all/wsl-2-installing-linux-failed-error-code/bae391d1-4215-4d93-b0c4-3d96404a7c74">WSL 2 Installing Linux failed, error code: 0x80370114</a></p>
<p><a href="https://github.com/microsoft/WSL/issues/4626">microsoft&#x2F;WSL</a></p>
<p><a href="https://blog.csdn.net/qq_28193019/article/details/88391520">win10启动内置Linux系统时，报错：WslRegisterDistribution failed with error: 0x800703fa</a></p>
</li>
</ul>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>最后直接powershell输入Ubuntu就可以打开了</p>
<p>wsl也能直接打开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 更新软件源</span><br><span class="line">sudo apt-get update  </span><br><span class="line"># 更新已经安装的软件</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line"># 查看当前Ubuntu版本</span><br><span class="line">cat /etc/issue</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/indiepop/archive/2011/11/10/2244903.html">给Ubuntu软件升级命令</a></p>
<p><a href="https://www.jianshu.com/p/3749c12eee44">WSL挂载移动硬盘和u盘</a></p>
]]></content>
      <categories>
        <category>专业相关知识</category>
      </categories>
      <tags>
        <tag>专业相关知识</tag>
      </tags>
  </entry>
  <entry>
    <title>使用git来上传code到github</title>
    <url>/2022/02/27/%E4%BD%BF%E7%94%A8git%E6%9D%A5%E4%B8%8A%E4%BC%A0code%E5%88%B0github/</url>
    <content><![CDATA[<p>学习git使用</p>
<span id="more"></span>

<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>安装git</p>
<p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> git config <span class="literal">--global</span> user.name <span class="string">&quot;John Doe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$</span> git config <span class="literal">--global</span> user.email johndoe@example.com</span><br></pre></td></tr></table></figure>

<p>重申一遍，你只需要做一次这个设置。</p>
<p>如果你传递了 –global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要–global选项。</p>
<p>通过<code>git init</code> 把这个文件夹变成Git可管理的仓库</p>
<p>通过<code>git add 文件名</code>(只添加一个)把项目添加到仓库&#x2F;通过<code>git add .</code>把该目录下的所有文件添加到仓库</p>
<p>通过<code>git status</code>查看你当前的状态</p>
<p>将本地的仓库关联到github上:</p>
<p><code>git remote add orogin https://github.com/用户名/仓库名</code></p>
<p>上传github之前，要先pull一下</p>
<p><code>git pull origin master</code></p>
<p>上传代码到github远程仓库</p>
<p><code>git push -u origin master</code></p>
<h3 id="git-push的区别"><a href="#git-push的区别" class="headerlink" title="git push的区别"></a>git push的区别</h3><p><code>git push origin</code></p>
<p>上面命令表示，将当前分支推送到origin主机的对应分支。 </p>
<p>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p>
<p><code>git push</code> </p>
<p>如果当前分支与多个主机存在追踪关系，那么这个时候-u选项会指定一个默认主机，这样后面就可以不加任何参数使用git push。</p>
<p><code>git push -u origin master</code> </p>
<p>上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。</p>
<p>不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。</p>
<h4 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h4><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202250919495.png" alt="image-20220225091918469"></p>
<p>Solution</p>
<p><a href="https://stackoverflow.com/questions/23401652/fatal-the-current-branch-master-has-no-upstream-branch">https://stackoverflow.com/questions/23401652/fatal-the-current-branch-master-has-no-upstream-branch</a></p>
<h3 id="Large-Files"><a href="#Large-Files" class="headerlink" title="Large Files"></a>Large Files</h3><p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202250916297.png" alt="image-20220225091627254"></p>
<p>Solution：</p>
<p><a href="https://git-lfs.github.com/">https://git-lfs.github.com/</a></p>
<p><a href="https://github.com/git-lfs/git-lfs/issues/1933">https://github.com/git-lfs/git-lfs/issues/1933</a></p>
<p><a href="https://www.jianshu.com/p/7d8003ba2324">https://www.jianshu.com/p/7d8003ba2324</a></p>
<h4 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h4><p><a href="https://git-scm.com/docs/git-reset">https://git-scm.com/docs/git-reset</a></p>
<p><a href="https://blog.csdn.net/weixin_43249548/article/details/116532555">https://blog.csdn.net/weixin_43249548/article/details/116532555</a></p>
<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p><code>git commit -m &quot; message&quot;</code></p>
<p><a href="https://www.cnblogs.com/wangrenmeng/p/10430369.html">git commit 详解 - 哒哒呵~ - 博客园</a></p>
<p><a href="https://www.cnblogs.com/qianqiannian/p/6005628.html">Git commit 常见用法 - 浅浅念 - 博客园</a></p>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><p>main和master</p>
<p><a href="https://backlog.com/git-tutorial/cn/stepup/stepup2_3.html">https://backlog.com/git-tutorial/cn/stepup/stepup2_3.html</a></p>
<p><a href="https://blog.csdn.net/qq_42585582/article/details/109006783">https://blog.csdn.net/qq_42585582/article/details/109006783</a></p>
<p><a href="https://www.runoob.com/git/git-branch.html">https://www.runoob.com/git/git-branch.html</a></p>
<h3 id="clone-x2F-pull-x2F-fetch的区别"><a href="#clone-x2F-pull-x2F-fetch的区别" class="headerlink" title="clone&#x2F;pull&#x2F;fetch的区别"></a>clone&#x2F;pull&#x2F;fetch的区别</h3><p>参考文章：<a href="https://segmentfault.com/a/1190000017030384">https://segmentfault.com/a/1190000017030384</a></p>
<h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><p>将其他仓库克隆到本地，<strong>包括被clone仓库的版本变化</strong></p>
<p>当前目录比方说是在e:&#x2F;course&#x2F;中，此时若想下载远程仓库，本地无需**<code>git init</code>**,直接git clone url（url是你远程仓库的地址，直接复制就可以了）。执行git clone等待clone结束，e:&#x2F;course&#x2F;目录下自动会有一个.git的隐藏文件夹（如果看不见，请尝试设置隐藏文件夹可见），因为是clone来的，所以.git文件夹里存放着与远程仓库一模一样的版本库记录。</p>
<p><u><strong>clone操作是一个从无到有的克隆操作，再次强调不需要<code>git init</code>初始化</u></strong></p>
<h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a><strong>用法</strong></h5><p>本地目录与远程仓库同名</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone &lt;版本库的url&gt;</span><br><span class="line"><span class="comment"># git clone https://github.com/tensorflow/tensorflow.git</span></span><br><span class="line"><span class="comment"># git clone git@github.com:tensorflow/tensorflow.git</span></span><br></pre></td></tr></table></figure>

<p>本地目录不想与远程仓库同名</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</span><br></pre></td></tr></table></figure>

<h4 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h4><p>拉取远程分支更新到本地仓库的操作。</p>
<p>比如远程仓库里的学习资料有了新内容，需要把新内容下载下来的时候，就可以使用<code>git pull</code>命令</p>
<p>git pull是相当于从远程仓库获取最新版本，然后再与本地分支merge（合并）</p>
<h5 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br><span class="line"><span class="comment"># 将远程主机origin的master分支拉取过来，与本地的branchtest分支合并</span></span><br><span class="line"><span class="comment"># git pull origin master:branchtest</span></span><br><span class="line"><span class="comment"># 用fetch来表示的话就是：</span></span><br><span class="line">    <span class="comment"># git fetch origin master:brantest</span></span><br><span class="line">    <span class="comment"># git merge brantest</span></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将远程origin仓库的master分支拉取下来与本地当前分支合并</span></span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>



<h4 id="git-fetch：更新远程代码到本地仓库"><a href="#git-fetch：更新远程代码到本地仓库" class="headerlink" title="git fetch：更新远程代码到本地仓库"></a>git fetch：更新远程代码到本地仓库</h4><p>理解 fetch 的关键, 是理解 FETCH_HEAD</p>
<blockquote>
<p>FETCH_HEAD指的是: 某个branch在服务器上的最新状态’。</p>
<p>这个列表保存在 .Git&#x2F;FETCH_HEAD 文件中, 其中每一行对应于远程服务器的一个分支。</p>
<p>当前分支指向的FETCH_HEAD, 就是这个文件第一行对应的那个分支.</p>
</blockquote>
<p>一般来说, 存在两种情况:</p>
<ul>
<li>如果没有显式的指定远程分支, 则远程分支的master将作为默认的FETCH_HEAD</li>
<li>如果指定了远程分支, 就将这个远程分支作为FETCH_HEAD</li>
</ul>
<h5 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git fetch origin master                </span><br><span class="line"><span class="comment">#从远程的origin仓库的master分支下载代码到本地的origin maste</span></span><br><span class="line">git log <span class="literal">-p</span> master.. origin/master      </span><br><span class="line"><span class="comment">#比较本地的仓库和远程参考的区别</span></span><br><span class="line">git merge origin/master                </span><br><span class="line"><span class="comment">#把远程下载下来的代码合并到本地仓库，远程的和本地的合并</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git fetch origin master:temp          </span><br><span class="line"><span class="comment">#从远程的origin仓库的master分支下载到本地并新建一个分支temp</span></span><br><span class="line">git <span class="built_in">diff</span> temp                          </span><br><span class="line"><span class="comment">#比较master分支和temp分支的不同</span></span><br><span class="line">git merge temp                         </span><br><span class="line"><span class="comment">#合并temp分支到master分支</span></span><br><span class="line">git branch <span class="literal">-d</span> temp                     </span><br><span class="line"><span class="comment">#删除temp</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>专业相关知识</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>健康水果</title>
    <url>/2022/03/25/%E5%81%A5%E5%BA%B7%E6%B0%B4%E6%9E%9C/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>出行Sweden</title>
    <url>/2022/02/05/%E5%87%BA%E8%A1%8C%E7%91%9E%E5%85%B8/</url>
    <content><![CDATA[<p>02052022</p>
<p>预计春假（3.2-3.27）出行瑞典。</p>
<span id="more"></span>

<p>参考：</p>
<p><a href="https://piao.tips/schengen-visa-in-the-us-france/">F1&#x2F;H1B在美国办理申根签证指南(法国-全领区)</a></p>
<p><a href="https://blog.1point3acres.com/schengen-visa-guide-instruction/">【超全】在美国办理欧洲申根签证攻略！申请流程、所需材料、注意事项</a></p>
<p>注意点：</p>
<ol>
<li><p>疫情</p>
<p>核酸检测</p>
</li>
<li><p>保险</p>
<p>合适的旅游保险</p>
</li>
<li><p>时差</p>
</li>
<li><p>电话卡+银行卡</p>
<p>银行卡应该visa就可以了（之前在法兰克证实可行）</p>
<p>电话卡（落地买预付卡）：</p>
<p><a href="https://www.traveltomtom.net/destinations/europe/sweden/sweden-sim-card">Buying a Sim Card in Sweden in 2021</a></p>
</li>
<li><p>住宿+出行</p>
<p>住宿：</p>
<p>Airbnb</p>
</li>
<li><p>申根签证</p>
<p>准备材料：</p>
<ul>
<li><input disabled="" type="checkbox"> Bank Statement</li>
<li>[ ]</li>
</ul>
</li>
</ol>
<p>杨地址：</p>
<blockquote>
<p>Address：Malvinas väg 14, 31413,<br>Postcode：114 28<br>City：Stockholm，<br>Phone：+46 0724439783</p>
</blockquote>
<p>流程：</p>
<hr>
<p>机票购买：</p>
<p>App:</p>
<blockquote>
<p>Flights by StudentUniverse</p>
</blockquote>
<p>Ps:</p>
<p>20-27春假，20周日</p>
<p>–&gt; 可以18周五出发</p>
<p>​		16周三做核酸</p>
<hr>
<p>02132022</p>
<p>直接gg</p>
<p>签证过了护照会被收走，然后才快递送回来，时间上来不及，需要预留起码两周的时间</p>
]]></content>
      <categories>
        <category>尘世间</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>听力速记</title>
    <url>/2022/02/04/%E5%90%AC%E5%8A%9B%E9%80%9F%E8%AE%B0/</url>
    <content><![CDATA[<p>如何记录听力笔记？</p>
<span id="more"></span>

<p>知乎：</p>
<p><a href="https://zhuanlan.zhihu.com/p/33207590">英语听力笔记简写规则+速记符号汇总，省时省力记笔记！</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/29536224">托福听力笔记速记大法！省时、高效、准确记笔记！</a></p>
<p>小红书：</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202041101213.JPG" alt="IMG_1795"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202041101351.JPG" alt="IMG_1796"></p>
]]></content>
      <categories>
        <category>专业相关知识</category>
      </categories>
      <tags>
        <tag>专业相关知识</tag>
      </tags>
  </entry>
  <entry>
    <title>影视资源搜索</title>
    <url>/2022/03/16/%E5%BD%B1%E8%A7%86%E8%B5%84%E6%BA%90%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<p>电影 &amp; 电视剧 搜索资源网址</p>
<span id="more"></span>

<ol>
<li><p>爱电影搜索网址</p>
<p><a href="http://mt.lxxh.cc/">http://mt.lxxh.cc</a></p>
</li>
<li><p>莉莉搜索<br><a href="http://a12.66perfect.com/">http://a12.66perfect.com/</a></p>
</li>
<li><p>数据搜索<br><a href="http://xx.xinyy.cn/app/index.html?id=211210dou">http://xx.xinyy.cn/app/index.html?id=211210dou</a></p>
</li>
<li><p>凹凸搜索<br><a href="http://i1.at7777.top/">http://i1.at7777.top/</a></p>
</li>
<li><p>可乐美剧搜索</p>
<p>（复制到浏览器才可以）</p>
<p><a href="https://kelemeiju.kuaizhan.com/">https://kelemeiju.kuaizhan.com/</a></p>
</li>
<li><p>公众号：DDD口袋</p>
</li>
</ol>
]]></content>
      <categories>
        <category>尘世间</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>总体课程大纲</title>
    <url>/2022/02/21/%E6%80%BB%E4%BD%93%E8%AF%BE%E7%A8%8B%E5%A4%A7%E7%BA%B2/</url>
    <content><![CDATA[<p>Recommended by <strong>Nicole Riesgo Pietrucha</strong></p>
<span id="more"></span>

<h5 id="Spring-2022"><a href="#Spring-2022" class="headerlink" title="Spring 2022"></a>Spring 2022</h5><p>DATA604 Data Representation and Modeling (Required)<br>DATA605 Big Data Systems (Required)<br>DATA606 Algorithms for Data Science (Required)<br>DATA641 Natural Language Processing (Elective)</p>
<h5 id="Summer-2022"><a href="#Summer-2022" class="headerlink" title="Summer 2022"></a>Summer 2022</h5><p>DATA698 Research Methods and Study Design (Required)<br>DATA612 Deep Learning (Elective)</p>
<h5 id="Fall-2022"><a href="#Fall-2022" class="headerlink" title="Fall 2022"></a>Fall 2022</h5><p>DATA601 Probability and Statistics (Required)<br>DATA602 Principles of Data Science (Required<br>DATA603 Principles of Machine Learning (Required)<br>DATA607 Communication in Data Science and Analytics (Required)<br>DATA650 Cloud Computing or another elective (Elective)<br>DATA699 Capstone Research Project (Elective)</p>
<h5 id="Spring-2023"><a href="#Spring-2023" class="headerlink" title="Spring 2023"></a>Spring 2023</h5><p>DATA604 Data Representation and Modeling (Required)<br>DATA605 Big Data Systems (Required)<br>DATA641 Natural Language Processing (Elective)</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202202210908327.jpg" alt="课程名字"></p>
]]></content>
      <categories>
        <category>UMD</category>
      </categories>
      <tags>
        <tag>UMD</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2020/04/05/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>##第一章</p>
<p>个人感觉搭建一个博客对自身来说是十分重要的，一方面可以记载学习经历，另一方面可以当作日记来记录日常生活。</p>
<span id="more"></span>
<hr>
<p>##第二章</p>
<p>自己对于markdown格式完全不熟悉，也需要先学一学了。</p>
<hr>
<p>##参考文献</p>
<p><a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&amp;seid=1723847160204875465">https://www.bilibili.com/video/BV1Yb411a7ty?from=search&amp;seid=1723847160204875465</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo博客的第三天</title>
    <url>/2020/04/06/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
    <content><![CDATA[<p>基本上整个博客都搞得差不多，个人还是比较满意的，以后也有改善的空间。</p>
<span id="more"></span>
<h1 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h1><p>没有自己买域名，挂在github上还是有点慢的。暂时也没必要买国内的域名租服务器。</p>
<h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><p>晚上研究一下如何把图片保存在云端，本地的话现在刷新已经有点慢了。<br>还有那个随着鼠标转动视线的人物也是我想搞一搞的。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo博客的第二天</title>
    <url>/2020/04/05/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
    <content><![CDATA[<p>关于博客的搭建</p>
<p>今天尝试把themes从yilia换成了Next，理由是自由度更高，有更多的插件。</p>
<span id="more"></span>   
<p>这同时也是王舟大佬Wonz的选择。</p>
<p>大佬的博客分类详细而且很具体，虽然出现了一部分细小的差错，但是以大佬的博客为基础，结合百度的资源，总体来说不是很麻烦。</p>
<p>改进与不足</p>
<p>今天相较昨天，增加了分类项和标签项,然后尝试优化了动态壁纸、增加点击出现爱心的操作、去除了底部的主题宣传标语和增加了访问统计和字数统计。</p>
<p>但是，在各个指导博客中也提到了照片的引用，如果照片保存在本地，以后的迁移会很麻烦。之后的几天也许会改进一下云空间保存照片。其他的许多功能暂时用不到，后续会慢慢留意。</p>
<p>Markdown语言</p>
<p>Markdown语言是很简单的一种用于普通文本编辑器的标记语言。简洁明了、容易学习，功能比纯文本强，<br>但是，对于我来说，还是一种全新的文本编辑语言，有着自身的特色。还是需要学习的。</p>
<p>包括照片的引用、代码的引用、加粗、斜体、高亮等等。慢慢学吧</p>
<p>参考资料</p>
<p><a href="https://blog.csdn.net/wonz5130/category_9280211.html">https://blog.csdn.net/wonz5130/category_9280211.html</a><br><a href="https://www.jianshu.com/p/f054333ac9e6">https://www.jianshu.com/p/f054333ac9e6</a><br><a href="https://www.zhihu.com/question/20409634/answer/90728572">https://www.zhihu.com/question/20409634/answer/90728572</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo博客的第五天</title>
    <url>/2020/04/10/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AC%AC%E4%BA%94%E5%A4%A9/</url>
    <content><![CDATA[<p>往博客里面放图出现的一些问题</p>
<span id="more"></span>
<p>图确实可以云端上传了，但是呢我发现这个图比我预计的大小实在大太多了，这也需要改一改。</p>
<p>如何加密某些特定博客</p>
<p>随着我写一些东西，可能涉及隐私或者敏感话题，我可能也需要学着加密一部分博客了。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo博客的第四天</title>
    <url>/2020/04/09/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AC%AC%E5%9B%9B%E5%A4%A9/</url>
    <content><![CDATA[<p>使用图床，以后可以方便贴照片了</p>
<span id="more"></span>
<p>与其他一些博客上教的不太一样，我没有贪图国内网盘的速度而选择那个什么七牛图床，为了稳定依然是跟着Wonz大佬选择用GitHub+PicGo，除了隐私差一点因为GitHub人人可访问，但是不会出现什么域名变更，背后也是微软，稳定性毋庸置疑。</p>
<p>实际上昨天有点忙也没来得及搞，发现还是挺简单的，以后很多图可以直接上传了。</p>
<p>还有一个好处就是会自动生成markdown链接，需要的时候复制一下就好了。过一会儿写一篇随笔贴几个图。</p>
<p>下一步</p>
<p>下一步是想给博客增加一个虚拟人物，动漫动物都可以，可以跟着鼠标转动的，感觉挺有意思的。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>新东方 先导课程</title>
    <url>/2022/02/19/%E6%96%B0%E4%B8%9C%E6%96%B9-%E5%85%88%E5%AF%BC%E8%AF%BE%E7%A8%8B/</url>
    <content><![CDATA[<p>先导课程</p>
<span id="more"></span>

<p>02192022</p>
<hr>
<p>如何做科研</p>
<ul>
<li><p>认清专业方向 明确专业选择</p>
<p>追踪领域发展现状；明确专业前沿热点课题；梳理专业及职业发展方向</p>
<p>网络&#x2F;老师同学交流&#x2F;专业座谈 探索热点专业、兴趣专业、难点专业</p>
</li>
<li><p>阅读专业文献 完善知识体系</p>
</li>
<li><p>做好科研实践 理论联系实际</p>
</li>
<li><p>撰写科研论文 输入转化输出</p>
</li>
<li><p>总结经验教训 学会举一反三，避免重蹈覆辙</p>
</li>
</ul>
]]></content>
      <categories>
        <category>专业相关知识</category>
      </categories>
      <tags>
        <tag>新东方</tag>
      </tags>
  </entry>
  <entry>
    <title>新东方 科研</title>
    <url>/2022/02/21/%E6%96%B0%E4%B8%9C%E6%96%B9-%E7%A7%91%E7%A0%94/</url>
    <content><![CDATA[<p>大数据存储技术</p>
<span id="more"></span>

<h2 id="上课时间"><a href="#上课时间" class="headerlink" title="上课时间"></a>上课时间</h2><p>️ 项目每周1次课，一次1小时，共8周，【北京时间】每周一上课。</p>
<p>️ 第一次上课时间：<br>【北京时间】（1月21日）周一晚22:00-23:00</p>
<p>【美东时间】（1月21日）周一早上 9:00-10:00</p>
<p>如果在后期课程时间上同学和导师有调整，我们可以及时沟通协调～如有项目上的其他问题都可以第一时间和我反馈解决</p>
<hr>
<p>8次固定讨论</p>
<h2 id="预习资料"><a href="#预习资料" class="headerlink" title="预习资料"></a>预习资料</h2><ol>
<li><h3 id="Runoob教程"><a href="#Runoob教程" class="headerlink" title="Runoob教程"></a>Runoob教程</h3><p><a href="https://www.runoob.com/python/python-tutorial.html"><strong>Python教程</strong></a></p>
<p><a href="http://www.runoob.com/docker/docker-tutorial.html"><strong>docker</strong> 教程</a></p>
<p><a href="http://www.runoob.com/w3cnote/yaml-intro.html"><strong>yaml</strong> 入门教程</a></p>
<p><a href="http://www.runoob.com/json/json-tutorial.html"><strong>json</strong> 教程 </a></p>
</li>
<li><h3 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h3><p><a href="https://www.anaconda.com/">https://www.anaconda.com/</a></p>
</li>
<li><h3 id="Intellij"><a href="#Intellij" class="headerlink" title="Intellij"></a>Intellij</h3><p><a href="https://www.jetbrains.com/idea/">https://www.jetbrains.com/idea/</a></p>
<p>pycharm 和 vscode都可以</p>
</li>
<li><h3 id="JSON、-YAML"><a href="#JSON、-YAML" class="headerlink" title="JSON、 YAML"></a>JSON、 YAML</h3><p>这部分内容可以自行百度或者谷歌</p>
<ul>
<li><p><a href="https://www.baidu.com/link?url=8s9TUV6tuMsTOmEPrdl1Cua8hqNmT1FnjVIznx9sri3OBjObaon6j-UvP_2x-dTtr5KcsBDBvsOWR1xJPOOct_&wd=&eqid=e60f193100035b720000000662132c74"><em>yaml和json</em>区别 - Parallax - 博客园</a></p>
</li>
<li><p><a href="https://www.baidu.com/link?url=PUAR-jyiXqK516dLpit_A44L7SHaEeYp3tc1S6xjztr_MwOGoQP3_Cz4m6-l2Cy2AWDadeN4o9bl4dUUFAr6KS1aCXU_0kw43cC9_gk6Q2a&wd=&eqid=e60f193100035b720000000662132c74">深入对比TOML,<em>JSON和YAML</em>_行知致简的专栏-CSDN博客</a></p>
</li>
<li><p><a href="https://www.geeksforgeeks.org/what-is-the-difference-between-yaml-and-json/">What is the difference between YAML and JSON?</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/1726802/what-is-the-difference-between-yaml-and-json"><strong>What is the difference between YAML and JSON? - Stackflow</strong> </a></p>
<h4 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h4><blockquote>
<p>YAML 是 “YAML Ain’t a Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。</p>
<p>YAML 的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。它使用空白符号缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件、倾印调试内容、文件大纲（例如：许多电子邮件标题格式和YAML非常接近）。</p>
<p>YAML 的配置文件后缀为 <strong>.yml</strong>，如：<strong>runoob.yml</strong> </p>
</blockquote>
<h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><blockquote>
<ul>
<li>JSON 指的是 JavaScript 对象表示法（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation）</li>
<li>JSON 是轻量级的文本数据交换格式</li>
<li>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</li>
<li>JSON 具有自我描述性，更易理解</li>
</ul>
<p>JSON 是存储和交换文本信息的语法，类似 XML。</p>
<p>JSON 比 XML 更小、更快，更易解析。</p>
</blockquote>
</li>
</ul>
</li>
<li><h3 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h3><p><a href="https://restfulapi.net/">https://restfulapi.net/</a></p>
<blockquote>
<p>“<strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer and an architectural style for <strong>distributed hypermedia systems</strong>“</p>
<blockquote>
<p>A Web API (or Web Service) conforming to the REST architectural style is a <em>REST API</em>.</p>
<p>符合 REST 体系结构风格的 Web API (或 Web 服务)是 REST API。</p>
</blockquote>
</blockquote>
<p>*：大致4个命令</p>
</li>
<li><h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h3><p><a href="https://www.palletsprojects.com/p/flask/">https://www.palletsprojects.com/p/flask/</a></p>
<blockquote>
<p>Flask is a lightweight <a href="https://wsgi.readthedocs.io/">WSGI</a> web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications. It began as a simple wrapper around <a href="https://www.palletsprojects.com/p/werkzeug">Werkzeug</a> and <a href="https://www.palletsprojects.com/p/jinja">Jinja</a> and has become one of the most popular Python web application frameworks.</p>
<p>是一个轻量级的 WSGI web 应用框架。它的设计目的是使入门快速和容易，能够扩展到复杂的应用程序。它最初只是一个围绕 Werkzeug 和Jinja的简单包装器，现在已经成为最流行的 Python web 应用框架之一。</p>
<p>Flask offers suggestions, but doesn’t enforce any dependencies or project layout. It is up to the developer to choose the tools and libraries they want to use. There are many extensions provided by the community that make adding new functionality easy.</p>
<p>提供了建议，但并不强制任何依赖项或项目布局。这取决于开发人员选择他们想要使用的工具和库。社区提供了许多扩展，使得添加新功能变得容易。</p>
</blockquote>
</li>
<li><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p><a href="https://www.docker.com/">https://www.docker.com/</a></p>
<blockquote>
<p>Docker 是一个开源的应用容器引擎，基于 <a href="https://www.runoob.com/go/go-tutorial.html">Go 语言</a> 并遵从 Apache2.0 协议开源。</p>
<p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>
<p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p>
<p>Docker 的可移植性和轻量级的特性，还可以使您轻松地完成动态管理的工作负担，并根据业务需求指示，实时扩展或拆除应用程序和服务。</p>
<ul>
<li>Web 应用的自动化打包和发布。</li>
<li>自动化测试和持续集成、发布。</li>
<li>在服务型环境中部署和调整数据库或其他的后台应用。</li>
<li>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</li>
</ul>
</blockquote>
</li>
<li><h3 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h3><p><a href="https://kubernetes.io/">https://kubernetes.io/</a></p>
<blockquote>
<p><a href="https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/">Kubernetes</a>, also known as K8s, is an open-source system for automating deployment, scaling, and management of containerized applications.</p>
<p>​	Kubernetes，也称为 K8s，是一个用于自动部署、扩展和管理集装箱化应用程序的开放源码系统。</p>
<p>It groups containers that make up an application into logical units for easy management and discovery</p>
<p>​	它将组成应用程序的容器分组为逻辑单元，以便于管理和发现</p>
</blockquote>
</li>
</ol>
<p>​		<a href="https://kubernetes.io/docs/setup/">Getting started</a></p>
<p>​			<a href="https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/">Install and Set Up kubectl on Windows</a></p>
<p>​			The officially supported tool for deploying Kubernetes is <a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/">kubeadm</a></p>
<h2 id="02212022"><a href="#02212022" class="headerlink" title="02212022"></a>02212022</h2><p>​	“东数西算”：高延时低延时</p>
<p>Lv.5 operator</p>
<ol>
<li>配置检查</li>
<li>（不掉线）更新</li>
<li>实现整个生命周期的管理</li>
<li>对性能指标进行观测</li>
<li>自我修复</li>
</ol>
<hr>
<p>任务：</p>
<ul>
<li><input disabled="" type="checkbox"> docker tutorial 深度剖析</li>
</ul>
<p>​	讲解流程知识点 image&#x2F;container，带来什么，image是什么结构，什么文件系统，什么网络，什么volume</p>
<p>*： <strong>多看YouTube上讲的关于docker tutorial的视频，系统学习</strong></p>
<ul>
<li><p><input disabled="" type="checkbox"> 
整理Movie Recommendation System(<u>算法</u>和数据库) + Web crawler</p>
<p>Example：2 mins ++</p>
</li>
<li><p><input disabled="" type="checkbox"> 
Mac安装Docker</p>
</li>
</ul>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>新东方</tag>
      </tags>
  </entry>
  <entry>
    <title>知识库文档网站</title>
    <url>/2022/01/26/%E7%9F%A5%E8%AF%86%E5%BA%93%E6%96%87%E6%A1%A3%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>CodeSheep——搭建知识库网站</p>
<span id="more"></span>

<h4 id="原链接："><a href="#原链接：" class="headerlink" title="原链接："></a>原链接：</h4><p><a href="https://mp.weixin.qq.com/s?__biz=MzU4ODI1MjA3NQ==&mid=2247510629&idx=1&sn=48e481b9f176ebeb2d68342af3f33317&chksm=fddd7ca1caaaf5b73efe05dcb5b87c570344708e2a7bddffb5c8bd08638b631e595a4d2b646c&mpshare=1&scene=23&srcid=0124VJ5j3hh9JE1nlWy3oziB&sharer_sharetime=1642991430675&sharer_shareid=54a5710fc77c7f44c4bab4e27c565c50#rd&ADUIN=1504517223&ADSESSION=1643208543&ADTAG=CLIENT.QQ.5651_.0&ADPUBNO=27156">干净又卫生啊兄弟们~</a></p>
]]></content>
      <categories>
        <category>专业相关知识</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>绑定域名</title>
    <url>/2022/01/29/%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/</url>
    <content><![CDATA[<p>Github个人博客：绑定域名</p>
<span id="more"></span>

<ol>
<li><p>先买个域名，阿里云和腾讯云都能买</p>
</li>
<li><p>域名解析（本地与服务器映射）</p>
<p>云解析DNS——域名解析——解析设置</p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202201291004186.png" alt="image-20220129100426119"></p>
<p><img src="https://raw.githubusercontent.com/HenryVarro666/images/master/images/202201291005664.png" alt="image-20220129100451601"></p>
</li>
<li><p>关于如何查找ip</p>
<p>ping 仓库名.github.io</p>
</li>
<li><p>在source文件夹下面新建CNAME记事本，删除后缀txt</p>
</li>
<li><p>进入GitHub设置</p>
<p>Repositories—Setting—Custom domain</p>
</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
